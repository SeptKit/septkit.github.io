(function(){try{if(typeof document<`u`){var e=document.createElement(`style`);e.appendChild(document.createTextNode(`/*! tailwindcss v4.1.14 | MIT License | https://tailwindcss.com */
@layer properties{@supports (((-webkit-hyphens:none)) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){*,:before,:after,::backdrop{--tw-font-weight:initial;--tw-outline-style:solid;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000}}}@layer theme{:root,:host{--font-sans:ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;--color-stone-700:#44403b;--spacing:.25rem;--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--font-weight-medium:500;--default-font-family:var(--font-sans);--default-mono-font-family:var(--font-mono)}@supports (color:lab(0% 0 0)){:root,:host{--color-stone-700:lab(27.3812% 1.32917 3.57789)}}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab, red, red)){::placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}::-webkit-calendar-picker-indicator{line-height:1}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::file-selector-button{appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}:root{--fx-noise:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 200 200'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='200' height='200' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");scrollbar-color:currentColor #0000}@supports (color:color-mix(in lab, red, red)){:root{scrollbar-color:color-mix(in oklch,currentColor 35%,#0000)#0000}}@property --radialprogress{syntax: "<percentage>"; inherits: true; initial-value: 0%;}:root:has(.modal-open,.modal[open],.modal:target,.modal-toggle:checked,.drawer:not([class*=drawer-open])>.drawer-toggle:checked){overflow:hidden}:where(:root:has(.modal-open,.modal[open],.modal:target,.modal-toggle:checked,.drawer:not(.drawer-open)>.drawer-toggle:checked)){scrollbar-gutter:stable;background-image:linear-gradient(var(--color-base-100),var(--color-base-100));--root-bg:var(--color-base-100)}@supports (color:color-mix(in lab, red, red)){:where(:root:has(.modal-open,.modal[open],.modal:target,.modal-toggle:checked,.drawer:not(.drawer-open)>.drawer-toggle:checked)){--root-bg:color-mix(in srgb,var(--color-base-100),lab(0% 0 0) 40%)}}:where(.modal[open],.modal-open,.modal-toggle:checked+.modal):not(.modal-start,.modal-end){scrollbar-gutter:stable}@supports (width:if(else: 1px)) and (animation-timeline:scroll()){:root{animation:forwards set-page-has-scroll;animation-timeline:scroll()}@keyframes set-page-has-scroll{0%,to{--page-has-scroll:1}}:where(:root:has(.modal-open,.modal[open],.modal:target,.modal-toggle:checked,.drawer:not(.drawer-open)>.drawer-toggle:checked)){scrollbar-gutter:if(style(--page-has-scroll: 1): stable; else: unset)}}:root,[data-theme]{background-color:var(--root-bg,var(--color-base-100));color:var(--color-base-content)}:where(:root),[data-theme=ocean-light]{--lightningcss-light:initial;--lightningcss-dark: ;color-scheme:light;--color-base-100:#f8f8f8;--color-base-200:#f5f5f5;--color-base-300:#e4e4e4;--color-base-content:#404040;--color-primary:#258998;--color-primary-content:#fff;--color-secondary:#4b9eaa;--color-secondary-content:#fff;--color-accent:#009588;--color-accent-content:#f8f8f8;--color-neutral:#78706a;--color-neutral-content:#f5fce5;--color-info:#50a0ff;--color-info-content:#f8f8f8;--color-success:#00c657;--color-success-content:#f8f8f8;--color-warning:#fdcf2b;--color-warning-content:#f8f8f8;--color-error:#f82834;--color-error-content:#f8f8f8;--radius-selector:.25rem;--radius-field:.25rem;--radius-box:.25rem;--size-selector:.21875rem;--size-field:.21875rem;--border:1.5px;--depth:1;--noise:1;--border-color:var(--color-base-content)}@supports (color:lab(0% 0 0)){:where(:root),[data-theme=ocean-light]{--color-base-100:lab(97.68% -.0000298023 .0000119209);--color-base-200:lab(96.52% -.0000298023 0);--color-base-300:lab(90.72% .0000298023 -.0000119209);--color-base-content:lab(26.92% 0 -.00000596046);--color-primary:lab(52.1182% -25.1013 -16.6644);--color-primary-content:lab(100% 0 0);--color-secondary:lab(60.3471% -23.6405 -14.4068);--color-secondary-content:lab(100% 0 0);--color-accent:lab(55.0223% -41.0774 -3.90277);--color-accent-content:lab(97.6886% -.0991523 .364268);--color-neutral:lab(47.7684% 2.35736 4.26879);--color-neutral-content:lab(98.0078% -5.32481 10.2158);--color-info:lab(64.2164% -1.27971 -56.9629);--color-info-content:lab(97.6886% -.0991523 .364268);--color-success:lab(70.2031% -66.5285 45.8378);--color-success-content:lab(97.6886% -.0991523 .364268);--color-warning:lab(85.3669% 6.20878 78.7667);--color-warning-content:lab(97.6886% -.0991523 .364268);--color-error:lab(54.6666% 75.0951 49.1053);--color-error-content:lab(97.6886% -.0991523 .364268)}}:root:has(input.theme-controller[value=ocean-light]:checked){--lightningcss-light:initial;--lightningcss-dark: ;color-scheme:light;--color-base-100:#f8f8f8;--color-base-200:#f5f5f5;--color-base-300:#e4e4e4;--color-base-content:#404040;--color-primary:#258998;--color-primary-content:#fff;--color-secondary:#4b9eaa;--color-secondary-content:#fff;--color-accent:#009588;--color-accent-content:#f8f8f8;--color-neutral:#78706a;--color-neutral-content:#f5fce5;--color-info:#50a0ff;--color-info-content:#f8f8f8;--color-success:#00c657;--color-success-content:#f8f8f8;--color-warning:#fdcf2b;--color-warning-content:#f8f8f8;--color-error:#f82834;--color-error-content:#f8f8f8;--radius-selector:.25rem;--radius-field:.25rem;--radius-box:.25rem;--size-selector:.21875rem;--size-field:.21875rem;--border:1.5px;--depth:1;--noise:1;--border-color:var(--color-base-content)}@supports (color:lab(0% 0 0)){:root:has(input.theme-controller[value=ocean-light]:checked){--color-base-100:lab(97.68% -.0000298023 .0000119209);--color-base-200:lab(96.52% -.0000298023 0);--color-base-300:lab(90.72% .0000298023 -.0000119209);--color-base-content:lab(26.92% 0 -.00000596046);--color-primary:lab(52.1182% -25.1013 -16.6644);--color-primary-content:lab(100% 0 0);--color-secondary:lab(60.3471% -23.6405 -14.4068);--color-secondary-content:lab(100% 0 0);--color-accent:lab(55.0223% -41.0774 -3.90277);--color-accent-content:lab(97.6886% -.0991523 .364268);--color-neutral:lab(47.7684% 2.35736 4.26879);--color-neutral-content:lab(98.0078% -5.32481 10.2158);--color-info:lab(64.2164% -1.27971 -56.9629);--color-info-content:lab(97.6886% -.0991523 .364268);--color-success:lab(70.2031% -66.5285 45.8378);--color-success-content:lab(97.6886% -.0991523 .364268);--color-warning:lab(85.3669% 6.20878 78.7667);--color-warning-content:lab(97.6886% -.0991523 .364268);--color-error:lab(54.6666% 75.0951 49.1053);--color-error-content:lab(97.6886% -.0991523 .364268)}}}@layer components;@layer utilities{.my-0\\.5{margin-block:calc(var(--spacing)*.5)}.flex{display:flex}.h-4{height:calc(var(--spacing)*4)}.h-full{height:100%}.w-4{width:calc(var(--spacing)*4)}.w-full{width:100%}.list-none{list-style-type:none}.items-center{align-items:center}.overflow-auto{overflow:auto}.rounded{border-radius:.25rem}.p-2{padding:calc(var(--spacing)*2)}.px-2{padding-inline:calc(var(--spacing)*2)}.py-1{padding-block:calc(var(--spacing)*1)}.pb-5{padding-bottom:calc(var(--spacing)*5)}.pl-2{padding-left:calc(var(--spacing)*2)}.text-sm{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}.font-medium{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.text-stone-700{color:var(--color-stone-700)}.outline{outline-style:var(--tw-outline-style);outline-width:1px}.outline-none{--tw-outline-style:none;outline-style:none}.select-none{-webkit-user-select:none;user-select:none}.focus\\:ring-2:focus{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(2px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}}:root{--color-ocean-gray-00:#fff;--color-ocean-gray-25:#fafbfb;--color-ocean-gray-50:#f5f6f7;--color-ocean-gray-75:#eaeeef;--color-ocean-gray-100:#e1e4e6;--color-ocean-gray-150:#c6ced1;--color-ocean-gray-200:#bac1c4;--color-ocean-gray-250:#9fadb2;--color-ocean-gray-300:#889499;--color-ocean-gray-350:#72858c;--color-ocean-gray-400:#617177;--color-ocean-gray-450:#3f555e;--color-ocean-gray-500:#394d55;--color-ocean-gray-550:#34464d;--color-ocean-gray-600:#2e3e44;--color-ocean-gray-650:#27353b;--color-ocean-gray-700:#222e33;--color-ocean-gray-750:#1f272b;--color-ocean-gray-800:#171f22;--color-ocean-gray-850:#11171a;--color-ocean-gray-900:#0b0f11;--color-chart-1:#f7931e;--color-chart-2:#40535b;--color-chart-3:#2798aa;--color-chart-4:#6da89c;--color-chart-5:#a4cadd;--color-chart-6:#97b42d;--color-chart-7:#ffcb05;--color-chart-8:#ee652e;--color-chart-9:#528694;--color-chart-10:#a10f3b}@keyframes rating{0%,40%{filter:brightness(1.05)contrast(1.05);scale:1.1}}@keyframes dropdown{0%{opacity:0}}@keyframes radio{0%{padding:5px}50%{padding:3px}}@keyframes toast{0%{opacity:0;scale:.9}to{opacity:1;scale:1}}@keyframes skeleton{0%{background-position:150%}to{background-position:-50%}}@keyframes progress{50%{background-position-x:-115%}}@property --tw-font-weight{syntax:"*";inherits:false}@property --tw-outline-style{syntax:"*";inherits:false;initial-value:solid}@property --tw-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:"*";inherits:false}@property --tw-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:"*";inherits:false}@property --tw-inset-shadow-alpha{syntax:"<percentage>";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:"*";inherits:false}@property --tw-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:"*";inherits:false}@property --tw-inset-ring-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:"*";inherits:false}@property --tw-ring-offset-width{syntax:"<length>";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:"*";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:"*";inherits:false;initial-value:0 0 #0000}`)),document.head.appendChild(e)}}catch(e){console.error(`vite-plugin-css-injected-by-js`,e)}})();var __defProp = Object.defineProperty, __export = (_) => {
	let T = {};
	for (var E in _) __defProp(T, E, {
		get: _[E],
		enumerable: !0
	});
	return T;
};
/**
* @vue/shared v3.5.22
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/* @__NO_SIDE_EFFECTS__ */
function makeMap(u) {
	let _ = /* @__PURE__ */ Object.create(null);
	for (let T of u.split(",")) _[T] = 1;
	return (u) => u in _;
}
var EMPTY_OBJ = {}, EMPTY_ARR = [], NOOP = () => {}, NO = () => !1, isOn = (u) => u.charCodeAt(0) === 111 && u.charCodeAt(1) === 110 && (u.charCodeAt(2) > 122 || u.charCodeAt(2) < 97), isModelListener = (u) => u.startsWith("onUpdate:"), extend = Object.assign, remove = (u, _) => {
	let T = u.indexOf(_);
	T > -1 && u.splice(T, 1);
}, hasOwnProperty$1 = Object.prototype.hasOwnProperty, hasOwn$2 = (u, _) => hasOwnProperty$1.call(u, _), isArray = Array.isArray, isMap = (u) => toTypeString(u) === "[object Map]", isSet = (u) => toTypeString(u) === "[object Set]", isDate = (u) => toTypeString(u) === "[object Date]", isRegExp = (u) => toTypeString(u) === "[object RegExp]", isFunction = (u) => typeof u == "function", isString = (u) => typeof u == "string", isSymbol = (u) => typeof u == "symbol", isObject$2 = (u) => typeof u == "object" && !!u, isPromise = (u) => (isObject$2(u) || isFunction(u)) && isFunction(u.then) && isFunction(u.catch), objectToString = Object.prototype.toString, toTypeString = (u) => objectToString.call(u), toRawType = (u) => toTypeString(u).slice(8, -1), isPlainObject$1 = (u) => toTypeString(u) === "[object Object]", isIntegerKey = (u) => isString(u) && u !== "NaN" && u[0] !== "-" && "" + parseInt(u, 10) === u, isReservedProp = /* @__PURE__ */ makeMap(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"), cacheStringFunction$2 = (u) => {
	let _ = /* @__PURE__ */ Object.create(null);
	return ((T) => _[T] || (_[T] = u(T)));
}, camelizeRE$2 = /-\w/g, camelize$2 = cacheStringFunction$2((u) => u.replace(camelizeRE$2, (u) => u.slice(1).toUpperCase())), hyphenateRE$2 = /\B([A-Z])/g, hyphenate$2 = cacheStringFunction$2((u) => u.replace(hyphenateRE$2, "-$1").toLowerCase()), capitalize = cacheStringFunction$2((u) => u.charAt(0).toUpperCase() + u.slice(1)), toHandlerKey = cacheStringFunction$2((u) => u ? `on${capitalize(u)}` : ""), hasChanged = (u, _) => !Object.is(u, _), invokeArrayFns = (u, ..._) => {
	for (let T = 0; T < u.length; T++) u[T](..._);
}, def = (u, _, T, E = !1) => {
	Object.defineProperty(u, _, {
		configurable: !0,
		enumerable: !1,
		writable: E,
		value: T
	});
}, looseToNumber = (u) => {
	let _ = parseFloat(u);
	return isNaN(_) ? u : _;
}, toNumber = (u) => {
	let _ = isString(u) ? Number(u) : NaN;
	return isNaN(_) ? u : _;
}, _globalThis, getGlobalThis = () => _globalThis ||= typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : typeof global < "u" ? global : {}, isGloballyAllowed = /* @__PURE__ */ makeMap("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error,Symbol");
function normalizeStyle(u) {
	if (isArray(u)) {
		let _ = {};
		for (let T = 0; T < u.length; T++) {
			let E = u[T], D = isString(E) ? parseStringStyle(E) : normalizeStyle(E);
			if (D) for (let u in D) _[u] = D[u];
		}
		return _;
	} else if (isString(u) || isObject$2(u)) return u;
}
var listDelimiterRE = /;(?![^(]*\))/g, propertyDelimiterRE = /:([^]+)/, styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(u) {
	let _ = {};
	return u.replace(styleCommentRE, "").split(listDelimiterRE).forEach((u) => {
		if (u) {
			let T = u.split(propertyDelimiterRE);
			T.length > 1 && (_[T[0].trim()] = T[1].trim());
		}
	}), _;
}
function normalizeClass(u) {
	let _ = "";
	if (isString(u)) _ = u;
	else if (isArray(u)) for (let T = 0; T < u.length; T++) {
		let E = normalizeClass(u[T]);
		E && (_ += E + " ");
	}
	else if (isObject$2(u)) for (let T in u) u[T] && (_ += T + " ");
	return _.trim();
}
function normalizeProps(u) {
	if (!u) return null;
	let { class: _, style: T } = u;
	return _ && !isString(_) && (u.class = normalizeClass(_)), T && (u.style = normalizeStyle(T)), u;
}
var specialBooleanAttrs = "itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly", isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
specialBooleanAttrs + "";
function includeBooleanAttr(u) {
	return !!u || u === "";
}
function looseCompareArrays(u, _) {
	if (u.length !== _.length) return !1;
	let T = !0;
	for (let E = 0; T && E < u.length; E++) T = looseEqual(u[E], _[E]);
	return T;
}
function looseEqual(u, _) {
	if (u === _) return !0;
	let T = isDate(u), E = isDate(_);
	if (T || E) return T && E ? u.getTime() === _.getTime() : !1;
	if (T = isSymbol(u), E = isSymbol(_), T || E) return u === _;
	if (T = isArray(u), E = isArray(_), T || E) return T && E ? looseCompareArrays(u, _) : !1;
	if (T = isObject$2(u), E = isObject$2(_), T || E) {
		if (!T || !E || Object.keys(u).length !== Object.keys(_).length) return !1;
		for (let T in u) {
			let E = u.hasOwnProperty(T), D = _.hasOwnProperty(T);
			if (E && !D || !E && D || !looseEqual(u[T], _[T])) return !1;
		}
	}
	return String(u) === String(_);
}
function looseIndexOf(u, _) {
	return u.findIndex((u) => looseEqual(u, _));
}
var isRef$1 = (u) => !!(u && u.__v_isRef === !0), toDisplayString = (u) => isString(u) ? u : u == null ? "" : isArray(u) || isObject$2(u) && (u.toString === objectToString || !isFunction(u.toString)) ? isRef$1(u) ? toDisplayString(u.value) : JSON.stringify(u, replacer, 2) : String(u), replacer = (u, _) => isRef$1(_) ? replacer(u, _.value) : isMap(_) ? { [`Map(${_.size})`]: [..._.entries()].reduce((u, [_, T], E) => (u[stringifySymbol(_, E) + " =>"] = T, u), {}) } : isSet(_) ? { [`Set(${_.size})`]: [..._.values()].map((u) => stringifySymbol(u)) } : isSymbol(_) ? stringifySymbol(_) : isObject$2(_) && !isArray(_) && !isPlainObject$1(_) ? String(_) : _, stringifySymbol = (u, _ = "") => isSymbol(u) ? `Symbol(${u.description ?? _})` : u;
function normalizeCssVarValue(u) {
	return u == null ? "initial" : typeof u == "string" ? u === "" ? " " : u : String(u);
}
var activeEffectScope, EffectScope = class {
	constructor(u = !1) {
		this.detached = u, this._active = !0, this._on = 0, this.effects = [], this.cleanups = [], this._isPaused = !1, this.parent = activeEffectScope, !u && activeEffectScope && (this.index = (activeEffectScope.scopes ||= []).push(this) - 1);
	}
	get active() {
		return this._active;
	}
	pause() {
		if (this._active) {
			this._isPaused = !0;
			let u, _;
			if (this.scopes) for (u = 0, _ = this.scopes.length; u < _; u++) this.scopes[u].pause();
			for (u = 0, _ = this.effects.length; u < _; u++) this.effects[u].pause();
		}
	}
	resume() {
		if (this._active && this._isPaused) {
			this._isPaused = !1;
			let u, _;
			if (this.scopes) for (u = 0, _ = this.scopes.length; u < _; u++) this.scopes[u].resume();
			for (u = 0, _ = this.effects.length; u < _; u++) this.effects[u].resume();
		}
	}
	run(u) {
		if (this._active) {
			let _ = activeEffectScope;
			try {
				return activeEffectScope = this, u();
			} finally {
				activeEffectScope = _;
			}
		}
	}
	on() {
		++this._on === 1 && (this.prevScope = activeEffectScope, activeEffectScope = this);
	}
	off() {
		this._on > 0 && --this._on === 0 && (activeEffectScope = this.prevScope, this.prevScope = void 0);
	}
	stop(u) {
		if (this._active) {
			this._active = !1;
			let _, T;
			for (_ = 0, T = this.effects.length; _ < T; _++) this.effects[_].stop();
			for (this.effects.length = 0, _ = 0, T = this.cleanups.length; _ < T; _++) this.cleanups[_]();
			if (this.cleanups.length = 0, this.scopes) {
				for (_ = 0, T = this.scopes.length; _ < T; _++) this.scopes[_].stop(!0);
				this.scopes.length = 0;
			}
			if (!this.detached && this.parent && !u) {
				let u = this.parent.scopes.pop();
				u && u !== this && (this.parent.scopes[this.index] = u, u.index = this.index);
			}
			this.parent = void 0;
		}
	}
};
function effectScope(u) {
	return new EffectScope(u);
}
function getCurrentScope() {
	return activeEffectScope;
}
function onScopeDispose(u, _ = !1) {
	activeEffectScope && activeEffectScope.cleanups.push(u);
}
var activeSub, pausedQueueEffects = /* @__PURE__ */ new WeakSet(), ReactiveEffect = class {
	constructor(u) {
		this.fn = u, this.deps = void 0, this.depsTail = void 0, this.flags = 5, this.next = void 0, this.cleanup = void 0, this.scheduler = void 0, activeEffectScope && activeEffectScope.active && activeEffectScope.effects.push(this);
	}
	pause() {
		this.flags |= 64;
	}
	resume() {
		this.flags & 64 && (this.flags &= -65, pausedQueueEffects.has(this) && (pausedQueueEffects.delete(this), this.trigger()));
	}
	notify() {
		this.flags & 2 && !(this.flags & 32) || this.flags & 8 || batch(this);
	}
	run() {
		if (!(this.flags & 1)) return this.fn();
		this.flags |= 2, cleanupEffect(this), prepareDeps(this);
		let u = activeSub, _ = shouldTrack;
		activeSub = this, shouldTrack = !0;
		try {
			return this.fn();
		} finally {
			cleanupDeps(this), activeSub = u, shouldTrack = _, this.flags &= -3;
		}
	}
	stop() {
		if (this.flags & 1) {
			for (let u = this.deps; u; u = u.nextDep) removeSub(u);
			this.deps = this.depsTail = void 0, cleanupEffect(this), this.onStop && this.onStop(), this.flags &= -2;
		}
	}
	trigger() {
		this.flags & 64 ? pausedQueueEffects.add(this) : this.scheduler ? this.scheduler() : this.runIfDirty();
	}
	runIfDirty() {
		isDirty(this) && this.run();
	}
	get dirty() {
		return isDirty(this);
	}
}, batchDepth = 0, batchedSub, batchedComputed;
function batch(u, _ = !1) {
	if (u.flags |= 8, _) {
		u.next = batchedComputed, batchedComputed = u;
		return;
	}
	u.next = batchedSub, batchedSub = u;
}
function startBatch() {
	batchDepth++;
}
function endBatch() {
	if (--batchDepth > 0) return;
	if (batchedComputed) {
		let u = batchedComputed;
		for (batchedComputed = void 0; u;) {
			let _ = u.next;
			u.next = void 0, u.flags &= -9, u = _;
		}
	}
	let u;
	for (; batchedSub;) {
		let _ = batchedSub;
		for (batchedSub = void 0; _;) {
			let T = _.next;
			if (_.next = void 0, _.flags &= -9, _.flags & 1) try {
				_.trigger();
			} catch (_) {
				u ||= _;
			}
			_ = T;
		}
	}
	if (u) throw u;
}
function prepareDeps(u) {
	for (let _ = u.deps; _; _ = _.nextDep) _.version = -1, _.prevActiveLink = _.dep.activeLink, _.dep.activeLink = _;
}
function cleanupDeps(u) {
	let _, T = u.depsTail, E = T;
	for (; E;) {
		let u = E.prevDep;
		E.version === -1 ? (E === T && (T = u), removeSub(E), removeDep(E)) : _ = E, E.dep.activeLink = E.prevActiveLink, E.prevActiveLink = void 0, E = u;
	}
	u.deps = _, u.depsTail = T;
}
function isDirty(u) {
	for (let _ = u.deps; _; _ = _.nextDep) if (_.dep.version !== _.version || _.dep.computed && (refreshComputed(_.dep.computed) || _.dep.version !== _.version)) return !0;
	return !!u._dirty;
}
function refreshComputed(u) {
	if (u.flags & 4 && !(u.flags & 16) || (u.flags &= -17, u.globalVersion === globalVersion) || (u.globalVersion = globalVersion, !u.isSSR && u.flags & 128 && (!u.deps && !u._dirty || !isDirty(u)))) return;
	u.flags |= 2;
	let _ = u.dep, T = activeSub, E = shouldTrack;
	activeSub = u, shouldTrack = !0;
	try {
		prepareDeps(u);
		let T = u.fn(u._value);
		(_.version === 0 || hasChanged(T, u._value)) && (u.flags |= 128, u._value = T, _.version++);
	} catch (u) {
		throw _.version++, u;
	} finally {
		activeSub = T, shouldTrack = E, cleanupDeps(u), u.flags &= -3;
	}
}
function removeSub(u, _ = !1) {
	let { dep: T, prevSub: E, nextSub: D } = u;
	if (E && (E.nextSub = D, u.prevSub = void 0), D && (D.prevSub = E, u.nextSub = void 0), T.subs === u && (T.subs = E, !E && T.computed)) {
		T.computed.flags &= -5;
		for (let u = T.computed.deps; u; u = u.nextDep) removeSub(u, !0);
	}
	!_ && !--T.sc && T.map && T.map.delete(T.key);
}
function removeDep(u) {
	let { prevDep: _, nextDep: T } = u;
	_ && (_.nextDep = T, u.prevDep = void 0), T && (T.prevDep = _, u.nextDep = void 0);
}
function effect(u, _) {
	u.effect instanceof ReactiveEffect && (u = u.effect.fn);
	let T = new ReactiveEffect(u);
	_ && extend(T, _);
	try {
		T.run();
	} catch (u) {
		throw T.stop(), u;
	}
	let E = T.run.bind(T);
	return E.effect = T, E;
}
function stop(u) {
	u.effect.stop();
}
var shouldTrack = !0, trackStack = [];
function pauseTracking() {
	trackStack.push(shouldTrack), shouldTrack = !1;
}
function resetTracking() {
	let u = trackStack.pop();
	shouldTrack = u === void 0 ? !0 : u;
}
function cleanupEffect(u) {
	let { cleanup: _ } = u;
	if (u.cleanup = void 0, _) {
		let u = activeSub;
		activeSub = void 0;
		try {
			_();
		} finally {
			activeSub = u;
		}
	}
}
var globalVersion = 0, Link = class {
	constructor(u, _) {
		this.sub = u, this.dep = _, this.version = _.version, this.nextDep = this.prevDep = this.nextSub = this.prevSub = this.prevActiveLink = void 0;
	}
}, Dep = class {
	constructor(u) {
		this.computed = u, this.version = 0, this.activeLink = void 0, this.subs = void 0, this.map = void 0, this.key = void 0, this.sc = 0, this.__v_skip = !0;
	}
	track(u) {
		if (!activeSub || !shouldTrack || activeSub === this.computed) return;
		let _ = this.activeLink;
		if (_ === void 0 || _.sub !== activeSub) _ = this.activeLink = new Link(activeSub, this), activeSub.deps ? (_.prevDep = activeSub.depsTail, activeSub.depsTail.nextDep = _, activeSub.depsTail = _) : activeSub.deps = activeSub.depsTail = _, addSub(_);
		else if (_.version === -1 && (_.version = this.version, _.nextDep)) {
			let u = _.nextDep;
			u.prevDep = _.prevDep, _.prevDep && (_.prevDep.nextDep = u), _.prevDep = activeSub.depsTail, _.nextDep = void 0, activeSub.depsTail.nextDep = _, activeSub.depsTail = _, activeSub.deps === _ && (activeSub.deps = u);
		}
		return _;
	}
	trigger(u) {
		this.version++, globalVersion++, this.notify(u);
	}
	notify(u) {
		startBatch();
		try {
			for (let u = this.subs; u; u = u.prevSub) u.sub.notify() && u.sub.dep.notify();
		} finally {
			endBatch();
		}
	}
};
function addSub(u) {
	if (u.dep.sc++, u.sub.flags & 4) {
		let _ = u.dep.computed;
		if (_ && !u.dep.subs) {
			_.flags |= 20;
			for (let u = _.deps; u; u = u.nextDep) addSub(u);
		}
		let T = u.dep.subs;
		T !== u && (u.prevSub = T, T && (T.nextSub = u)), u.dep.subs = u;
	}
}
var targetMap = /* @__PURE__ */ new WeakMap(), ITERATE_KEY = Symbol(""), MAP_KEY_ITERATE_KEY = Symbol(""), ARRAY_ITERATE_KEY = Symbol("");
function track(u, _, T) {
	if (shouldTrack && activeSub) {
		let _ = targetMap.get(u);
		_ || targetMap.set(u, _ = /* @__PURE__ */ new Map());
		let E = _.get(T);
		E || (_.set(T, E = new Dep()), E.map = _, E.key = T), E.track();
	}
}
function trigger(u, _, T, E, D, O) {
	let A = targetMap.get(u);
	if (!A) {
		globalVersion++;
		return;
	}
	let j = (u) => {
		u && u.trigger();
	};
	if (startBatch(), _ === "clear") A.forEach(j);
	else {
		let D = isArray(u), O = D && isIntegerKey(T);
		if (D && T === "length") {
			let u = Number(E);
			A.forEach((_, T) => {
				(T === "length" || T === ARRAY_ITERATE_KEY || !isSymbol(T) && T >= u) && j(_);
			});
		} else switch ((T !== void 0 || A.has(void 0)) && j(A.get(T)), O && j(A.get(ARRAY_ITERATE_KEY)), _) {
			case "add":
				D ? O && j(A.get("length")) : (j(A.get(ITERATE_KEY)), isMap(u) && j(A.get(MAP_KEY_ITERATE_KEY)));
				break;
			case "delete":
				D || (j(A.get(ITERATE_KEY)), isMap(u) && j(A.get(MAP_KEY_ITERATE_KEY)));
				break;
			case "set":
				isMap(u) && j(A.get(ITERATE_KEY));
				break;
		}
	}
	endBatch();
}
function getDepFromReactive(u, _) {
	let T = targetMap.get(u);
	return T && T.get(_);
}
function reactiveReadArray(u) {
	let _ = toRaw(u);
	return _ === u ? _ : (track(_, "iterate", ARRAY_ITERATE_KEY), isShallow(u) ? _ : _.map(toReactive));
}
function shallowReadArray(u) {
	return track(u = toRaw(u), "iterate", ARRAY_ITERATE_KEY), u;
}
var arrayInstrumentations = {
	__proto__: null,
	[Symbol.iterator]() {
		return iterator(this, Symbol.iterator, toReactive);
	},
	concat(...u) {
		return reactiveReadArray(this).concat(...u.map((u) => isArray(u) ? reactiveReadArray(u) : u));
	},
	entries() {
		return iterator(this, "entries", (u) => (u[1] = toReactive(u[1]), u));
	},
	every(u, _) {
		return apply(this, "every", u, _, void 0, arguments);
	},
	filter(u, _) {
		return apply(this, "filter", u, _, (u) => u.map(toReactive), arguments);
	},
	find(u, _) {
		return apply(this, "find", u, _, toReactive, arguments);
	},
	findIndex(u, _) {
		return apply(this, "findIndex", u, _, void 0, arguments);
	},
	findLast(u, _) {
		return apply(this, "findLast", u, _, toReactive, arguments);
	},
	findLastIndex(u, _) {
		return apply(this, "findLastIndex", u, _, void 0, arguments);
	},
	forEach(u, _) {
		return apply(this, "forEach", u, _, void 0, arguments);
	},
	includes(...u) {
		return searchProxy(this, "includes", u);
	},
	indexOf(...u) {
		return searchProxy(this, "indexOf", u);
	},
	join(u) {
		return reactiveReadArray(this).join(u);
	},
	lastIndexOf(...u) {
		return searchProxy(this, "lastIndexOf", u);
	},
	map(u, _) {
		return apply(this, "map", u, _, void 0, arguments);
	},
	pop() {
		return noTracking(this, "pop");
	},
	push(...u) {
		return noTracking(this, "push", u);
	},
	reduce(u, ..._) {
		return reduce(this, "reduce", u, _);
	},
	reduceRight(u, ..._) {
		return reduce(this, "reduceRight", u, _);
	},
	shift() {
		return noTracking(this, "shift");
	},
	some(u, _) {
		return apply(this, "some", u, _, void 0, arguments);
	},
	splice(...u) {
		return noTracking(this, "splice", u);
	},
	toReversed() {
		return reactiveReadArray(this).toReversed();
	},
	toSorted(u) {
		return reactiveReadArray(this).toSorted(u);
	},
	toSpliced(...u) {
		return reactiveReadArray(this).toSpliced(...u);
	},
	unshift(...u) {
		return noTracking(this, "unshift", u);
	},
	values() {
		return iterator(this, "values", toReactive);
	}
};
function iterator(u, _, T) {
	let E = shallowReadArray(u), D = E[_]();
	return E !== u && !isShallow(u) && (D._next = D.next, D.next = () => {
		let u = D._next();
		return u.done || (u.value = T(u.value)), u;
	}), D;
}
var arrayProto = Array.prototype;
function apply(u, _, T, E, D, O) {
	let A = shallowReadArray(u), j = A !== u && !isShallow(u), M = A[_];
	if (M !== arrayProto[_]) {
		let _ = M.apply(u, O);
		return j ? toReactive(_) : _;
	}
	let P = T;
	A !== u && (j ? P = function(_, E) {
		return T.call(this, toReactive(_), E, u);
	} : T.length > 2 && (P = function(_, E) {
		return T.call(this, _, E, u);
	}));
	let F = M.call(A, P, E);
	return j && D ? D(F) : F;
}
function reduce(u, _, T, E) {
	let D = shallowReadArray(u), O = T;
	return D !== u && (isShallow(u) ? T.length > 3 && (O = function(_, E, D) {
		return T.call(this, _, E, D, u);
	}) : O = function(_, E, D) {
		return T.call(this, _, toReactive(E), D, u);
	}), D[_](O, ...E);
}
function searchProxy(u, _, T) {
	let E = toRaw(u);
	track(E, "iterate", ARRAY_ITERATE_KEY);
	let D = E[_](...T);
	return (D === -1 || D === !1) && isProxy(T[0]) ? (T[0] = toRaw(T[0]), E[_](...T)) : D;
}
function noTracking(u, _, T = []) {
	pauseTracking(), startBatch();
	let E = toRaw(u)[_].apply(u, T);
	return endBatch(), resetTracking(), E;
}
var isNonTrackableKeys = /* @__PURE__ */ makeMap("__proto__,__v_isRef,__isVue"), builtInSymbols = new Set(/* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((u) => u !== "arguments" && u !== "caller").map((u) => Symbol[u]).filter(isSymbol));
function hasOwnProperty(u) {
	isSymbol(u) || (u = String(u));
	let _ = toRaw(this);
	return track(_, "has", u), _.hasOwnProperty(u);
}
var BaseReactiveHandler = class {
	constructor(u = !1, _ = !1) {
		this._isReadonly = u, this._isShallow = _;
	}
	get(u, _, T) {
		if (_ === "__v_skip") return u.__v_skip;
		let E = this._isReadonly, D = this._isShallow;
		if (_ === "__v_isReactive") return !E;
		if (_ === "__v_isReadonly") return E;
		if (_ === "__v_isShallow") return D;
		if (_ === "__v_raw") return T === (E ? D ? shallowReadonlyMap : readonlyMap : D ? shallowReactiveMap : reactiveMap).get(u) || Object.getPrototypeOf(u) === Object.getPrototypeOf(T) ? u : void 0;
		let O = isArray(u);
		if (!E) {
			let u;
			if (O && (u = arrayInstrumentations[_])) return u;
			if (_ === "hasOwnProperty") return hasOwnProperty;
		}
		let A = Reflect.get(u, _, isRef(u) ? u : T);
		if ((isSymbol(_) ? builtInSymbols.has(_) : isNonTrackableKeys(_)) || (E || track(u, "get", _), D)) return A;
		if (isRef(A)) {
			let u = O && isIntegerKey(_) ? A : A.value;
			return E && isObject$2(u) ? readonly(u) : u;
		}
		return isObject$2(A) ? E ? readonly(A) : reactive(A) : A;
	}
}, MutableReactiveHandler = class extends BaseReactiveHandler {
	constructor(u = !1) {
		super(!1, u);
	}
	set(u, _, T, E) {
		let D = u[_];
		if (!this._isShallow) {
			let _ = isReadonly(D);
			if (!isShallow(T) && !isReadonly(T) && (D = toRaw(D), T = toRaw(T)), !isArray(u) && isRef(D) && !isRef(T)) return _ || (D.value = T), !0;
		}
		let O = isArray(u) && isIntegerKey(_) ? Number(_) < u.length : hasOwn$2(u, _), A = Reflect.set(u, _, T, isRef(u) ? u : E);
		return u === toRaw(E) && (O ? hasChanged(T, D) && trigger(u, "set", _, T, D) : trigger(u, "add", _, T)), A;
	}
	deleteProperty(u, _) {
		let T = hasOwn$2(u, _), E = u[_], D = Reflect.deleteProperty(u, _);
		return D && T && trigger(u, "delete", _, void 0, E), D;
	}
	has(u, _) {
		let T = Reflect.has(u, _);
		return (!isSymbol(_) || !builtInSymbols.has(_)) && track(u, "has", _), T;
	}
	ownKeys(u) {
		return track(u, "iterate", isArray(u) ? "length" : ITERATE_KEY), Reflect.ownKeys(u);
	}
}, ReadonlyReactiveHandler = class extends BaseReactiveHandler {
	constructor(u = !1) {
		super(!0, u);
	}
	set(u, _) {
		return !0;
	}
	deleteProperty(u, _) {
		return !0;
	}
}, mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler(), readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(), shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(!0), shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(!0), toShallow = (u) => u, getProto = (u) => Reflect.getPrototypeOf(u);
function createIterableMethod(u, _, T) {
	return function(...E) {
		let D = this.__v_raw, O = toRaw(D), A = isMap(O), j = u === "entries" || u === Symbol.iterator && A, M = u === "keys" && A, P = D[u](...E), F = T ? toShallow : _ ? toReadonly : toReactive;
		return !_ && track(O, "iterate", M ? MAP_KEY_ITERATE_KEY : ITERATE_KEY), {
			next() {
				let { value: u, done: _ } = P.next();
				return _ ? {
					value: u,
					done: _
				} : {
					value: j ? [F(u[0]), F(u[1])] : F(u),
					done: _
				};
			},
			[Symbol.iterator]() {
				return this;
			}
		};
	};
}
function createReadonlyMethod(u) {
	return function(..._) {
		return u === "delete" ? !1 : u === "clear" ? void 0 : this;
	};
}
function createInstrumentations(u, _) {
	let T = {
		get(T) {
			let E = this.__v_raw, D = toRaw(E), O = toRaw(T);
			u || (hasChanged(T, O) && track(D, "get", T), track(D, "get", O));
			let { has: A } = getProto(D), j = _ ? toShallow : u ? toReadonly : toReactive;
			if (A.call(D, T)) return j(E.get(T));
			if (A.call(D, O)) return j(E.get(O));
			E !== D && E.get(T);
		},
		get size() {
			let _ = this.__v_raw;
			return !u && track(toRaw(_), "iterate", ITERATE_KEY), _.size;
		},
		has(_) {
			let T = this.__v_raw, E = toRaw(T), D = toRaw(_);
			return u || (hasChanged(_, D) && track(E, "has", _), track(E, "has", D)), _ === D ? T.has(_) : T.has(_) || T.has(D);
		},
		forEach(T, E) {
			let D = this, O = D.__v_raw, A = toRaw(O), j = _ ? toShallow : u ? toReadonly : toReactive;
			return !u && track(A, "iterate", ITERATE_KEY), O.forEach((u, _) => T.call(E, j(u), j(_), D));
		}
	};
	return extend(T, u ? {
		add: createReadonlyMethod("add"),
		set: createReadonlyMethod("set"),
		delete: createReadonlyMethod("delete"),
		clear: createReadonlyMethod("clear")
	} : {
		add(u) {
			!_ && !isShallow(u) && !isReadonly(u) && (u = toRaw(u));
			let T = toRaw(this);
			return getProto(T).has.call(T, u) || (T.add(u), trigger(T, "add", u, u)), this;
		},
		set(u, T) {
			!_ && !isShallow(T) && !isReadonly(T) && (T = toRaw(T));
			let E = toRaw(this), { has: D, get: O } = getProto(E), A = D.call(E, u);
			A ||= (u = toRaw(u), D.call(E, u));
			let j = O.call(E, u);
			return E.set(u, T), A ? hasChanged(T, j) && trigger(E, "set", u, T, j) : trigger(E, "add", u, T), this;
		},
		delete(u) {
			let _ = toRaw(this), { has: T, get: E } = getProto(_), D = T.call(_, u);
			D ||= (u = toRaw(u), T.call(_, u));
			let O = E ? E.call(_, u) : void 0, A = _.delete(u);
			return D && trigger(_, "delete", u, void 0, O), A;
		},
		clear() {
			let u = toRaw(this), _ = u.size !== 0, T = u.clear();
			return _ && trigger(u, "clear", void 0, void 0, void 0), T;
		}
	}), [
		"keys",
		"values",
		"entries",
		Symbol.iterator
	].forEach((E) => {
		T[E] = createIterableMethod(E, u, _);
	}), T;
}
function createInstrumentationGetter(u, _) {
	let T = createInstrumentations(u, _);
	return (_, E, D) => E === "__v_isReactive" ? !u : E === "__v_isReadonly" ? u : E === "__v_raw" ? _ : Reflect.get(hasOwn$2(T, E) && E in _ ? T : _, E, D);
}
var mutableCollectionHandlers = { get: /* @__PURE__ */ createInstrumentationGetter(!1, !1) }, shallowCollectionHandlers = { get: /* @__PURE__ */ createInstrumentationGetter(!1, !0) }, readonlyCollectionHandlers = { get: /* @__PURE__ */ createInstrumentationGetter(!0, !1) }, shallowReadonlyCollectionHandlers = { get: /* @__PURE__ */ createInstrumentationGetter(!0, !0) }, reactiveMap = /* @__PURE__ */ new WeakMap(), shallowReactiveMap = /* @__PURE__ */ new WeakMap(), readonlyMap = /* @__PURE__ */ new WeakMap(), shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(u) {
	switch (u) {
		case "Object":
		case "Array": return 1;
		case "Map":
		case "Set":
		case "WeakMap":
		case "WeakSet": return 2;
		default: return 0;
	}
}
function getTargetType(u) {
	return u.__v_skip || !Object.isExtensible(u) ? 0 : targetTypeMap(toRawType(u));
}
function reactive(u) {
	return isReadonly(u) ? u : createReactiveObject(u, !1, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(u) {
	return createReactiveObject(u, !1, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(u) {
	return createReactiveObject(u, !0, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function shallowReadonly(u) {
	return createReactiveObject(u, !0, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(u, _, T, E, D) {
	if (!isObject$2(u) || u.__v_raw && !(_ && u.__v_isReactive)) return u;
	let O = getTargetType(u);
	if (O === 0) return u;
	let A = D.get(u);
	if (A) return A;
	let j = new Proxy(u, O === 2 ? E : T);
	return D.set(u, j), j;
}
function isReactive(u) {
	return isReadonly(u) ? isReactive(u.__v_raw) : !!(u && u.__v_isReactive);
}
function isReadonly(u) {
	return !!(u && u.__v_isReadonly);
}
function isShallow(u) {
	return !!(u && u.__v_isShallow);
}
function isProxy(u) {
	return u ? !!u.__v_raw : !1;
}
function toRaw(u) {
	let _ = u && u.__v_raw;
	return _ ? toRaw(_) : u;
}
function markRaw(u) {
	return !hasOwn$2(u, "__v_skip") && Object.isExtensible(u) && def(u, "__v_skip", !0), u;
}
var toReactive = (u) => isObject$2(u) ? reactive(u) : u, toReadonly = (u) => isObject$2(u) ? readonly(u) : u;
function isRef(u) {
	return u ? u.__v_isRef === !0 : !1;
}
function ref(u) {
	return createRef$2(u, !1);
}
function shallowRef(u) {
	return createRef$2(u, !0);
}
function createRef$2(u, _) {
	return isRef(u) ? u : new RefImpl(u, _);
}
var RefImpl = class {
	constructor(u, _) {
		this.dep = new Dep(), this.__v_isRef = !0, this.__v_isShallow = !1, this._rawValue = _ ? u : toRaw(u), this._value = _ ? u : toReactive(u), this.__v_isShallow = _;
	}
	get value() {
		return this.dep.track(), this._value;
	}
	set value(u) {
		let _ = this._rawValue, T = this.__v_isShallow || isShallow(u) || isReadonly(u);
		u = T ? u : toRaw(u), hasChanged(u, _) && (this._rawValue = u, this._value = T ? u : toReactive(u), this.dep.trigger());
	}
};
function triggerRef(u) {
	u.dep && u.dep.trigger();
}
function unref(u) {
	return isRef(u) ? u.value : u;
}
function toValue(u) {
	return isFunction(u) ? u() : unref(u);
}
var shallowUnwrapHandlers = {
	get: (u, _, T) => _ === "__v_raw" ? u : unref(Reflect.get(u, _, T)),
	set: (u, _, T, E) => {
		let D = u[_];
		return isRef(D) && !isRef(T) ? (D.value = T, !0) : Reflect.set(u, _, T, E);
	}
};
function proxyRefs(u) {
	return isReactive(u) ? u : new Proxy(u, shallowUnwrapHandlers);
}
var CustomRefImpl = class {
	constructor(u) {
		this.__v_isRef = !0, this._value = void 0;
		let _ = this.dep = new Dep(), { get: T, set: E } = u(_.track.bind(_), _.trigger.bind(_));
		this._get = T, this._set = E;
	}
	get value() {
		return this._value = this._get();
	}
	set value(u) {
		this._set(u);
	}
};
function customRef(u) {
	return new CustomRefImpl(u);
}
function toRefs(u) {
	let _ = isArray(u) ? Array(u.length) : {};
	for (let T in u) _[T] = propertyToRef(u, T);
	return _;
}
var ObjectRefImpl = class {
	constructor(u, _, T) {
		this._object = u, this._key = _, this._defaultValue = T, this.__v_isRef = !0, this._value = void 0;
	}
	get value() {
		let u = this._object[this._key];
		return this._value = u === void 0 ? this._defaultValue : u;
	}
	set value(u) {
		this._object[this._key] = u;
	}
	get dep() {
		return getDepFromReactive(toRaw(this._object), this._key);
	}
}, GetterRefImpl = class {
	constructor(u) {
		this._getter = u, this.__v_isRef = !0, this.__v_isReadonly = !0, this._value = void 0;
	}
	get value() {
		return this._value = this._getter();
	}
};
function toRef(u, _, T) {
	return isRef(u) ? u : isFunction(u) ? new GetterRefImpl(u) : isObject$2(u) && arguments.length > 1 ? propertyToRef(u, _, T) : ref(u);
}
function propertyToRef(u, _, T) {
	let E = u[_];
	return isRef(E) ? E : new ObjectRefImpl(u, _, T);
}
var ComputedRefImpl = class {
	constructor(u, _, T) {
		this.fn = u, this.setter = _, this._value = void 0, this.dep = new Dep(this), this.__v_isRef = !0, this.deps = void 0, this.depsTail = void 0, this.flags = 16, this.globalVersion = globalVersion - 1, this.next = void 0, this.effect = this, this.__v_isReadonly = !_, this.isSSR = T;
	}
	notify() {
		if (this.flags |= 16, !(this.flags & 8) && activeSub !== this) return batch(this, !0), !0;
	}
	get value() {
		let u = this.dep.track();
		return refreshComputed(this), u && (u.version = this.dep.version), this._value;
	}
	set value(u) {
		this.setter && this.setter(u);
	}
};
function computed$1(u, _, T = !1) {
	let E, D;
	return isFunction(u) ? E = u : (E = u.get, D = u.set), new ComputedRefImpl(E, D, T);
}
var TrackOpTypes = {
	GET: "get",
	HAS: "has",
	ITERATE: "iterate"
}, TriggerOpTypes = {
	SET: "set",
	ADD: "add",
	DELETE: "delete",
	CLEAR: "clear"
}, INITIAL_WATCHER_VALUE = {}, cleanupMap = /* @__PURE__ */ new WeakMap(), activeWatcher = void 0;
function getCurrentWatcher() {
	return activeWatcher;
}
function onWatcherCleanup(u, _ = !1, T = activeWatcher) {
	if (T) {
		let _ = cleanupMap.get(T);
		_ || cleanupMap.set(T, _ = []), _.push(u);
	}
}
function watch$1(u, _, T = EMPTY_OBJ) {
	let { immediate: D, deep: A, once: j, scheduler: M, augmentJob: P, call: I } = T, L = (u) => A ? u : isShallow(u) || A === !1 || A === 0 ? traverse(u, 1) : traverse(u), z, B, V, H, U = !1, G = !1;
	if (isRef(u) ? (B = () => u.value, U = isShallow(u)) : isReactive(u) ? (B = () => L(u), U = !0) : isArray(u) ? (G = !0, U = u.some((u) => isReactive(u) || isShallow(u)), B = () => u.map((u) => {
		if (isRef(u)) return u.value;
		if (isReactive(u)) return L(u);
		if (isFunction(u)) return I ? I(u, 2) : u();
	})) : B = isFunction(u) ? _ ? I ? () => I(u, 2) : u : () => {
		if (V) {
			pauseTracking();
			try {
				V();
			} finally {
				resetTracking();
			}
		}
		let _ = activeWatcher;
		activeWatcher = z;
		try {
			return I ? I(u, 3, [H]) : u(H);
		} finally {
			activeWatcher = _;
		}
	} : NOOP, _ && A) {
		let u = B, _ = A === !0 ? Infinity : A;
		B = () => traverse(u(), _);
	}
	let K = getCurrentScope(), Qd = () => {
		z.stop(), K && K.active && remove(K.effects, z);
	};
	if (j && _) {
		let u = _;
		_ = (..._) => {
			u(..._), Qd();
		};
	}
	let $d = G ? Array(u.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE, ef = (u) => {
		if (!(!(z.flags & 1) || !z.dirty && !u)) if (_) {
			let u = z.run();
			if (A || U || (G ? u.some((u, _) => hasChanged(u, $d[_])) : hasChanged(u, $d))) {
				V && V();
				let T = activeWatcher;
				activeWatcher = z;
				try {
					let T = [
						u,
						$d === INITIAL_WATCHER_VALUE ? void 0 : G && $d[0] === INITIAL_WATCHER_VALUE ? [] : $d,
						H
					];
					$d = u, I ? I(_, 3, T) : _(...T);
				} finally {
					activeWatcher = T;
				}
			}
		} else z.run();
	};
	return P && P(ef), z = new ReactiveEffect(B), z.scheduler = M ? () => M(ef, !1) : ef, H = (u) => onWatcherCleanup(u, !1, z), V = z.onStop = () => {
		let u = cleanupMap.get(z);
		if (u) {
			if (I) I(u, 4);
			else for (let _ of u) _();
			cleanupMap.delete(z);
		}
	}, _ ? D ? ef(!0) : $d = z.run() : M ? M(ef.bind(null, !0), !0) : z.run(), Qd.pause = z.pause.bind(z), Qd.resume = z.resume.bind(z), Qd.stop = Qd, Qd;
}
function traverse(u, _ = Infinity, T) {
	if (_ <= 0 || !isObject$2(u) || u.__v_skip || (T ||= /* @__PURE__ */ new Map(), (T.get(u) || 0) >= _)) return u;
	if (T.set(u, _), _--, isRef(u)) traverse(u.value, _, T);
	else if (isArray(u)) for (let E = 0; E < u.length; E++) traverse(u[E], _, T);
	else if (isSet(u) || isMap(u)) u.forEach((u) => {
		traverse(u, _, T);
	});
	else if (isPlainObject$1(u)) {
		for (let E in u) traverse(u[E], _, T);
		for (let E of Object.getOwnPropertySymbols(u)) Object.prototype.propertyIsEnumerable.call(u, E) && traverse(u[E], _, T);
	}
	return u;
}
var stack = [];
function pushWarningContext(u) {
	stack.push(u);
}
function popWarningContext() {
	stack.pop();
}
function assertNumber(u, _) {}
var ErrorCodes = {
	SETUP_FUNCTION: 0,
	0: "SETUP_FUNCTION",
	RENDER_FUNCTION: 1,
	1: "RENDER_FUNCTION",
	NATIVE_EVENT_HANDLER: 5,
	5: "NATIVE_EVENT_HANDLER",
	COMPONENT_EVENT_HANDLER: 6,
	6: "COMPONENT_EVENT_HANDLER",
	VNODE_HOOK: 7,
	7: "VNODE_HOOK",
	DIRECTIVE_HOOK: 8,
	8: "DIRECTIVE_HOOK",
	TRANSITION_HOOK: 9,
	9: "TRANSITION_HOOK",
	APP_ERROR_HANDLER: 10,
	10: "APP_ERROR_HANDLER",
	APP_WARN_HANDLER: 11,
	11: "APP_WARN_HANDLER",
	FUNCTION_REF: 12,
	12: "FUNCTION_REF",
	ASYNC_COMPONENT_LOADER: 13,
	13: "ASYNC_COMPONENT_LOADER",
	SCHEDULER: 14,
	14: "SCHEDULER",
	COMPONENT_UPDATE: 15,
	15: "COMPONENT_UPDATE",
	APP_UNMOUNT_CLEANUP: 16,
	16: "APP_UNMOUNT_CLEANUP"
}, ErrorTypeStrings$1 = {
	sp: "serverPrefetch hook",
	bc: "beforeCreate hook",
	c: "created hook",
	bm: "beforeMount hook",
	m: "mounted hook",
	bu: "beforeUpdate hook",
	u: "updated",
	bum: "beforeUnmount hook",
	um: "unmounted hook",
	a: "activated hook",
	da: "deactivated hook",
	ec: "errorCaptured hook",
	rtc: "renderTracked hook",
	rtg: "renderTriggered hook",
	0: "setup function",
	1: "render function",
	2: "watcher getter",
	3: "watcher callback",
	4: "watcher cleanup function",
	5: "native event handler",
	6: "component event handler",
	7: "vnode hook",
	8: "directive hook",
	9: "transition hook",
	10: "app errorHandler",
	11: "app warnHandler",
	12: "ref function",
	13: "async component loader",
	14: "scheduler flush",
	15: "component update",
	16: "app unmount cleanup function"
};
function callWithErrorHandling(u, _, T, E) {
	try {
		return E ? u(...E) : u();
	} catch (u) {
		handleError(u, _, T);
	}
}
function callWithAsyncErrorHandling(u, _, T, E) {
	if (isFunction(u)) {
		let D = callWithErrorHandling(u, _, T, E);
		return D && isPromise(D) && D.catch((u) => {
			handleError(u, _, T);
		}), D;
	}
	if (isArray(u)) {
		let D = [];
		for (let O = 0; O < u.length; O++) D.push(callWithAsyncErrorHandling(u[O], _, T, E));
		return D;
	}
}
function handleError(u, _, T, D = !0) {
	let O = _ ? _.vnode : null, { errorHandler: A, throwUnhandledErrorInProduction: j } = _ && _.appContext.config || EMPTY_OBJ;
	if (_) {
		let E = _.parent, D = _.proxy, O = `https://vuejs.org/error-reference/#runtime-${T}`;
		for (; E;) {
			let _ = E.ec;
			if (_) {
				for (let T = 0; T < _.length; T++) if (_[T](u, D, O) === !1) return;
			}
			E = E.parent;
		}
		if (A) {
			pauseTracking(), callWithErrorHandling(A, null, 10, [
				u,
				D,
				O
			]), resetTracking();
			return;
		}
	}
	logError(u, T, O, D, j);
}
function logError(u, _, T, E = !0, D = !1) {
	if (D) throw u;
	console.error(u);
}
var queue = [], flushIndex = -1, pendingPostFlushCbs = [], activePostFlushCbs = null, postFlushIndex = 0, resolvedPromise = /* @__PURE__ */ Promise.resolve(), currentFlushPromise = null;
function nextTick(u) {
	let _ = currentFlushPromise || resolvedPromise;
	return u ? _.then(this ? u.bind(this) : u) : _;
}
function findInsertionIndex(u) {
	let _ = flushIndex + 1, T = queue.length;
	for (; _ < T;) {
		let E = _ + T >>> 1, D = queue[E], O = getId(D);
		O < u || O === u && D.flags & 2 ? _ = E + 1 : T = E;
	}
	return _;
}
function queueJob(u) {
	if (!(u.flags & 1)) {
		let _ = getId(u), T = queue[queue.length - 1];
		!T || !(u.flags & 2) && _ >= getId(T) ? queue.push(u) : queue.splice(findInsertionIndex(_), 0, u), u.flags |= 1, queueFlush();
	}
}
function queueFlush() {
	currentFlushPromise ||= resolvedPromise.then(flushJobs);
}
function queuePostFlushCb(u) {
	isArray(u) ? pendingPostFlushCbs.push(...u) : activePostFlushCbs && u.id === -1 ? activePostFlushCbs.splice(postFlushIndex + 1, 0, u) : u.flags & 1 || (pendingPostFlushCbs.push(u), u.flags |= 1), queueFlush();
}
function flushPreFlushCbs(u, _, T = flushIndex + 1) {
	for (; T < queue.length; T++) {
		let _ = queue[T];
		if (_ && _.flags & 2) {
			if (u && _.id !== u.uid) continue;
			queue.splice(T, 1), T--, _.flags & 4 && (_.flags &= -2), _(), _.flags & 4 || (_.flags &= -2);
		}
	}
}
function flushPostFlushCbs(u) {
	if (pendingPostFlushCbs.length) {
		let u = [...new Set(pendingPostFlushCbs)].sort((u, _) => getId(u) - getId(_));
		if (pendingPostFlushCbs.length = 0, activePostFlushCbs) {
			activePostFlushCbs.push(...u);
			return;
		}
		for (activePostFlushCbs = u, postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
			let u = activePostFlushCbs[postFlushIndex];
			u.flags & 4 && (u.flags &= -2), u.flags & 8 || u(), u.flags &= -2;
		}
		activePostFlushCbs = null, postFlushIndex = 0;
	}
}
var getId = (u) => u.id == null ? u.flags & 2 ? -1 : Infinity : u.id;
function flushJobs(u) {
	try {
		for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
			let u = queue[flushIndex];
			u && !(u.flags & 8) && (u.flags & 4 && (u.flags &= -2), callWithErrorHandling(u, u.i, u.i ? 15 : 14), u.flags & 4 || (u.flags &= -2));
		}
	} finally {
		for (; flushIndex < queue.length; flushIndex++) {
			let u = queue[flushIndex];
			u && (u.flags &= -2);
		}
		flushIndex = -1, queue.length = 0, flushPostFlushCbs(u), currentFlushPromise = null, (queue.length || pendingPostFlushCbs.length) && flushJobs(u);
	}
}
var devtools$1, buffer = [];
function setDevtoolsHook$1(u, _) {
	devtools$1 = u, devtools$1 ? (devtools$1.enabled = !0, buffer.forEach(({ event: u, args: _ }) => devtools$1.emit(u, ..._)), buffer = []) : typeof window < "u" && window.HTMLElement && !(window.navigator?.userAgent)?.includes("jsdom") ? ((_.__VUE_DEVTOOLS_HOOK_REPLAY__ = _.__VUE_DEVTOOLS_HOOK_REPLAY__ || []).push((u) => {
		setDevtoolsHook$1(u, _);
	}), setTimeout(() => {
		devtools$1 || (_.__VUE_DEVTOOLS_HOOK_REPLAY__ = null, buffer = []);
	}, 3e3)) : buffer = [];
}
var currentRenderingInstance = null, currentScopeId = null;
function setCurrentRenderingInstance(u) {
	let _ = currentRenderingInstance;
	return currentRenderingInstance = u, currentScopeId = u && u.type.__scopeId || null, _;
}
function pushScopeId(u) {
	currentScopeId = u;
}
function popScopeId() {
	currentScopeId = null;
}
var withScopeId = (u) => withCtx;
function withCtx(u, _ = currentRenderingInstance, T) {
	if (!_ || u._n) return u;
	let E = (...T) => {
		E._d && setBlockTracking(-1);
		let D = setCurrentRenderingInstance(_), O;
		try {
			O = u(...T);
		} finally {
			setCurrentRenderingInstance(D), E._d && setBlockTracking(1);
		}
		return O;
	};
	return E._n = !0, E._c = !0, E._d = !0, E;
}
function withDirectives(u, _) {
	if (currentRenderingInstance === null) return u;
	let T = getComponentPublicInstance(currentRenderingInstance), D = u.dirs ||= [];
	for (let u = 0; u < _.length; u++) {
		let [O, A, j, M = EMPTY_OBJ] = _[u];
		O && (isFunction(O) && (O = {
			mounted: O,
			updated: O
		}), O.deep && traverse(A), D.push({
			dir: O,
			instance: T,
			value: A,
			oldValue: void 0,
			arg: j,
			modifiers: M
		}));
	}
	return u;
}
function invokeDirectiveHook(u, _, T, E) {
	let D = u.dirs, O = _ && _.dirs;
	for (let A = 0; A < D.length; A++) {
		let j = D[A];
		O && (j.oldValue = O[A].value);
		let M = j.dir[E];
		M && (pauseTracking(), callWithAsyncErrorHandling(M, T, 8, [
			u.el,
			j,
			u,
			_
		]), resetTracking());
	}
}
var TeleportEndKey = Symbol("_vte"), isTeleport = (u) => u.__isTeleport, isTeleportDisabled = (u) => u && (u.disabled || u.disabled === ""), isTeleportDeferred = (u) => u && (u.defer || u.defer === ""), isTargetSVG = (u) => typeof SVGElement < "u" && u instanceof SVGElement, isTargetMathML = (u) => typeof MathMLElement == "function" && u instanceof MathMLElement, resolveTarget = (u, _) => {
	let T = u && u.to;
	return isString(T) ? _ ? _(T) : null : T;
}, TeleportImpl = {
	name: "Teleport",
	__isTeleport: !0,
	process(u, _, T, E, D, O, A, j, M, P) {
		let { mc: F, pc: I, pbc: L, o: { insert: R, querySelector: z, createText: B, createComment: V } } = P, H = isTeleportDisabled(_.props), { shapeFlag: Zd, children: U, dynamicChildren: G } = _;
		if (u == null) {
			let u = _.el = B(""), P = _.anchor = B("");
			R(u, T, E), R(P, T, E);
			let I = (u, _) => {
				Zd & 16 && F(U, u, _, D, O, A, j, M);
			}, L = () => {
				let u = _.target = resolveTarget(_.props, z), T = prepareAnchor(u, _, B, R);
				u && (A !== "svg" && isTargetSVG(u) ? A = "svg" : A !== "mathml" && isTargetMathML(u) && (A = "mathml"), D && D.isCE && (D.ce._teleportTargets || (D.ce._teleportTargets = /* @__PURE__ */ new Set())).add(u), H || (I(u, T), updateCssVars(_, !1)));
			};
			H && (I(T, P), updateCssVars(_, !0)), isTeleportDeferred(_.props) ? (_.el.__isMounted = !1, queuePostRenderEffect(() => {
				L(), delete _.el.__isMounted;
			}, O)) : L();
		} else {
			if (isTeleportDeferred(_.props) && u.el.__isMounted === !1) {
				queuePostRenderEffect(() => {
					TeleportImpl.process(u, _, T, E, D, O, A, j, M, P);
				}, O);
				return;
			}
			_.el = u.el, _.targetStart = u.targetStart;
			let F = _.anchor = u.anchor, R = _.target = u.target, B = _.targetAnchor = u.targetAnchor, V = isTeleportDisabled(u.props), Zd = V ? T : R, U = V ? F : B;
			if (A === "svg" || isTargetSVG(R) ? A = "svg" : (A === "mathml" || isTargetMathML(R)) && (A = "mathml"), G ? (L(u.dynamicChildren, G, Zd, D, O, A, j), traverseStaticChildren(u, _, !0)) : M || I(u, _, Zd, U, D, O, A, j, !1), H) V ? _.props && u.props && _.props.to !== u.props.to && (_.props.to = u.props.to) : moveTeleport(_, T, F, P, 1);
			else if ((_.props && _.props.to) !== (u.props && u.props.to)) {
				let u = _.target = resolveTarget(_.props, z);
				u && moveTeleport(_, u, null, P, 0);
			} else V && moveTeleport(_, R, B, P, 1);
			updateCssVars(_, H);
		}
	},
	remove(u, _, T, { um: E, o: { remove: D } }, O) {
		let { shapeFlag: A, children: j, anchor: M, targetStart: P, targetAnchor: F, target: I, props: L } = u;
		if (I && (D(P), D(F)), O && D(M), A & 16) {
			let u = O || !isTeleportDisabled(L);
			for (let D = 0; D < j.length; D++) {
				let O = j[D];
				E(O, _, T, u, !!O.dynamicChildren);
			}
		}
	},
	move: moveTeleport,
	hydrate: hydrateTeleport
};
function moveTeleport(u, _, T, { o: { insert: E }, m: D }, O = 2) {
	O === 0 && E(u.targetAnchor, _, T);
	let { el: A, anchor: j, shapeFlag: M, children: P, props: F } = u, I = O === 2;
	if (I && E(A, _, T), (!I || isTeleportDisabled(F)) && M & 16) for (let u = 0; u < P.length; u++) D(P[u], _, T, 2);
	I && E(j, _, T);
}
function hydrateTeleport(u, _, T, E, D, O, { o: { nextSibling: A, parentNode: j, querySelector: M, insert: P, createText: F } }, I) {
	function L(u, _, M, P) {
		_.anchor = I(A(u), _, j(u), T, E, D, O), _.targetStart = M, _.targetAnchor = P;
	}
	let R = _.target = resolveTarget(_.props, M), z = isTeleportDisabled(_.props);
	if (R) {
		let j = R._lpa || R.firstChild;
		if (_.shapeFlag & 16) if (z) L(u, _, j, j && A(j));
		else {
			_.anchor = A(u);
			let M = j;
			for (; M;) {
				if (M && M.nodeType === 8) {
					if (M.data === "teleport start anchor") _.targetStart = M;
					else if (M.data === "teleport anchor") {
						_.targetAnchor = M, R._lpa = _.targetAnchor && A(_.targetAnchor);
						break;
					}
				}
				M = A(M);
			}
			_.targetAnchor || prepareAnchor(R, _, F, P), I(j && A(j), _, R, T, E, D, O);
		}
		updateCssVars(_, z);
	} else z && _.shapeFlag & 16 && L(u, _, u, A(u));
	return _.anchor && A(_.anchor);
}
var Teleport = TeleportImpl;
function updateCssVars(u, _) {
	let T = u.ctx;
	if (T && T.ut) {
		let E, D;
		for (_ ? (E = u.el, D = u.anchor) : (E = u.targetStart, D = u.targetAnchor); E && E !== D;) E.nodeType === 1 && E.setAttribute("data-v-owner", T.uid), E = E.nextSibling;
		T.ut();
	}
}
function prepareAnchor(u, _, T, E) {
	let D = _.targetStart = T(""), O = _.targetAnchor = T("");
	return D[TeleportEndKey] = O, u && (E(D, u), E(O, u)), O;
}
var leaveCbKey = Symbol("_leaveCb"), enterCbKey$1 = Symbol("_enterCb");
function useTransitionState() {
	let u = {
		isMounted: !1,
		isLeaving: !1,
		isUnmounting: !1,
		leavingVNodes: /* @__PURE__ */ new Map()
	};
	return onMounted(() => {
		u.isMounted = !0;
	}), onBeforeUnmount(() => {
		u.isUnmounting = !0;
	}), u;
}
var TransitionHookValidator = [Function, Array], BaseTransitionPropsValidators = {
	mode: String,
	appear: Boolean,
	persisted: Boolean,
	onBeforeEnter: TransitionHookValidator,
	onEnter: TransitionHookValidator,
	onAfterEnter: TransitionHookValidator,
	onEnterCancelled: TransitionHookValidator,
	onBeforeLeave: TransitionHookValidator,
	onLeave: TransitionHookValidator,
	onAfterLeave: TransitionHookValidator,
	onLeaveCancelled: TransitionHookValidator,
	onBeforeAppear: TransitionHookValidator,
	onAppear: TransitionHookValidator,
	onAfterAppear: TransitionHookValidator,
	onAppearCancelled: TransitionHookValidator
}, recursiveGetSubtree = (u) => {
	let _ = u.subTree;
	return _.component ? recursiveGetSubtree(_.component) : _;
}, BaseTransitionImpl = {
	name: "BaseTransition",
	props: BaseTransitionPropsValidators,
	setup(u, { slots: _ }) {
		let T = getCurrentInstance(), E = useTransitionState();
		return () => {
			let D = _.default && getTransitionRawChildren(_.default(), !0);
			if (!D || !D.length) return;
			let O = findNonCommentChild(D), A = toRaw(u), { mode: j } = A;
			if (E.isLeaving) return emptyPlaceholder(O);
			let M = getInnerChild$1(O);
			if (!M) return emptyPlaceholder(O);
			let P = resolveTransitionHooks(M, A, E, T, (u) => P = u);
			M.type !== Comment && setTransitionHooks(M, P);
			let F = T.subTree && getInnerChild$1(T.subTree);
			if (F && F.type !== Comment && !isSameVNodeType(F, M) && recursiveGetSubtree(T).type !== Comment) {
				let u = resolveTransitionHooks(F, A, E, T);
				if (setTransitionHooks(F, u), j === "out-in" && M.type !== Comment) return E.isLeaving = !0, u.afterLeave = () => {
					E.isLeaving = !1, T.job.flags & 8 || T.update(), delete u.afterLeave, F = void 0;
				}, emptyPlaceholder(O);
				j === "in-out" && M.type !== Comment ? u.delayLeave = (u, _, T) => {
					let D = getLeavingNodesForType(E, F);
					D[String(F.key)] = F, u[leaveCbKey] = () => {
						_(), u[leaveCbKey] = void 0, delete P.delayedLeave, F = void 0;
					}, P.delayedLeave = () => {
						T(), delete P.delayedLeave, F = void 0;
					};
				} : F = void 0;
			} else F &&= void 0;
			return O;
		};
	}
};
function findNonCommentChild(u) {
	let _ = u[0];
	if (u.length > 1) {
		for (let T of u) if (T.type !== Comment) {
			_ = T;
			break;
		}
	}
	return _;
}
var BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(u, _) {
	let { leavingVNodes: T } = u, E = T.get(_.type);
	return E || (E = /* @__PURE__ */ Object.create(null), T.set(_.type, E)), E;
}
function resolveTransitionHooks(u, _, T, E, D) {
	let { appear: O, mode: A, persisted: j = !1, onBeforeEnter: M, onEnter: P, onAfterEnter: F, onEnterCancelled: I, onBeforeLeave: L, onLeave: z, onAfterLeave: B, onLeaveCancelled: V, onBeforeAppear: H, onAppear: Zd, onAfterAppear: U, onAppearCancelled: G } = _, K = String(u.key), Qd = getLeavingNodesForType(T, u), $d = (u, _) => {
		u && callWithAsyncErrorHandling(u, E, 9, _);
	}, ef = (u, _) => {
		let T = _[1];
		$d(u, _), isArray(u) ? u.every((u) => u.length <= 1) && T() : u.length <= 1 && T();
	}, tf = {
		mode: A,
		persisted: j,
		beforeEnter(_) {
			let E = M;
			if (!T.isMounted) if (O) E = H || M;
			else return;
			_[leaveCbKey] && _[leaveCbKey](!0);
			let D = Qd[K];
			D && isSameVNodeType(u, D) && D.el[leaveCbKey] && D.el[leaveCbKey](), $d(E, [_]);
		},
		enter(u) {
			let _ = P, E = F, D = I;
			if (!T.isMounted) if (O) _ = Zd || P, E = U || F, D = G || I;
			else return;
			let A = !1, j = u[enterCbKey$1] = (_) => {
				A || (A = !0, $d(_ ? D : E, [u]), tf.delayedLeave && tf.delayedLeave(), u[enterCbKey$1] = void 0);
			};
			_ ? ef(_, [u, j]) : j();
		},
		leave(_, E) {
			let D = String(u.key);
			if (_[enterCbKey$1] && _[enterCbKey$1](!0), T.isUnmounting) return E();
			$d(L, [_]);
			let O = !1, A = _[leaveCbKey] = (T) => {
				O || (O = !0, E(), $d(T ? V : B, [_]), _[leaveCbKey] = void 0, Qd[D] === u && delete Qd[D]);
			};
			Qd[D] = u, z ? ef(z, [_, A]) : A();
		},
		clone(u) {
			let O = resolveTransitionHooks(u, _, T, E, D);
			return D && D(O), O;
		}
	};
	return tf;
}
function emptyPlaceholder(u) {
	if (isKeepAlive(u)) return u = cloneVNode(u), u.children = null, u;
}
function getInnerChild$1(u) {
	if (!isKeepAlive(u)) return isTeleport(u.type) && u.children ? findNonCommentChild(u.children) : u;
	if (u.component) return u.component.subTree;
	let { shapeFlag: _, children: T } = u;
	if (T) {
		if (_ & 16) return T[0];
		if (_ & 32 && isFunction(T.default)) return T.default();
	}
}
function setTransitionHooks(u, _) {
	u.shapeFlag & 6 && u.component ? (u.transition = _, setTransitionHooks(u.component.subTree, _)) : u.shapeFlag & 128 ? (u.ssContent.transition = _.clone(u.ssContent), u.ssFallback.transition = _.clone(u.ssFallback)) : u.transition = _;
}
function getTransitionRawChildren(u, _ = !1, T) {
	let E = [], D = 0;
	for (let O = 0; O < u.length; O++) {
		let A = u[O], j = T == null ? A.key : String(T) + String(A.key == null ? O : A.key);
		A.type === Fragment ? (A.patchFlag & 128 && D++, E = E.concat(getTransitionRawChildren(A.children, _, j))) : (_ || A.type !== Comment) && E.push(j == null ? A : cloneVNode(A, { key: j }));
	}
	if (D > 1) for (let u = 0; u < E.length; u++) E[u].patchFlag = -2;
	return E;
}
/* @__NO_SIDE_EFFECTS__ */
function defineComponent(u, _) {
	return isFunction(u) ? /* @__PURE__ */ (() => extend({ name: u.name }, _, { setup: u }))() : u;
}
function useId$1() {
	let u = getCurrentInstance();
	return u ? (u.appContext.config.idPrefix || "v") + "-" + u.ids[0] + u.ids[1]++ : "";
}
function markAsyncBoundary(u) {
	u.ids = [
		u.ids[0] + u.ids[2]++ + "-",
		0,
		0
	];
}
function useTemplateRef(u) {
	let _ = getCurrentInstance(), T = shallowRef(null);
	if (_) {
		let D = _.refs === EMPTY_OBJ ? _.refs = {} : _.refs;
		Object.defineProperty(D, u, {
			enumerable: !0,
			get: () => T.value,
			set: (u) => T.value = u
		});
	}
	return T;
}
var pendingSetRefMap = /* @__PURE__ */ new WeakMap();
function setRef(u, _, T, D, O = !1) {
	if (isArray(u)) {
		u.forEach((u, E) => setRef(u, _ && (isArray(_) ? _[E] : _), T, D, O));
		return;
	}
	if (isAsyncWrapper(D) && !O) {
		D.shapeFlag & 512 && D.type.__asyncResolved && D.component.subTree.component && setRef(u, _, T, D.component.subTree);
		return;
	}
	let j = D.shapeFlag & 4 ? getComponentPublicInstance(D.component) : D.el, M = O ? null : j, { i: P, r: I } = u, z = _ && _.r, B = P.refs === EMPTY_OBJ ? P.refs = {} : P.refs, V = P.setupState, H = toRaw(V), G = V === EMPTY_OBJ ? NO : (u) => hasOwn$2(H, u), K = (u) => !0;
	if (z != null && z !== I) {
		if (invalidatePendingSetRef(_), isString(z)) B[z] = null, G(z) && (V[z] = null);
		else if (isRef(z)) {
			K(z) && (z.value = null);
			let u = _;
			u.k && (B[u.k] = null);
		}
	}
	if (isFunction(I)) callWithErrorHandling(I, P, 12, [M, B]);
	else {
		let _ = isString(I), E = isRef(I);
		if (_ || E) {
			let D = () => {
				if (u.f) {
					let T = _ ? G(I) ? V[I] : B[I] : K(I) || !u.k ? I.value : B[u.k];
					if (O) isArray(T) && remove(T, j);
					else if (isArray(T)) T.includes(j) || T.push(j);
					else if (_) B[I] = [j], G(I) && (V[I] = B[I]);
					else {
						let _ = [j];
						K(I) && (I.value = _), u.k && (B[u.k] = _);
					}
				} else _ ? (B[I] = M, G(I) && (V[I] = M)) : E && (K(I) && (I.value = M), u.k && (B[u.k] = M));
			};
			if (M) {
				let _ = () => {
					D(), pendingSetRefMap.delete(u);
				};
				_.id = -1, pendingSetRefMap.set(u, _), queuePostRenderEffect(_, T);
			} else invalidatePendingSetRef(u), D();
		}
	}
}
function invalidatePendingSetRef(u) {
	let _ = pendingSetRefMap.get(u);
	_ && (_.flags |= 8, pendingSetRefMap.delete(u));
}
var hasLoggedMismatchError = !1, logMismatchError = () => {
	hasLoggedMismatchError ||= (console.error("Hydration completed but contains mismatches."), !0);
}, isSVGContainer = (u) => u.namespaceURI.includes("svg") && u.tagName !== "foreignObject", isMathMLContainer = (u) => u.namespaceURI.includes("MathML"), getContainerType = (u) => {
	if (u.nodeType === 1) {
		if (isSVGContainer(u)) return "svg";
		if (isMathMLContainer(u)) return "mathml";
	}
}, isComment = (u) => u.nodeType === 8;
function createHydrationFunctions(u) {
	let { mt: _, p: T, o: { patchProp: E, createText: D, nextSibling: O, parentNode: A, remove: M, insert: P, createComment: F } } = u, I = (u, _) => {
		if (!_.hasChildNodes()) {
			T(null, u, _), flushPostFlushCbs(), _._vnode = u;
			return;
		}
		L(_.firstChild, u, null, null, null), flushPostFlushCbs(), _._vnode = u;
	}, L = (T, E, j, M, F, I = !1) => {
		I ||= !!E.dynamicChildren;
		let G = isComment(T) && T.data === "[", K = () => V(T, E, j, M, F, G), { type: Qd, ref: $d, shapeFlag: ef, patchFlag: tf } = E, nf = T.nodeType;
		E.el = T, tf === -2 && (I = !1, E.dynamicChildren = null);
		let rf = null;
		switch (Qd) {
			case Text:
				nf === 3 ? (T.data !== E.children && (logMismatchError(), T.data = E.children), rf = O(T)) : E.children === "" ? (P(E.el = D(""), A(T), T), rf = T) : rf = K();
				break;
			case Comment:
				U(T) ? (rf = O(T), Zd(E.el = T.content.firstChild, T, j)) : rf = nf !== 8 || G ? K() : O(T);
				break;
			case Static:
				if (G && (T = O(T), nf = T.nodeType), nf === 1 || nf === 3) {
					rf = T;
					let u = !E.children.length;
					for (let _ = 0; _ < E.staticCount; _++) u && (E.children += rf.nodeType === 1 ? rf.outerHTML : rf.data), _ === E.staticCount - 1 && (E.anchor = rf), rf = O(rf);
					return G ? O(rf) : rf;
				} else K();
				break;
			case Fragment:
				rf = G ? B(T, E, j, M, F, I) : K();
				break;
			default: if (ef & 1) rf = (nf !== 1 || E.type.toLowerCase() !== T.tagName.toLowerCase()) && !U(T) ? K() : R(T, E, j, M, F, I);
			else if (ef & 6) {
				E.slotScopeIds = F;
				let u = A(T);
				if (rf = G ? H(T) : isComment(T) && T.data === "teleport start" ? H(T, T.data, "teleport end") : O(T), _(E, u, null, j, M, getContainerType(u), I), isAsyncWrapper(E) && !E.type.__asyncResolved) {
					let _;
					G ? (_ = createVNode(Fragment), _.anchor = rf ? rf.previousSibling : u.lastChild) : _ = T.nodeType === 3 ? createTextVNode("") : createVNode("div"), _.el = T, E.component.subTree = _;
				}
			} else ef & 64 ? rf = nf === 8 ? E.type.hydrate(T, E, j, M, F, I, u, z) : K() : ef & 128 && (rf = E.type.hydrate(T, E, j, M, getContainerType(A(T)), F, I, u, L));
		}
		return $d != null && setRef($d, null, M, E), rf;
	}, R = (u, _, T, D, O, A) => {
		A ||= !!_.dynamicChildren;
		let { type: P, props: F, patchFlag: I, shapeFlag: L, dirs: R, transition: B } = _, V = P === "input" || P === "option";
		if (V || I !== -1) {
			R && invokeDirectiveHook(_, null, T, "created");
			let P = !1;
			if (U(u)) {
				P = needTransition(null, B) && T && T.vnode.props && T.vnode.props.appear;
				let E = u.content.firstChild;
				if (P) {
					let u = E.getAttribute("class");
					u && (E.$cls = u), B.beforeEnter(E);
				}
				Zd(E, u, T), _.el = u = E;
			}
			if (L & 16 && !(F && (F.innerHTML || F.textContent))) {
				let E = z(u.firstChild, _, u, T, D, O, A);
				for (; E;) {
					isMismatchAllowed(u, 1) || logMismatchError();
					let _ = E;
					E = E.nextSibling, M(_);
				}
			} else if (L & 8) {
				let T = _.children;
				T[0] === "\n" && (u.tagName === "PRE" || u.tagName === "TEXTAREA") && (T = T.slice(1)), u.textContent !== T && (isMismatchAllowed(u, 0) || logMismatchError(), u.textContent = _.children);
			}
			if (F) {
				if (V || !A || I & 48) {
					let _ = u.tagName.includes("-");
					for (let D in F) (V && (D.endsWith("value") || D === "indeterminate") || isOn(D) && !isReservedProp(D) || D[0] === "." || _) && E(u, D, null, F[D], void 0, T);
				} else if (F.onClick) E(u, "onClick", null, F.onClick, void 0, T);
				else if (I & 4 && isReactive(F.style)) for (let u in F.style) F.style[u];
			}
			let H;
			(H = F && F.onVnodeBeforeMount) && invokeVNodeHook(H, T, _), R && invokeDirectiveHook(_, null, T, "beforeMount"), ((H = F && F.onVnodeMounted) || R || P) && queueEffectWithSuspense(() => {
				H && invokeVNodeHook(H, T, _), P && B.enter(u), R && invokeDirectiveHook(_, null, T, "mounted");
			}, D);
		}
		return u.nextSibling;
	}, z = (u, _, E, A, j, M, F) => {
		F ||= !!_.dynamicChildren;
		let I = _.children, R = I.length;
		for (let _ = 0; _ < R; _++) {
			let z = F ? I[_] : I[_] = normalizeVNode(I[_]), B = z.type === Text;
			u ? (B && !F && _ + 1 < R && normalizeVNode(I[_ + 1]).type === Text && (P(D(u.data.slice(z.children.length)), E, O(u)), u.data = z.children), u = L(u, z, A, j, M, F)) : B && !z.children ? P(z.el = D(""), E) : (isMismatchAllowed(E, 1) || logMismatchError(), T(null, z, E, null, A, j, getContainerType(E), M));
		}
		return u;
	}, B = (u, _, T, E, D, j) => {
		let { slotScopeIds: M } = _;
		M && (D = D ? D.concat(M) : M);
		let I = A(u), L = z(O(u), _, I, T, E, D, j);
		return L && isComment(L) && L.data === "]" ? O(_.anchor = L) : (logMismatchError(), P(_.anchor = F("]"), I, L), L);
	}, V = (u, _, E, D, j, P) => {
		if (isMismatchAllowed(u.parentElement, 1) || logMismatchError(), _.el = null, P) {
			let _ = H(u);
			for (;;) {
				let T = O(u);
				if (T && T !== _) M(T);
				else break;
			}
		}
		let F = O(u), I = A(u);
		return M(u), T(null, _, I, F, E, D, getContainerType(I), j), E && (E.vnode.el = _.el, updateHOCHostEl(E, _.el)), F;
	}, H = (u, _ = "[", T = "]") => {
		let E = 0;
		for (; u;) if (u = O(u), u && isComment(u) && (u.data === _ && E++, u.data === T)) {
			if (E === 0) return O(u);
			E--;
		}
		return u;
	}, Zd = (u, _, T) => {
		let E = _.parentNode;
		E && E.replaceChild(u, _);
		let D = T;
		for (; D;) D.vnode.el === _ && (D.vnode.el = D.subTree.el = u), D = D.parent;
	}, U = (u) => u.nodeType === 1 && u.tagName === "TEMPLATE";
	return [I, L];
}
var allowMismatchAttr = "data-allow-mismatch", MismatchTypeString = {
	0: "text",
	1: "children",
	2: "class",
	3: "style",
	4: "attribute"
};
function isMismatchAllowed(u, _) {
	if (_ === 0 || _ === 1) for (; u && !u.hasAttribute(allowMismatchAttr);) u = u.parentElement;
	let T = u && u.getAttribute(allowMismatchAttr);
	if (T == null) return !1;
	if (T === "") return !0;
	{
		let u = T.split(",");
		return _ === 0 && u.includes("children") ? !0 : u.includes(MismatchTypeString[_]);
	}
}
var requestIdleCallback = getGlobalThis().requestIdleCallback || ((u) => setTimeout(u, 1)), cancelIdleCallback = getGlobalThis().cancelIdleCallback || ((u) => clearTimeout(u)), hydrateOnIdle = (u = 1e4) => (_) => {
	let T = requestIdleCallback(_, { timeout: u });
	return () => cancelIdleCallback(T);
};
function elementIsVisibleInViewport(u) {
	let { top: _, left: T, bottom: E, right: D } = u.getBoundingClientRect(), { innerHeight: O, innerWidth: A } = window;
	return (_ > 0 && _ < O || E > 0 && E < O) && (T > 0 && T < A || D > 0 && D < A);
}
var hydrateOnVisible = (u) => (_, T) => {
	let E = new IntersectionObserver((u) => {
		for (let T of u) if (T.isIntersecting) {
			E.disconnect(), _();
			break;
		}
	}, u);
	return T((u) => {
		if (u instanceof Element) {
			if (elementIsVisibleInViewport(u)) return _(), E.disconnect(), !1;
			E.observe(u);
		}
	}), () => E.disconnect();
}, hydrateOnMediaQuery = (u) => (_) => {
	if (u) {
		let T = matchMedia(u);
		if (T.matches) _();
		else return T.addEventListener("change", _, { once: !0 }), () => T.removeEventListener("change", _);
	}
}, hydrateOnInteraction = (u = []) => (_, T) => {
	isString(u) && (u = [u]);
	let E = !1, D = (u) => {
		E || (E = !0, O(), _(), u.target.dispatchEvent(new u.constructor(u.type, u)));
	}, O = () => {
		T((_) => {
			for (let T of u) _.removeEventListener(T, D);
		});
	};
	return T((_) => {
		for (let T of u) _.addEventListener(T, D, { once: !0 });
	}), O;
};
function forEachElement(u, _) {
	if (isComment(u) && u.data === "[") {
		let T = 1, E = u.nextSibling;
		for (; E;) {
			if (E.nodeType === 1) {
				if (_(E) === !1) break;
			} else if (isComment(E)) if (E.data === "]") {
				if (--T === 0) break;
			} else E.data === "[" && T++;
			E = E.nextSibling;
		}
	} else _(u);
}
var isAsyncWrapper = (u) => !!u.type.__asyncLoader;
/* @__NO_SIDE_EFFECTS__ */
function defineAsyncComponent(u) {
	isFunction(u) && (u = { loader: u });
	let { loader: _, loadingComponent: T, errorComponent: E, delay: D = 200, hydrate: O, timeout: A, suspensible: j = !0, onError: M } = u, P = null, F, I = 0, L = () => (I++, P = null, R()), R = () => {
		let u;
		return P || (u = P = _().catch((u) => {
			if (u = u instanceof Error ? u : Error(String(u)), M) return new Promise((_, T) => {
				M(u, () => _(L()), () => T(u), I + 1);
			});
			throw u;
		}).then((_) => u !== P && P ? P : (_ && (_.__esModule || _[Symbol.toStringTag] === "Module") && (_ = _.default), F = _, _)));
	};
	return /* @__PURE__ */ defineComponent({
		name: "AsyncComponentWrapper",
		__asyncLoader: R,
		__asyncHydrate(u, _, T) {
			let E = !1;
			(_.bu ||= []).push(() => E = !0);
			let D = () => {
				E || T();
			}, A = O ? () => {
				let T = O(D, (_) => forEachElement(u, _));
				T && (_.bum ||= []).push(T);
			} : D;
			F ? A() : R().then(() => !_.isUnmounted && A());
		},
		get __asyncResolved() {
			return F;
		},
		setup() {
			let u = currentInstance;
			if (markAsyncBoundary(u), F) return () => createInnerComp(F, u);
			let _ = (_) => {
				P = null, handleError(_, u, 13, !E);
			};
			if (j && u.suspense || isInSSRComponentSetup) return R().then((_) => () => createInnerComp(_, u)).catch((u) => (_(u), () => E ? createVNode(E, { error: u }) : null));
			let O = ref(!1), M = ref(), I = ref(!!D);
			return D && setTimeout(() => {
				I.value = !1;
			}, D), A != null && setTimeout(() => {
				if (!O.value && !M.value) {
					let u = /* @__PURE__ */ Error(`Async component timed out after ${A}ms.`);
					_(u), M.value = u;
				}
			}, A), R().then(() => {
				O.value = !0, u.parent && isKeepAlive(u.parent.vnode) && u.parent.update();
			}).catch((u) => {
				_(u), M.value = u;
			}), () => {
				if (O.value && F) return createInnerComp(F, u);
				if (M.value && E) return createVNode(E, { error: M.value });
				if (T && !I.value) return createVNode(T);
			};
		}
	});
}
function createInnerComp(u, _) {
	let { ref: T, props: E, children: D, ce: O } = _.vnode, A = createVNode(u, E, D);
	return A.ref = T, A.ce = O, delete _.vnode.ce, A;
}
var isKeepAlive = (u) => u.type.__isKeepAlive, KeepAlive = {
	name: "KeepAlive",
	__isKeepAlive: !0,
	props: {
		include: [
			String,
			RegExp,
			Array
		],
		exclude: [
			String,
			RegExp,
			Array
		],
		max: [String, Number]
	},
	setup(u, { slots: _ }) {
		let T = getCurrentInstance(), E = T.ctx;
		if (!E.renderer) return () => {
			let u = _.default && _.default();
			return u && u.length === 1 ? u[0] : u;
		};
		let D = /* @__PURE__ */ new Map(), O = /* @__PURE__ */ new Set(), A = null, j = T.suspense, { renderer: { p: M, m: P, um: F, o: { createElement: I } } } = E, L = I("div");
		E.activate = (u, _, T, E, D) => {
			let O = u.component;
			P(u, _, T, 0, j), M(O.vnode, u, _, T, O, j, E, u.slotScopeIds, D), queuePostRenderEffect(() => {
				O.isDeactivated = !1, O.a && invokeArrayFns(O.a);
				let _ = u.props && u.props.onVnodeMounted;
				_ && invokeVNodeHook(_, O.parent, u);
			}, j);
		}, E.deactivate = (u) => {
			let _ = u.component;
			invalidateMount(_.m), invalidateMount(_.a), P(u, L, null, 1, j), queuePostRenderEffect(() => {
				_.da && invokeArrayFns(_.da);
				let T = u.props && u.props.onVnodeUnmounted;
				T && invokeVNodeHook(T, _.parent, u), _.isDeactivated = !0;
			}, j);
		};
		function R(u) {
			resetShapeFlag(u), F(u, T, j, !0);
		}
		function z(u) {
			D.forEach((_, T) => {
				let E = getComponentName(_.type);
				E && !u(E) && B(T);
			});
		}
		function B(u) {
			let _ = D.get(u);
			_ && (!A || !isSameVNodeType(_, A)) ? R(_) : A && resetShapeFlag(A), D.delete(u), O.delete(u);
		}
		watch(() => [u.include, u.exclude], ([u, _]) => {
			u && z((_) => matches(u, _)), _ && z((u) => !matches(_, u));
		}, {
			flush: "post",
			deep: !0
		});
		let V = null, H = () => {
			V != null && (isSuspense(T.subTree.type) ? queuePostRenderEffect(() => {
				D.set(V, getInnerChild(T.subTree));
			}, T.subTree.suspense) : D.set(V, getInnerChild(T.subTree)));
		};
		return onMounted(H), onUpdated(H), onBeforeUnmount(() => {
			D.forEach((u) => {
				let { subTree: _, suspense: E } = T, D = getInnerChild(_);
				if (u.type === D.type && u.key === D.key) {
					resetShapeFlag(D);
					let u = D.component.da;
					u && queuePostRenderEffect(u, E);
					return;
				}
				R(u);
			});
		}), () => {
			if (V = null, !_.default) return A = null;
			let T = _.default(), E = T[0];
			if (T.length > 1) return A = null, T;
			if (!isVNode(E) || !(E.shapeFlag & 4) && !(E.shapeFlag & 128)) return A = null, E;
			let j = getInnerChild(E);
			if (j.type === Comment) return A = null, j;
			let M = j.type, P = getComponentName(isAsyncWrapper(j) ? j.type.__asyncResolved || {} : M), { include: F, exclude: I, max: L } = u;
			if (F && (!P || !matches(F, P)) || I && P && matches(I, P)) return j.shapeFlag &= -257, A = j, E;
			let R = j.key == null ? M : j.key, z = D.get(R);
			return j.el && (j = cloneVNode(j), E.shapeFlag & 128 && (E.ssContent = j)), V = R, z ? (j.el = z.el, j.component = z.component, j.transition && setTransitionHooks(j, j.transition), j.shapeFlag |= 512, O.delete(R), O.add(R)) : (O.add(R), L && O.size > parseInt(L, 10) && B(O.values().next().value)), j.shapeFlag |= 256, A = j, isSuspense(E.type) ? E : j;
		};
	}
};
function matches(u, _) {
	return isArray(u) ? u.some((u) => matches(u, _)) : isString(u) ? u.split(",").includes(_) : isRegExp(u) ? (u.lastIndex = 0, u.test(_)) : !1;
}
function onActivated(u, _) {
	registerKeepAliveHook(u, "a", _);
}
function onDeactivated(u, _) {
	registerKeepAliveHook(u, "da", _);
}
function registerKeepAliveHook(u, _, T = currentInstance) {
	let E = u.__wdc ||= () => {
		let _ = T;
		for (; _;) {
			if (_.isDeactivated) return;
			_ = _.parent;
		}
		return u();
	};
	if (injectHook(_, E, T), T) {
		let u = T.parent;
		for (; u && u.parent;) isKeepAlive(u.parent.vnode) && injectToKeepAliveRoot(E, _, T, u), u = u.parent;
	}
}
function injectToKeepAliveRoot(u, _, T, E) {
	let D = injectHook(_, u, E, !0);
	onUnmounted(() => {
		remove(E[_], D);
	}, T);
}
function resetShapeFlag(u) {
	u.shapeFlag &= -257, u.shapeFlag &= -513;
}
function getInnerChild(u) {
	return u.shapeFlag & 128 ? u.ssContent : u;
}
function injectHook(u, _, T = currentInstance, E = !1) {
	if (T) {
		let D = T[u] || (T[u] = []), O = _.__weh ||= (...E) => {
			pauseTracking();
			let D = setCurrentInstance(T), O = callWithAsyncErrorHandling(_, T, u, E);
			return D(), resetTracking(), O;
		};
		return E ? D.unshift(O) : D.push(O), O;
	}
}
var createHook = (u) => (_, T = currentInstance) => {
	(!isInSSRComponentSetup || u === "sp") && injectHook(u, (...u) => _(...u), T);
}, onBeforeMount = createHook("bm"), onMounted = createHook("m"), onBeforeUpdate = createHook("bu"), onUpdated = createHook("u"), onBeforeUnmount = createHook("bum"), onUnmounted = createHook("um"), onServerPrefetch = createHook("sp"), onRenderTriggered = createHook("rtg"), onRenderTracked = createHook("rtc");
function onErrorCaptured(u, _ = currentInstance) {
	injectHook("ec", u, _);
}
var COMPONENTS = "components", DIRECTIVES = "directives";
function resolveComponent(u, _) {
	return resolveAsset(COMPONENTS, u, !0, _) || u;
}
var NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(u) {
	return isString(u) ? resolveAsset(COMPONENTS, u, !1) || u : u || NULL_DYNAMIC_COMPONENT;
}
function resolveDirective(u) {
	return resolveAsset(DIRECTIVES, u);
}
function resolveAsset(u, _, T = !0, E = !1) {
	let D = currentRenderingInstance || currentInstance;
	if (D) {
		let T = D.type;
		if (u === COMPONENTS) {
			let u = getComponentName(T, !1);
			if (u && (u === _ || u === camelize$2(_) || u === capitalize(camelize$2(_)))) return T;
		}
		let O = resolve(D[u] || T[u], _) || resolve(D.appContext[u], _);
		return !O && E ? T : O;
	}
}
function resolve(u, _) {
	return u && (u[_] || u[camelize$2(_)] || u[capitalize(camelize$2(_))]);
}
function renderList(u, _, T, E) {
	let D, O = T && T[E], A = isArray(u);
	if (A || isString(u)) {
		let T = A && isReactive(u), E = !1, j = !1;
		T && (E = !isShallow(u), j = isReadonly(u), u = shallowReadArray(u)), D = Array(u.length);
		for (let T = 0, A = u.length; T < A; T++) D[T] = _(E ? j ? toReadonly(toReactive(u[T])) : toReactive(u[T]) : u[T], T, void 0, O && O[T]);
	} else if (typeof u == "number") {
		D = Array(u);
		for (let T = 0; T < u; T++) D[T] = _(T + 1, T, void 0, O && O[T]);
	} else if (isObject$2(u)) if (u[Symbol.iterator]) D = Array.from(u, (u, T) => _(u, T, void 0, O && O[T]));
	else {
		let T = Object.keys(u);
		D = Array(T.length);
		for (let E = 0, A = T.length; E < A; E++) {
			let A = T[E];
			D[E] = _(u[A], A, E, O && O[E]);
		}
	}
	else D = [];
	return T && (T[E] = D), D;
}
function createSlots(u, _) {
	for (let T = 0; T < _.length; T++) {
		let E = _[T];
		if (isArray(E)) for (let _ = 0; _ < E.length; _++) u[E[_].name] = E[_].fn;
		else E && (u[E.name] = E.key ? (...u) => {
			let _ = E.fn(...u);
			return _ && (_.key = E.key), _;
		} : E.fn);
	}
	return u;
}
function renderSlot(u, _, T = {}, E, D) {
	if (currentRenderingInstance.ce || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.ce) {
		let u = Object.keys(T).length > 0;
		return _ !== "default" && (T.name = _), openBlock(), createBlock(Fragment, null, [createVNode("slot", T, E && E())], u ? -2 : 64);
	}
	let O = u[_];
	O && O._c && (O._d = !1), openBlock();
	let A = O && ensureValidVNode(O(T)), j = T.key || A && A.key, M = createBlock(Fragment, { key: (j && !isSymbol(j) ? j : `_${_}`) + (!A && E ? "_fb" : "") }, A || (E ? E() : []), A && u._ === 1 ? 64 : -2);
	return !D && M.scopeId && (M.slotScopeIds = [M.scopeId + "-s"]), O && O._c && (O._d = !0), M;
}
function ensureValidVNode(u) {
	return u.some((u) => isVNode(u) ? !(u.type === Comment || u.type === Fragment && !ensureValidVNode(u.children)) : !0) ? u : null;
}
function toHandlers(u, _) {
	let T = {};
	for (let E in u) T[_ && /[A-Z]/.test(E) ? `on:${E}` : toHandlerKey(E)] = u[E];
	return T;
}
var getPublicInstance = (u) => u ? isStatefulComponent(u) ? getComponentPublicInstance(u) : getPublicInstance(u.parent) : null, publicPropertiesMap = /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
	$: (u) => u,
	$el: (u) => u.vnode.el,
	$data: (u) => u.data,
	$props: (u) => u.props,
	$attrs: (u) => u.attrs,
	$slots: (u) => u.slots,
	$refs: (u) => u.refs,
	$parent: (u) => getPublicInstance(u.parent),
	$root: (u) => getPublicInstance(u.root),
	$host: (u) => u.ce,
	$emit: (u) => u.emit,
	$options: (u) => resolveMergedOptions(u),
	$forceUpdate: (u) => u.f ||= () => {
		queueJob(u.update);
	},
	$nextTick: (u) => u.n ||= nextTick.bind(u.proxy),
	$watch: (u) => instanceWatch.bind(u)
}), hasSetupBinding = (u, _) => u !== EMPTY_OBJ && !u.__isScriptSetup && hasOwn$2(u, _), PublicInstanceProxyHandlers = {
	get({ _: u }, _) {
		if (_ === "__v_skip") return !0;
		let { ctx: T, setupState: D, data: O, props: A, accessCache: j, type: M, appContext: P } = u, F;
		if (_[0] !== "$") {
			let M = j[_];
			if (M !== void 0) switch (M) {
				case 1: return D[_];
				case 2: return O[_];
				case 4: return T[_];
				case 3: return A[_];
			}
			else if (hasSetupBinding(D, _)) return j[_] = 1, D[_];
			else if (O !== EMPTY_OBJ && hasOwn$2(O, _)) return j[_] = 2, O[_];
			else if ((F = u.propsOptions[0]) && hasOwn$2(F, _)) return j[_] = 3, A[_];
			else if (T !== EMPTY_OBJ && hasOwn$2(T, _)) return j[_] = 4, T[_];
			else shouldCacheAccess && (j[_] = 0);
		}
		let I = publicPropertiesMap[_], R, z;
		if (I) return _ === "$attrs" && track(u.attrs, "get", ""), I(u);
		if ((R = M.__cssModules) && (R = R[_])) return R;
		if (T !== EMPTY_OBJ && hasOwn$2(T, _)) return j[_] = 4, T[_];
		if (z = P.config.globalProperties, hasOwn$2(z, _)) return z[_];
	},
	set({ _: u }, _, T) {
		let { data: D, setupState: O, ctx: A } = u;
		return hasSetupBinding(O, _) ? (O[_] = T, !0) : D !== EMPTY_OBJ && hasOwn$2(D, _) ? (D[_] = T, !0) : hasOwn$2(u.props, _) || _[0] === "$" && _.slice(1) in u ? !1 : (A[_] = T, !0);
	},
	has({ _: { data: u, setupState: _, accessCache: T, ctx: D, appContext: O, propsOptions: A, type: j } }, M) {
		let P, F;
		return !!(T[M] || u !== EMPTY_OBJ && M[0] !== "$" && hasOwn$2(u, M) || hasSetupBinding(_, M) || (P = A[0]) && hasOwn$2(P, M) || hasOwn$2(D, M) || hasOwn$2(publicPropertiesMap, M) || hasOwn$2(O.config.globalProperties, M) || (F = j.__cssModules) && F[M]);
	},
	defineProperty(u, _, T) {
		return T.get == null ? hasOwn$2(T, "value") && this.set(u, _, T.value, null) : u._.accessCache[_] = 0, Reflect.defineProperty(u, _, T);
	}
}, RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ extend({}, PublicInstanceProxyHandlers, {
	get(u, _) {
		if (_ !== Symbol.unscopables) return PublicInstanceProxyHandlers.get(u, _, u);
	},
	has(u, _) {
		return _[0] !== "_" && !isGloballyAllowed(_);
	}
});
function defineProps() {
	return null;
}
function defineEmits() {
	return null;
}
function defineExpose(u) {}
function defineOptions(u) {}
function defineSlots() {
	return null;
}
function defineModel() {}
function withDefaults(u, _) {
	return null;
}
function useSlots() {
	return getContext("useSlots").slots;
}
function useAttrs() {
	return getContext("useAttrs").attrs;
}
function getContext(u) {
	let _ = getCurrentInstance();
	return _.setupContext ||= createSetupContext(_);
}
function normalizePropsOrEmits(u) {
	return isArray(u) ? u.reduce((u, _) => (u[_] = null, u), {}) : u;
}
function mergeDefaults(u, _) {
	let T = normalizePropsOrEmits(u);
	for (let u in _) {
		if (u.startsWith("__skip")) continue;
		let E = T[u];
		E ? isArray(E) || isFunction(E) ? E = T[u] = {
			type: E,
			default: _[u]
		} : E.default = _[u] : E === null && (E = T[u] = { default: _[u] }), E && _[`__skip_${u}`] && (E.skipFactory = !0);
	}
	return T;
}
function mergeModels(u, _) {
	return !u || !_ ? u || _ : isArray(u) && isArray(_) ? u.concat(_) : extend({}, normalizePropsOrEmits(u), normalizePropsOrEmits(_));
}
function createPropsRestProxy(u, _) {
	let T = {};
	for (let E in u) _.includes(E) || Object.defineProperty(T, E, {
		enumerable: !0,
		get: () => u[E]
	});
	return T;
}
function withAsyncContext(u) {
	let _ = getCurrentInstance(), T = u();
	return unsetCurrentInstance(), isPromise(T) && (T = T.catch((u) => {
		throw setCurrentInstance(_), u;
	})), [T, () => setCurrentInstance(_)];
}
var shouldCacheAccess = !0;
function applyOptions(u) {
	let _ = resolveMergedOptions(u), T = u.proxy, E = u.ctx;
	shouldCacheAccess = !1, _.beforeCreate && callHook$1(_.beforeCreate, u, "bc");
	let { data: D, computed: A, methods: j, watch: M, provide: P, inject: F, created: I, beforeMount: L, mounted: z, beforeUpdate: B, updated: V, activated: H, deactivated: U, beforeDestroy: G, beforeUnmount: Qd, destroyed: $d, unmounted: ef, render: tf, renderTracked: nf, renderTriggered: rf, errorCaptured: af, serverPrefetch: of, expose: sf, inheritAttrs: cf, components: lf, directives: uf, filters: df } = _;
	if (F && resolveInjections(F, E, null), j) for (let u in j) {
		let _ = j[u];
		isFunction(_) && (E[u] = _.bind(T));
	}
	if (D) {
		let _ = D.call(T, T);
		isObject$2(_) && (u.data = reactive(_));
	}
	if (shouldCacheAccess = !0, A) for (let u in A) {
		let _ = A[u], D = computed({
			get: isFunction(_) ? _.bind(T, T) : isFunction(_.get) ? _.get.bind(T, T) : NOOP,
			set: !isFunction(_) && isFunction(_.set) ? _.set.bind(T) : NOOP
		});
		Object.defineProperty(E, u, {
			enumerable: !0,
			configurable: !0,
			get: () => D.value,
			set: (u) => D.value = u
		});
	}
	if (M) for (let u in M) createWatcher(M[u], E, T, u);
	if (P) {
		let u = isFunction(P) ? P.call(T) : P;
		Reflect.ownKeys(u).forEach((_) => {
			provide(_, u[_]);
		});
	}
	I && callHook$1(I, u, "c");
	function ff(u, _) {
		isArray(_) ? _.forEach((_) => u(_.bind(T))) : _ && u(_.bind(T));
	}
	if (ff(onBeforeMount, L), ff(onMounted, z), ff(onBeforeUpdate, B), ff(onUpdated, V), ff(onActivated, H), ff(onDeactivated, U), ff(onErrorCaptured, af), ff(onRenderTracked, nf), ff(onRenderTriggered, rf), ff(onBeforeUnmount, Qd), ff(onUnmounted, ef), ff(onServerPrefetch, of), isArray(sf)) if (sf.length) {
		let _ = u.exposed ||= {};
		sf.forEach((u) => {
			Object.defineProperty(_, u, {
				get: () => T[u],
				set: (_) => T[u] = _,
				enumerable: !0
			});
		});
	} else u.exposed ||= {};
	tf && u.render === NOOP && (u.render = tf), cf != null && (u.inheritAttrs = cf), lf && (u.components = lf), uf && (u.directives = uf), of && markAsyncBoundary(u);
}
function resolveInjections(u, _, T = NOOP) {
	for (let T in isArray(u) && (u = normalizeInject(u)), u) {
		let E = u[T], D;
		D = isObject$2(E) ? "default" in E ? inject(E.from || T, E.default, !0) : inject(E.from || T) : inject(E), isRef(D) ? Object.defineProperty(_, T, {
			enumerable: !0,
			configurable: !0,
			get: () => D.value,
			set: (u) => D.value = u
		}) : _[T] = D;
	}
}
function callHook$1(u, _, T) {
	callWithAsyncErrorHandling(isArray(u) ? u.map((u) => u.bind(_.proxy)) : u.bind(_.proxy), _, T);
}
function createWatcher(u, _, T, E) {
	let D = E.includes(".") ? createPathGetter(T, E) : () => T[E];
	if (isString(u)) {
		let T = _[u];
		isFunction(T) && watch(D, T);
	} else if (isFunction(u)) watch(D, u.bind(T));
	else if (isObject$2(u)) if (isArray(u)) u.forEach((u) => createWatcher(u, _, T, E));
	else {
		let E = isFunction(u.handler) ? u.handler.bind(T) : _[u.handler];
		isFunction(E) && watch(D, E, u);
	}
}
function resolveMergedOptions(u) {
	let _ = u.type, { mixins: T, extends: E } = _, { mixins: D, optionsCache: O, config: { optionMergeStrategies: A } } = u.appContext, j = O.get(_), M;
	return j ? M = j : !D.length && !T && !E ? M = _ : (M = {}, D.length && D.forEach((u) => mergeOptions(M, u, A, !0)), mergeOptions(M, _, A)), isObject$2(_) && O.set(_, M), M;
}
function mergeOptions(u, _, T, E = !1) {
	let { mixins: D, extends: O } = _;
	for (let A in O && mergeOptions(u, O, T, !0), D && D.forEach((_) => mergeOptions(u, _, T, !0)), _) if (!(E && A === "expose")) {
		let E = internalOptionMergeStrats[A] || T && T[A];
		u[A] = E ? E(u[A], _[A]) : _[A];
	}
	return u;
}
var internalOptionMergeStrats = {
	data: mergeDataFn,
	props: mergeEmitsOrPropsOptions,
	emits: mergeEmitsOrPropsOptions,
	methods: mergeObjectOptions,
	computed: mergeObjectOptions,
	beforeCreate: mergeAsArray,
	created: mergeAsArray,
	beforeMount: mergeAsArray,
	mounted: mergeAsArray,
	beforeUpdate: mergeAsArray,
	updated: mergeAsArray,
	beforeDestroy: mergeAsArray,
	beforeUnmount: mergeAsArray,
	destroyed: mergeAsArray,
	unmounted: mergeAsArray,
	activated: mergeAsArray,
	deactivated: mergeAsArray,
	errorCaptured: mergeAsArray,
	serverPrefetch: mergeAsArray,
	components: mergeObjectOptions,
	directives: mergeObjectOptions,
	watch: mergeWatchOptions,
	provide: mergeDataFn,
	inject: mergeInject
};
function mergeDataFn(u, _) {
	return _ ? u ? function() {
		return extend(isFunction(u) ? u.call(this, this) : u, isFunction(_) ? _.call(this, this) : _);
	} : _ : u;
}
function mergeInject(u, _) {
	return mergeObjectOptions(normalizeInject(u), normalizeInject(_));
}
function normalizeInject(u) {
	if (isArray(u)) {
		let _ = {};
		for (let T = 0; T < u.length; T++) _[u[T]] = u[T];
		return _;
	}
	return u;
}
function mergeAsArray(u, _) {
	return u ? [...new Set([].concat(u, _))] : _;
}
function mergeObjectOptions(u, _) {
	return u ? extend(/* @__PURE__ */ Object.create(null), u, _) : _;
}
function mergeEmitsOrPropsOptions(u, _) {
	return u ? isArray(u) && isArray(_) ? [.../* @__PURE__ */ new Set([...u, ..._])] : extend(/* @__PURE__ */ Object.create(null), normalizePropsOrEmits(u), normalizePropsOrEmits(_ ?? {})) : _;
}
function mergeWatchOptions(u, _) {
	if (!u) return _;
	if (!_) return u;
	let T = extend(/* @__PURE__ */ Object.create(null), u);
	for (let E in _) T[E] = mergeAsArray(u[E], _[E]);
	return T;
}
function createAppContext() {
	return {
		app: null,
		config: {
			isNativeTag: NO,
			performance: !1,
			globalProperties: {},
			optionMergeStrategies: {},
			errorHandler: void 0,
			warnHandler: void 0,
			compilerOptions: {}
		},
		mixins: [],
		components: {},
		directives: {},
		provides: /* @__PURE__ */ Object.create(null),
		optionsCache: /* @__PURE__ */ new WeakMap(),
		propsCache: /* @__PURE__ */ new WeakMap(),
		emitsCache: /* @__PURE__ */ new WeakMap()
	};
}
var uid$1 = 0;
function createAppAPI(u, _) {
	return function(T, E = null) {
		isFunction(T) || (T = extend({}, T)), E != null && !isObject$2(E) && (E = null);
		let D = createAppContext(), O = /* @__PURE__ */ new WeakSet(), A = [], j = !1, M = D.app = {
			_uid: uid$1++,
			_component: T,
			_props: E,
			_container: null,
			_context: D,
			_instance: null,
			version,
			get config() {
				return D.config;
			},
			set config(u) {},
			use(u, ..._) {
				return O.has(u) || (u && isFunction(u.install) ? (O.add(u), u.install(M, ..._)) : isFunction(u) && (O.add(u), u(M, ..._))), M;
			},
			mixin(u) {
				return D.mixins.includes(u) || D.mixins.push(u), M;
			},
			component(u, _) {
				return _ ? (D.components[u] = _, M) : D.components[u];
			},
			directive(u, _) {
				return _ ? (D.directives[u] = _, M) : D.directives[u];
			},
			mount(O, A, P) {
				if (!j) {
					let F = M._ceVNode || createVNode(T, E);
					return F.appContext = D, P === !0 ? P = "svg" : P === !1 && (P = void 0), A && _ ? _(F, O) : u(F, O, P), j = !0, M._container = O, O.__vue_app__ = M, getComponentPublicInstance(F.component);
				}
			},
			onUnmount(u) {
				A.push(u);
			},
			unmount() {
				j && (callWithAsyncErrorHandling(A, M._instance, 16), u(null, M._container), delete M._container.__vue_app__);
			},
			provide(u, _) {
				return D.provides[u] = _, M;
			},
			runWithContext(u) {
				let _ = currentApp;
				currentApp = M;
				try {
					return u();
				} finally {
					currentApp = _;
				}
			}
		};
		return M;
	};
}
var currentApp = null;
function provide(u, _) {
	if (currentInstance) {
		let T = currentInstance.provides, E = currentInstance.parent && currentInstance.parent.provides;
		E === T && (T = currentInstance.provides = Object.create(E)), T[u] = _;
	}
}
function inject(u, _, T = !1) {
	let E = getCurrentInstance();
	if (E || currentApp) {
		let D = currentApp ? currentApp._context.provides : E ? E.parent == null || E.ce ? E.vnode.appContext && E.vnode.appContext.provides : E.parent.provides : void 0;
		if (D && u in D) return D[u];
		if (arguments.length > 1) return T && isFunction(_) ? _.call(E && E.proxy) : _;
	}
}
function hasInjectionContext() {
	return !!(getCurrentInstance() || currentApp);
}
var internalObjectProto = {}, createInternalObject = () => Object.create(internalObjectProto), isInternalObject = (u) => Object.getPrototypeOf(u) === internalObjectProto;
function initProps(u, _, T, E = !1) {
	let D = {}, O = createInternalObject();
	for (let T in u.propsDefaults = /* @__PURE__ */ Object.create(null), setFullProps(u, _, D, O), u.propsOptions[0]) T in D || (D[T] = void 0);
	T ? u.props = E ? D : shallowReactive(D) : u.type.props ? u.props = D : u.props = O, u.attrs = O;
}
function updateProps(u, _, T, E) {
	let { props: D, attrs: O, vnode: { patchFlag: A } } = u, j = toRaw(D), [M] = u.propsOptions, P = !1;
	if ((E || A > 0) && !(A & 16)) {
		if (A & 8) {
			let T = u.vnode.dynamicProps;
			for (let E = 0; E < T.length; E++) {
				let A = T[E];
				if (isEmitListener(u.emitsOptions, A)) continue;
				let F = _[A];
				if (M) if (hasOwn$2(O, A)) F !== O[A] && (O[A] = F, P = !0);
				else {
					let _ = camelize$2(A);
					D[_] = resolvePropValue(M, j, _, F, u, !1);
				}
				else F !== O[A] && (O[A] = F, P = !0);
			}
		}
	} else {
		setFullProps(u, _, D, O) && (P = !0);
		let E;
		for (let O in j) (!_ || !hasOwn$2(_, O) && ((E = hyphenate$2(O)) === O || !hasOwn$2(_, E))) && (M ? T && (T[O] !== void 0 || T[E] !== void 0) && (D[O] = resolvePropValue(M, j, O, void 0, u, !0)) : delete D[O]);
		if (O !== j) for (let u in O) (!_ || !hasOwn$2(_, u)) && (delete O[u], P = !0);
	}
	P && trigger(u.attrs, "set", "");
}
function setFullProps(u, _, T, D) {
	let [O, A] = u.propsOptions, j = !1, M;
	if (_) for (let E in _) {
		if (isReservedProp(E)) continue;
		let P = _[E], F;
		O && hasOwn$2(O, F = camelize$2(E)) ? !A || !A.includes(F) ? T[F] = P : (M ||= {})[F] = P : isEmitListener(u.emitsOptions, E) || (!(E in D) || P !== D[E]) && (D[E] = P, j = !0);
	}
	if (A) {
		let _ = toRaw(T), D = M || EMPTY_OBJ;
		for (let E = 0; E < A.length; E++) {
			let j = A[E];
			T[j] = resolvePropValue(O, _, j, D[j], u, !hasOwn$2(D, j));
		}
	}
	return j;
}
function resolvePropValue(u, _, T, E, D, O) {
	let A = u[T];
	if (A != null) {
		let u = hasOwn$2(A, "default");
		if (u && E === void 0) {
			let u = A.default;
			if (A.type !== Function && !A.skipFactory && isFunction(u)) {
				let { propsDefaults: O } = D;
				if (T in O) E = O[T];
				else {
					let A = setCurrentInstance(D);
					E = O[T] = u.call(null, _), A();
				}
			} else E = u;
			D.ce && D.ce._setProp(T, E);
		}
		A[0] && (O && !u ? E = !1 : A[1] && (E === "" || E === hyphenate$2(T)) && (E = !0));
	}
	return E;
}
var mixinPropsCache = /* @__PURE__ */ new WeakMap();
function normalizePropsOptions(u, _, T = !1) {
	let O = T ? mixinPropsCache : _.propsCache, A = O.get(u);
	if (A) return A;
	let j = u.props, M = {}, F = [], I = !1;
	if (!isFunction(u)) {
		let E = (u) => {
			I = !0;
			let [T, E] = normalizePropsOptions(u, _, !0);
			extend(M, T), E && F.push(...E);
		};
		!T && _.mixins.length && _.mixins.forEach(E), u.extends && E(u.extends), u.mixins && u.mixins.forEach(E);
	}
	if (!j && !I) return isObject$2(u) && O.set(u, EMPTY_ARR), EMPTY_ARR;
	if (isArray(j)) for (let u = 0; u < j.length; u++) {
		let _ = camelize$2(j[u]);
		validatePropName(_) && (M[_] = EMPTY_OBJ);
	}
	else if (j) for (let u in j) {
		let _ = camelize$2(u);
		if (validatePropName(_)) {
			let T = j[u], E = M[_] = isArray(T) || isFunction(T) ? { type: T } : extend({}, T), D = E.type, O = !1, A = !0;
			if (isArray(D)) for (let u = 0; u < D.length; ++u) {
				let _ = D[u], T = isFunction(_) && _.name;
				if (T === "Boolean") {
					O = !0;
					break;
				} else T === "String" && (A = !1);
			}
			else O = isFunction(D) && D.name === "Boolean";
			E[0] = O, E[1] = A, (O || hasOwn$2(E, "default")) && F.push(_);
		}
	}
	let z = [M, F];
	return isObject$2(u) && O.set(u, z), z;
}
function validatePropName(u) {
	return u[0] !== "$" && !isReservedProp(u);
}
var isInternalKey = (u) => u === "_" || u === "_ctx" || u === "$stable", normalizeSlotValue = (u) => isArray(u) ? u.map(normalizeVNode) : [normalizeVNode(u)], normalizeSlot = (u, _, T) => {
	if (_._n) return _;
	let E = withCtx((...u) => normalizeSlotValue(_(...u)), T);
	return E._c = !1, E;
}, normalizeObjectSlots = (u, _, T) => {
	let E = u._ctx;
	for (let T in u) {
		if (isInternalKey(T)) continue;
		let D = u[T];
		if (isFunction(D)) _[T] = normalizeSlot(T, D, E);
		else if (D != null) {
			let u = normalizeSlotValue(D);
			_[T] = () => u;
		}
	}
}, normalizeVNodeSlots = (u, _) => {
	let T = normalizeSlotValue(_);
	u.slots.default = () => T;
}, assignSlots = (u, _, T) => {
	for (let E in _) (T || !isInternalKey(E)) && (u[E] = _[E]);
}, initSlots = (u, _, T) => {
	let E = u.slots = createInternalObject();
	if (u.vnode.shapeFlag & 32) {
		let u = _._;
		u ? (assignSlots(E, _, T), T && def(E, "_", u, !0)) : normalizeObjectSlots(_, E);
	} else _ && normalizeVNodeSlots(u, _);
}, updateSlots = (u, _, T) => {
	let { vnode: D, slots: O } = u, A = !0, j = EMPTY_OBJ;
	if (D.shapeFlag & 32) {
		let u = _._;
		u ? T && u === 1 ? A = !1 : assignSlots(O, _, T) : (A = !_.$stable, normalizeObjectSlots(_, O)), j = _;
	} else _ && (normalizeVNodeSlots(u, _), j = { default: 1 });
	if (A) for (let u in O) !isInternalKey(u) && j[u] == null && delete O[u];
}, queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(u) {
	return baseCreateRenderer(u);
}
function createHydrationRenderer(u) {
	return baseCreateRenderer(u, createHydrationFunctions);
}
function baseCreateRenderer(u, _) {
	let T = getGlobalThis();
	T.__VUE__ = !0;
	let { insert: A, remove: j, patchProp: M, createElement: P, createText: F, createComment: I, setText: L, setElementText: R, parentNode: z, nextSibling: B, setScopeId: V = NOOP, insertStaticContent: H } = u, Zd = (u, _, T, E = null, D = null, O = null, A = void 0, j = null, M = !!_.dynamicChildren) => {
		if (u === _) return;
		u && !isSameVNodeType(u, _) && (E = Tf(u), xf(u, D, O, !0), u = null), _.patchFlag === -2 && (M = !1, _.dynamicChildren = null);
		let { type: P, ref: F, shapeFlag: I } = _;
		switch (P) {
			case Text:
				U(u, _, T, E);
				break;
			case Comment:
				G(u, _, T, E);
				break;
			case Static:
				u ?? K(_, T, E, A);
				break;
			case Fragment:
				lf(u, _, T, E, D, O, A, j, M);
				break;
			default: I & 1 ? ef(u, _, T, E, D, O, A, j, M) : I & 6 ? uf(u, _, T, E, D, O, A, j, M) : (I & 64 || I & 128) && P.process(u, _, T, E, D, O, A, j, M, Of);
		}
		F != null && D ? setRef(F, u && u.ref, O, _ || u, !_) : F == null && u && u.ref != null && setRef(u.ref, null, O, u, !0);
	}, U = (u, _, T, E) => {
		if (u == null) A(_.el = F(_.children), T, E);
		else {
			let T = _.el = u.el;
			_.children !== u.children && L(T, _.children);
		}
	}, G = (u, _, T, E) => {
		u == null ? A(_.el = I(_.children || ""), T, E) : _.el = u.el;
	}, K = (u, _, T, E) => {
		[u.el, u.anchor] = H(u.children, _, T, E, u.el, u.anchor);
	}, Qd = ({ el: u, anchor: _ }, T, E) => {
		let D;
		for (; u && u !== _;) D = B(u), A(u, T, E), u = D;
		A(_, T, E);
	}, $d = ({ el: u, anchor: _ }) => {
		let T;
		for (; u && u !== _;) T = B(u), j(u), u = T;
		j(_);
	}, ef = (u, _, T, E, D, O, A, j, M) => {
		_.type === "svg" ? A = "svg" : _.type === "math" && (A = "mathml"), u == null ? tf(_, T, E, D, O, A, j, M) : of(u, _, D, O, A, j, M);
	}, tf = (u, _, T, E, D, O, j, F) => {
		let I, L, { props: z, shapeFlag: B, transition: V, dirs: H } = u;
		if (I = u.el = P(u.type, O, z && z.is, z), B & 8 ? R(I, u.children) : B & 16 && rf(u.children, I, null, E, D, resolveChildrenNamespace(u, O), j, F), H && invokeDirectiveHook(u, null, E, "created"), nf(I, u, u.scopeId, j, E), z) {
			for (let u in z) u !== "value" && !isReservedProp(u) && M(I, u, null, z[u], O, E);
			"value" in z && M(I, "value", null, z.value, O), (L = z.onVnodeBeforeMount) && invokeVNodeHook(L, E, u);
		}
		H && invokeDirectiveHook(u, null, E, "beforeMount");
		let Zd = needTransition(D, V);
		Zd && V.beforeEnter(I), A(I, _, T), ((L = z && z.onVnodeMounted) || Zd || H) && queuePostRenderEffect(() => {
			L && invokeVNodeHook(L, E, u), Zd && V.enter(I), H && invokeDirectiveHook(u, null, E, "mounted");
		}, D);
	}, nf = (u, _, T, E, D) => {
		if (T && V(u, T), E) for (let _ = 0; _ < E.length; _++) V(u, E[_]);
		if (D) {
			let T = D.subTree;
			if (_ === T || isSuspense(T.type) && (T.ssContent === _ || T.ssFallback === _)) {
				let _ = D.vnode;
				nf(u, _, _.scopeId, _.slotScopeIds, D.parent);
			}
		}
	}, rf = (u, _, T, E, D, O, A, j, M = 0) => {
		for (let P = M; P < u.length; P++) Zd(null, u[P] = j ? cloneIfMounted(u[P]) : normalizeVNode(u[P]), _, T, E, D, O, A, j);
	}, of = (u, _, T, D, O, A, j) => {
		let P = _.el = u.el, { patchFlag: F, dynamicChildren: I, dirs: L } = _;
		F |= u.patchFlag & 16;
		let z = u.props || EMPTY_OBJ, B = _.props || EMPTY_OBJ, V;
		if (T && toggleRecurse(T, !1), (V = B.onVnodeBeforeUpdate) && invokeVNodeHook(V, T, _, u), L && invokeDirectiveHook(_, u, T, "beforeUpdate"), T && toggleRecurse(T, !0), (z.innerHTML && B.innerHTML == null || z.textContent && B.textContent == null) && R(P, ""), I ? sf(u.dynamicChildren, I, P, T, D, resolveChildrenNamespace(_, O), A) : j || gf(u, _, P, null, T, D, resolveChildrenNamespace(_, O), A, !1), F > 0) {
			if (F & 16) cf(P, z, B, T, O);
			else if (F & 2 && z.class !== B.class && M(P, "class", null, B.class, O), F & 4 && M(P, "style", z.style, B.style, O), F & 8) {
				let u = _.dynamicProps;
				for (let _ = 0; _ < u.length; _++) {
					let E = u[_], D = z[E], A = B[E];
					(A !== D || E === "value") && M(P, E, D, A, O, T);
				}
			}
			F & 1 && u.children !== _.children && R(P, _.children);
		} else !j && I == null && cf(P, z, B, T, O);
		((V = B.onVnodeUpdated) || L) && queuePostRenderEffect(() => {
			V && invokeVNodeHook(V, T, _, u), L && invokeDirectiveHook(_, u, T, "updated");
		}, D);
	}, sf = (u, _, T, E, D, O, A) => {
		for (let j = 0; j < _.length; j++) {
			let M = u[j], P = _[j];
			Zd(M, P, M.el && (M.type === Fragment || !isSameVNodeType(M, P) || M.shapeFlag & 198) ? z(M.el) : T, null, E, D, O, A, !0);
		}
	}, cf = (u, _, T, D, O) => {
		if (_ !== T) {
			if (_ !== EMPTY_OBJ) for (let E in _) !isReservedProp(E) && !(E in T) && M(u, E, _[E], null, O, D);
			for (let E in T) {
				if (isReservedProp(E)) continue;
				let A = T[E], j = _[E];
				A !== j && E !== "value" && M(u, E, j, A, O, D);
			}
			"value" in T && M(u, "value", _.value, T.value, O);
		}
	}, lf = (u, _, T, E, D, O, j, M, P) => {
		let I = _.el = u ? u.el : F(""), L = _.anchor = u ? u.anchor : F(""), { patchFlag: R, dynamicChildren: z, slotScopeIds: B } = _;
		B && (M = M ? M.concat(B) : B), u == null ? (A(I, T, E), A(L, T, E), rf(_.children || [], T, L, D, O, j, M, P)) : R > 0 && R & 64 && z && u.dynamicChildren ? (sf(u.dynamicChildren, z, T, D, O, j, M), (_.key != null || D && _ === D.subTree) && traverseStaticChildren(u, _, !0)) : gf(u, _, T, L, D, O, j, M, P);
	}, uf = (u, _, T, E, D, O, A, j, M) => {
		_.slotScopeIds = j, u == null ? _.shapeFlag & 512 ? D.ctx.activate(_, T, E, A, M) : df(_, T, E, D, O, A, M) : ff(u, _, M);
	}, df = (u, _, T, E, D, O, A) => {
		let j = u.component = createComponentInstance(u, E, D);
		if (isKeepAlive(u) && (j.ctx.renderer = Of), setupComponent(j, !1, A), j.asyncDep) {
			if (D && D.registerDep(j, pf, A), !u.el) {
				let E = j.subTree = createVNode(Comment);
				G(null, E, _, T), u.placeholder = E.el;
			}
		} else pf(j, u, _, T, D, O, A);
	}, ff = (u, _, T) => {
		let E = _.component = u.component;
		if (shouldUpdateComponent(u, _, T)) if (E.asyncDep && !E.asyncResolved) {
			hf(E, _, T);
			return;
		} else E.next = _, E.update();
		else _.el = u.el, E.vnode = _;
	}, pf = (u, _, T, E, D, O, A) => {
		let j = () => {
			if (u.isMounted) {
				let { next: _, bu: T, u: E, parent: M, vnode: P } = u;
				{
					let T = locateNonHydratedAsyncRoot(u);
					if (T) {
						_ && (_.el = P.el, hf(u, _, A)), T.asyncDep.then(() => {
							u.isUnmounted || j();
						});
						return;
					}
				}
				let F = _, I;
				toggleRecurse(u, !1), _ ? (_.el = P.el, hf(u, _, A)) : _ = P, T && invokeArrayFns(T), (I = _.props && _.props.onVnodeBeforeUpdate) && invokeVNodeHook(I, M, _, P), toggleRecurse(u, !0);
				let L = renderComponentRoot(u), R = u.subTree;
				u.subTree = L, Zd(R, L, z(R.el), Tf(R), u, D, O), _.el = L.el, F === null && updateHOCHostEl(u, L.el), E && queuePostRenderEffect(E, D), (I = _.props && _.props.onVnodeUpdated) && queuePostRenderEffect(() => invokeVNodeHook(I, M, _, P), D);
			} else {
				let A, { el: j, props: M } = _, { bm: P, m: F, parent: I, root: L, type: R } = u, z = isAsyncWrapper(_);
				if (toggleRecurse(u, !1), P && invokeArrayFns(P), !z && (A = M && M.onVnodeBeforeMount) && invokeVNodeHook(A, I, _), toggleRecurse(u, !0), j && Af) {
					let _ = () => {
						u.subTree = renderComponentRoot(u), Af(j, u.subTree, u, D, null);
					};
					z && R.__asyncHydrate ? R.__asyncHydrate(j, u, _) : _();
				} else {
					L.ce && L.ce._def.shadowRoot !== !1 && L.ce._injectChildStyle(R);
					let A = u.subTree = renderComponentRoot(u);
					Zd(null, A, T, E, u, D, O), _.el = A.el;
				}
				if (F && queuePostRenderEffect(F, D), !z && (A = M && M.onVnodeMounted)) {
					let u = _;
					queuePostRenderEffect(() => invokeVNodeHook(A, I, u), D);
				}
				(_.shapeFlag & 256 || I && isAsyncWrapper(I.vnode) && I.vnode.shapeFlag & 256) && u.a && queuePostRenderEffect(u.a, D), u.isMounted = !0, _ = T = E = null;
			}
		};
		u.scope.on();
		let M = u.effect = new ReactiveEffect(j);
		u.scope.off();
		let P = u.update = M.run.bind(M), F = u.job = M.runIfDirty.bind(M);
		F.i = u, F.id = u.uid, M.scheduler = () => queueJob(F), toggleRecurse(u, !0), P();
	}, hf = (u, _, T) => {
		_.component = u;
		let E = u.vnode.props;
		u.vnode = _, u.next = null, updateProps(u, _.props, E, T), updateSlots(u, _.children, T), pauseTracking(), flushPreFlushCbs(u), resetTracking();
	}, gf = (u, _, T, E, D, O, A, j, M = !1) => {
		let P = u && u.children, F = u ? u.shapeFlag : 0, I = _.children, { patchFlag: L, shapeFlag: z } = _;
		if (L > 0) {
			if (L & 128) {
				vf(P, I, T, E, D, O, A, j, M);
				return;
			} else if (L & 256) {
				_f(P, I, T, E, D, O, A, j, M);
				return;
			}
		}
		z & 8 ? (F & 16 && wf(P, D, O), I !== P && R(T, I)) : F & 16 ? z & 16 ? vf(P, I, T, E, D, O, A, j, M) : wf(P, D, O, !0) : (F & 8 && R(T, ""), z & 16 && rf(I, T, E, D, O, A, j, M));
	}, _f = (u, _, T, E, O, A, j, M, P) => {
		u ||= EMPTY_ARR, _ ||= EMPTY_ARR;
		let F = u.length, I = _.length, L = Math.min(F, I), R;
		for (R = 0; R < L; R++) {
			let E = _[R] = P ? cloneIfMounted(_[R]) : normalizeVNode(_[R]);
			Zd(u[R], E, T, null, O, A, j, M, P);
		}
		F > I ? wf(u, O, A, !0, !1, L) : rf(_, T, E, O, A, j, M, P, L);
	}, vf = (u, _, T, E, O, A, j, M, P) => {
		let F = 0, I = _.length, L = u.length - 1, R = I - 1;
		for (; F <= L && F <= R;) {
			let E = u[F], D = _[F] = P ? cloneIfMounted(_[F]) : normalizeVNode(_[F]);
			if (isSameVNodeType(E, D)) Zd(E, D, T, null, O, A, j, M, P);
			else break;
			F++;
		}
		for (; F <= L && F <= R;) {
			let E = u[L], D = _[R] = P ? cloneIfMounted(_[R]) : normalizeVNode(_[R]);
			if (isSameVNodeType(E, D)) Zd(E, D, T, null, O, A, j, M, P);
			else break;
			L--, R--;
		}
		if (F > L) {
			if (F <= R) {
				let u = R + 1, D = u < I ? _[u].el : E;
				for (; F <= R;) Zd(null, _[F] = P ? cloneIfMounted(_[F]) : normalizeVNode(_[F]), T, D, O, A, j, M, P), F++;
			}
		} else if (F > R) for (; F <= L;) xf(u[F], O, A, !0), F++;
		else {
			let z = F, B = F, V = /* @__PURE__ */ new Map();
			for (F = B; F <= R; F++) {
				let u = _[F] = P ? cloneIfMounted(_[F]) : normalizeVNode(_[F]);
				u.key != null && V.set(u.key, F);
			}
			let H, U = 0, G = R - B + 1, K = !1, Qd = 0, $d = Array(G);
			for (F = 0; F < G; F++) $d[F] = 0;
			for (F = z; F <= L; F++) {
				let E = u[F];
				if (U >= G) {
					xf(E, O, A, !0);
					continue;
				}
				let D;
				if (E.key != null) D = V.get(E.key);
				else for (H = B; H <= R; H++) if ($d[H - B] === 0 && isSameVNodeType(E, _[H])) {
					D = H;
					break;
				}
				D === void 0 ? xf(E, O, A, !0) : ($d[D - B] = F + 1, D >= Qd ? Qd = D : K = !0, Zd(E, _[D], T, null, O, A, j, M, P), U++);
			}
			let ef = K ? getSequence($d) : EMPTY_ARR;
			for (H = ef.length - 1, F = G - 1; F >= 0; F--) {
				let u = B + F, D = _[u], L = _[u + 1], R = u + 1 < I ? L.el || L.placeholder : E;
				$d[F] === 0 ? Zd(null, D, T, R, O, A, j, M, P) : K && (H < 0 || F !== ef[H] ? bf(D, T, R, 2) : H--);
			}
		}
	}, bf = (u, _, T, E, D = null) => {
		let { el: O, type: M, transition: P, children: F, shapeFlag: I } = u;
		if (I & 6) {
			bf(u.component.subTree, _, T, E);
			return;
		}
		if (I & 128) {
			u.suspense.move(_, T, E);
			return;
		}
		if (I & 64) {
			M.move(u, _, T, Of);
			return;
		}
		if (M === Fragment) {
			A(O, _, T);
			for (let u = 0; u < F.length; u++) bf(F[u], _, T, E);
			A(u.anchor, _, T);
			return;
		}
		if (M === Static) {
			Qd(u, _, T);
			return;
		}
		if (E !== 2 && I & 1 && P) if (E === 0) P.beforeEnter(O), A(O, _, T), queuePostRenderEffect(() => P.enter(O), D);
		else {
			let { leave: E, delayLeave: D, afterLeave: M } = P, F = () => {
				u.ctx.isUnmounted ? j(O) : A(O, _, T);
			}, I = () => {
				O._isLeaving && O[leaveCbKey](!0), E(O, () => {
					F(), M && M();
				});
			};
			D ? D(O, F, I) : I();
		}
		else A(O, _, T);
	}, xf = (u, _, T, E = !1, D = !1) => {
		let { type: O, props: A, ref: j, children: M, dynamicChildren: P, shapeFlag: F, patchFlag: I, dirs: L, cacheIndex: R } = u;
		if (I === -2 && (D = !1), j != null && (pauseTracking(), setRef(j, null, T, u, !0), resetTracking()), R != null && (_.renderCache[R] = void 0), F & 256) {
			_.ctx.deactivate(u);
			return;
		}
		let z = F & 1 && L, B = !isAsyncWrapper(u), V;
		if (B && (V = A && A.onVnodeBeforeUnmount) && invokeVNodeHook(V, _, u), F & 6) Cf(u.component, T, E);
		else {
			if (F & 128) {
				u.suspense.unmount(T, E);
				return;
			}
			z && invokeDirectiveHook(u, null, _, "beforeUnmount"), F & 64 ? u.type.remove(u, _, T, Of, E) : P && !P.hasOnce && (O !== Fragment || I > 0 && I & 64) ? wf(P, _, T, !1, !0) : (O === Fragment && I & 384 || !D && F & 16) && wf(M, _, T), E && Sf(u);
		}
		(B && (V = A && A.onVnodeUnmounted) || z) && queuePostRenderEffect(() => {
			V && invokeVNodeHook(V, _, u), z && invokeDirectiveHook(u, null, _, "unmounted");
		}, T);
	}, Sf = (u) => {
		let { type: _, el: T, anchor: E, transition: D } = u;
		if (_ === Fragment) {
			J(T, E);
			return;
		}
		if (_ === Static) {
			$d(u);
			return;
		}
		let O = () => {
			j(T), D && !D.persisted && D.afterLeave && D.afterLeave();
		};
		if (u.shapeFlag & 1 && D && !D.persisted) {
			let { leave: _, delayLeave: E } = D, A = () => _(T, O);
			E ? E(u.el, O, A) : A();
		} else O();
	}, J = (u, _) => {
		let T;
		for (; u !== _;) T = B(u), j(u), u = T;
		j(_);
	}, Cf = (u, _, T) => {
		let { bum: E, scope: D, job: O, subTree: A, um: j, m: M, a: P } = u;
		invalidateMount(M), invalidateMount(P), E && invokeArrayFns(E), D.stop(), O && (O.flags |= 8, xf(A, u, _, T)), j && queuePostRenderEffect(j, _), queuePostRenderEffect(() => {
			u.isUnmounted = !0;
		}, _);
	}, wf = (u, _, T, E = !1, D = !1, O = 0) => {
		for (let A = O; A < u.length; A++) xf(u[A], _, T, E, D);
	}, Tf = (u) => {
		if (u.shapeFlag & 6) return Tf(u.component.subTree);
		if (u.shapeFlag & 128) return u.suspense.next();
		let _ = B(u.anchor || u.el), T = _ && _[TeleportEndKey];
		return T ? B(T) : _;
	}, Ef = !1, Df = (u, _, T) => {
		u == null ? _._vnode && xf(_._vnode, null, null, !0) : Zd(_._vnode || null, u, _, null, null, null, T), _._vnode = u, Ef ||= (Ef = !0, flushPreFlushCbs(), flushPostFlushCbs(), !1);
	}, Of = {
		p: Zd,
		um: xf,
		m: bf,
		r: Sf,
		mt: df,
		mc: rf,
		pc: gf,
		pbc: sf,
		n: Tf,
		o: u
	}, kf, Af;
	return _ && ([kf, Af] = _(Of)), {
		render: Df,
		hydrate: kf,
		createApp: createAppAPI(Df, kf)
	};
}
function resolveChildrenNamespace({ type: u, props: _ }, T) {
	return T === "svg" && u === "foreignObject" || T === "mathml" && u === "annotation-xml" && _ && _.encoding && _.encoding.includes("html") ? void 0 : T;
}
function toggleRecurse({ effect: u, job: _ }, T) {
	T ? (u.flags |= 32, _.flags |= 4) : (u.flags &= -33, _.flags &= -5);
}
function needTransition(u, _) {
	return (!u || u && !u.pendingBranch) && _ && !_.persisted;
}
function traverseStaticChildren(u, _, T = !1) {
	let E = u.children, D = _.children;
	if (isArray(E) && isArray(D)) for (let u = 0; u < E.length; u++) {
		let _ = E[u], O = D[u];
		O.shapeFlag & 1 && !O.dynamicChildren && ((O.patchFlag <= 0 || O.patchFlag === 32) && (O = D[u] = cloneIfMounted(D[u]), O.el = _.el), !T && O.patchFlag !== -2 && traverseStaticChildren(_, O)), O.type === Text && O.patchFlag !== -1 && (O.el = _.el), O.type === Comment && !O.el && (O.el = _.el);
	}
}
function getSequence(u) {
	let _ = u.slice(), T = [0], E, D, O, A, j, M = u.length;
	for (E = 0; E < M; E++) {
		let M = u[E];
		if (M !== 0) {
			if (D = T[T.length - 1], u[D] < M) {
				_[E] = D, T.push(E);
				continue;
			}
			for (O = 0, A = T.length - 1; O < A;) j = O + A >> 1, u[T[j]] < M ? O = j + 1 : A = j;
			M < u[T[O]] && (O > 0 && (_[E] = T[O - 1]), T[O] = E);
		}
	}
	for (O = T.length, A = T[O - 1]; O-- > 0;) T[O] = A, A = _[A];
	return T;
}
function locateNonHydratedAsyncRoot(u) {
	let _ = u.subTree.component;
	if (_) return _.asyncDep && !_.asyncResolved ? _ : locateNonHydratedAsyncRoot(_);
}
function invalidateMount(u) {
	if (u) for (let _ = 0; _ < u.length; _++) u[_].flags |= 8;
}
var ssrContextKey = Symbol.for("v-scx"), useSSRContext = () => inject(ssrContextKey);
function watchEffect(u, _) {
	return doWatch(u, null, _);
}
function watchPostEffect(u, _) {
	return doWatch(u, null, { flush: "post" });
}
function watchSyncEffect(u, _) {
	return doWatch(u, null, { flush: "sync" });
}
function watch(u, _, T) {
	return doWatch(u, _, T);
}
function doWatch(u, _, T = EMPTY_OBJ) {
	let { immediate: D, deep: A, flush: j, once: M } = T, F = extend({}, T), I = _ && D || !_ && j !== "post", L;
	if (isInSSRComponentSetup) {
		if (j === "sync") {
			let u = useSSRContext();
			L = u.__watcherHandles ||= [];
		} else if (!I) {
			let u = () => {};
			return u.stop = NOOP, u.resume = NOOP, u.pause = NOOP, u;
		}
	}
	let R = currentInstance;
	F.call = (u, _, T) => callWithAsyncErrorHandling(u, R, _, T);
	let z = !1;
	j === "post" ? F.scheduler = (u) => {
		queuePostRenderEffect(u, R && R.suspense);
	} : j !== "sync" && (z = !0, F.scheduler = (u, _) => {
		_ ? u() : queueJob(u);
	}), F.augmentJob = (u) => {
		_ && (u.flags |= 4), z && (u.flags |= 2, R && (u.id = R.uid, u.i = R));
	};
	let B = watch$1(u, _, F);
	return isInSSRComponentSetup && (L ? L.push(B) : I && B()), B;
}
function instanceWatch(u, _, T) {
	let E = this.proxy, D = isString(u) ? u.includes(".") ? createPathGetter(E, u) : () => E[u] : u.bind(E, E), O;
	isFunction(_) ? O = _ : (O = _.handler, T = _);
	let A = setCurrentInstance(this), j = doWatch(D, O.bind(E), T);
	return A(), j;
}
function createPathGetter(u, _) {
	let T = _.split(".");
	return () => {
		let _ = u;
		for (let u = 0; u < T.length && _; u++) _ = _[T[u]];
		return _;
	};
}
function useModel(u, _, T = EMPTY_OBJ) {
	let D = getCurrentInstance(), O = camelize$2(_), A = hyphenate$2(_), j = getModelModifiers(u, O), M = customRef((j, M) => {
		let P, F = EMPTY_OBJ, I;
		return watchSyncEffect(() => {
			let _ = u[O];
			hasChanged(P, _) && (P = _, M());
		}), {
			get() {
				return j(), T.get ? T.get(P) : P;
			},
			set(u) {
				let j = T.set ? T.set(u) : u;
				if (!hasChanged(j, P) && !(F !== EMPTY_OBJ && hasChanged(u, F))) return;
				let L = D.vnode.props;
				L && (_ in L || O in L || A in L) && (`onUpdate:${_}` in L || `onUpdate:${O}` in L || `onUpdate:${A}` in L) || (P = u, M()), D.emit(`update:${_}`, j), hasChanged(u, j) && hasChanged(u, F) && !hasChanged(j, I) && M(), F = u, I = j;
			}
		};
	});
	return M[Symbol.iterator] = () => {
		let u = 0;
		return { next() {
			return u < 2 ? {
				value: u++ ? j || EMPTY_OBJ : M,
				done: !1
			} : { done: !0 };
		} };
	}, M;
}
var getModelModifiers = (u, _) => _ === "modelValue" || _ === "model-value" ? u.modelModifiers : u[`${_}Modifiers`] || u[`${camelize$2(_)}Modifiers`] || u[`${hyphenate$2(_)}Modifiers`];
function emit(u, _, ...T) {
	if (u.isUnmounted) return;
	let D = u.vnode.props || EMPTY_OBJ, O = T, A = _.startsWith("update:"), j = A && getModelModifiers(D, _.slice(7));
	j && (j.trim && (O = T.map((u) => isString(u) ? u.trim() : u)), j.number && (O = T.map(looseToNumber)));
	let M, P = D[M = toHandlerKey(_)] || D[M = toHandlerKey(camelize$2(_))];
	!P && A && (P = D[M = toHandlerKey(hyphenate$2(_))]), P && callWithAsyncErrorHandling(P, u, 6, O);
	let F = D[M + "Once"];
	if (F) {
		if (!u.emitted) u.emitted = {};
		else if (u.emitted[M]) return;
		u.emitted[M] = !0, callWithAsyncErrorHandling(F, u, 6, O);
	}
}
var mixinEmitsCache = /* @__PURE__ */ new WeakMap();
function normalizeEmitsOptions(u, _, T = !1) {
	let E = T ? mixinEmitsCache : _.emitsCache, D = E.get(u);
	if (D !== void 0) return D;
	let O = u.emits, A = {}, j = !1;
	if (!isFunction(u)) {
		let E = (u) => {
			let T = normalizeEmitsOptions(u, _, !0);
			T && (j = !0, extend(A, T));
		};
		!T && _.mixins.length && _.mixins.forEach(E), u.extends && E(u.extends), u.mixins && u.mixins.forEach(E);
	}
	return !O && !j ? (isObject$2(u) && E.set(u, null), null) : (isArray(O) ? O.forEach((u) => A[u] = null) : extend(A, O), isObject$2(u) && E.set(u, A), A);
}
function isEmitListener(u, _) {
	return !u || !isOn(_) ? !1 : (_ = _.slice(2).replace(/Once$/, ""), hasOwn$2(u, _[0].toLowerCase() + _.slice(1)) || hasOwn$2(u, hyphenate$2(_)) || hasOwn$2(u, _));
}
function renderComponentRoot(u) {
	let { type: _, vnode: T, proxy: E, withProxy: D, propsOptions: [O], slots: A, attrs: j, emit: P, render: F, renderCache: I, props: L, data: R, setupState: z, ctx: B, inheritAttrs: V } = u, H = setCurrentRenderingInstance(u), Zd, U;
	try {
		if (T.shapeFlag & 4) {
			let u = D || E, _ = u;
			Zd = normalizeVNode(F.call(_, u, I, L, z, R, B)), U = j;
		} else {
			let u = _;
			Zd = normalizeVNode(u.length > 1 ? u(L, {
				attrs: j,
				slots: A,
				emit: P
			}) : u(L, null)), U = _.props ? j : getFunctionalFallthrough(j);
		}
	} catch (_) {
		blockStack.length = 0, handleError(_, u, 1), Zd = createVNode(Comment);
	}
	let G = Zd;
	if (U && V !== !1) {
		let u = Object.keys(U), { shapeFlag: _ } = G;
		u.length && _ & 7 && (O && u.some(isModelListener) && (U = filterModelListeners(U, O)), G = cloneVNode(G, U, !1, !0));
	}
	return T.dirs && (G = cloneVNode(G, null, !1, !0), G.dirs = G.dirs ? G.dirs.concat(T.dirs) : T.dirs), T.transition && setTransitionHooks(G, T.transition), Zd = G, setCurrentRenderingInstance(H), Zd;
}
function filterSingleRoot(u, _ = !0) {
	let T;
	for (let _ = 0; _ < u.length; _++) {
		let E = u[_];
		if (isVNode(E)) {
			if (E.type !== Comment || E.children === "v-if") {
				if (T) return;
				T = E;
			}
		} else return;
	}
	return T;
}
var getFunctionalFallthrough = (u) => {
	let _;
	for (let T in u) (T === "class" || T === "style" || isOn(T)) && ((_ ||= {})[T] = u[T]);
	return _;
}, filterModelListeners = (u, _) => {
	let T = {};
	for (let E in u) (!isModelListener(E) || !(E.slice(9) in _)) && (T[E] = u[E]);
	return T;
};
function shouldUpdateComponent(u, _, T) {
	let { props: E, children: D, component: O } = u, { props: A, children: j, patchFlag: M } = _, P = O.emitsOptions;
	if (_.dirs || _.transition) return !0;
	if (T && M >= 0) {
		if (M & 1024) return !0;
		if (M & 16) return E ? hasPropsChanged(E, A, P) : !!A;
		if (M & 8) {
			let u = _.dynamicProps;
			for (let _ = 0; _ < u.length; _++) {
				let T = u[_];
				if (A[T] !== E[T] && !isEmitListener(P, T)) return !0;
			}
		}
	} else return (D || j) && (!j || !j.$stable) ? !0 : E === A ? !1 : E ? A ? hasPropsChanged(E, A, P) : !0 : !!A;
	return !1;
}
function hasPropsChanged(u, _, T) {
	let E = Object.keys(_);
	if (E.length !== Object.keys(u).length) return !0;
	for (let D = 0; D < E.length; D++) {
		let O = E[D];
		if (_[O] !== u[O] && !isEmitListener(T, O)) return !0;
	}
	return !1;
}
function updateHOCHostEl({ vnode: u, parent: _ }, T) {
	for (; _;) {
		let E = _.subTree;
		if (E.suspense && E.suspense.activeBranch === u && (E.el = u.el), E === u) (u = _.vnode).el = T, _ = _.parent;
		else break;
	}
}
var isSuspense = (u) => u.__isSuspense, suspenseId = 0, Suspense = {
	name: "Suspense",
	__isSuspense: !0,
	process(u, _, T, E, D, O, A, j, M, P) {
		if (u == null) mountSuspense(_, T, E, D, O, A, j, M, P);
		else {
			if (O && O.deps > 0 && !u.suspense.isInFallback) {
				_.suspense = u.suspense, _.suspense.vnode = _, _.el = u.el;
				return;
			}
			patchSuspense(u, _, T, E, D, A, j, M, P);
		}
	},
	hydrate: hydrateSuspense,
	normalize: normalizeSuspenseChildren
};
function triggerEvent(u, _) {
	let T = u.props && u.props[_];
	isFunction(T) && T();
}
function mountSuspense(u, _, T, E, D, O, A, j, M) {
	let { p: P, o: { createElement: F } } = M, I = F("div"), L = u.suspense = createSuspenseBoundary(u, D, E, _, I, T, O, A, j, M);
	P(null, L.pendingBranch = u.ssContent, I, null, E, L, O, A), L.deps > 0 ? (triggerEvent(u, "onPending"), triggerEvent(u, "onFallback"), P(null, u.ssFallback, _, T, E, null, O, A), setActiveBranch(L, u.ssFallback)) : L.resolve(!1, !0);
}
function patchSuspense(u, _, T, E, D, O, A, j, { p: M, um: P, o: { createElement: F } }) {
	let I = _.suspense = u.suspense;
	I.vnode = _, _.el = u.el;
	let L = _.ssContent, R = _.ssFallback, { activeBranch: z, pendingBranch: B, isInFallback: V, isHydrating: H } = I;
	if (B) I.pendingBranch = L, isSameVNodeType(B, L) ? (M(B, L, I.hiddenContainer, null, D, I, O, A, j), I.deps <= 0 ? I.resolve() : V && (H || (M(z, R, T, E, D, null, O, A, j), setActiveBranch(I, R)))) : (I.pendingId = suspenseId++, H ? (I.isHydrating = !1, I.activeBranch = B) : P(B, D, I), I.deps = 0, I.effects.length = 0, I.hiddenContainer = F("div"), V ? (M(null, L, I.hiddenContainer, null, D, I, O, A, j), I.deps <= 0 ? I.resolve() : (M(z, R, T, E, D, null, O, A, j), setActiveBranch(I, R))) : z && isSameVNodeType(z, L) ? (M(z, L, T, E, D, I, O, A, j), I.resolve(!0)) : (M(null, L, I.hiddenContainer, null, D, I, O, A, j), I.deps <= 0 && I.resolve()));
	else if (z && isSameVNodeType(z, L)) M(z, L, T, E, D, I, O, A, j), setActiveBranch(I, L);
	else if (triggerEvent(_, "onPending"), I.pendingBranch = L, L.shapeFlag & 512 ? I.pendingId = L.component.suspenseId : I.pendingId = suspenseId++, M(null, L, I.hiddenContainer, null, D, I, O, A, j), I.deps <= 0) I.resolve();
	else {
		let { timeout: u, pendingId: _ } = I;
		u > 0 ? setTimeout(() => {
			I.pendingId === _ && I.fallback(R);
		}, u) : u === 0 && I.fallback(R);
	}
}
function createSuspenseBoundary(u, _, T, E, D, O, A, j, M, P, F = !1) {
	let { p: I, m: L, um: R, n: z, o: { parentNode: B, remove: V } } = P, H, Zd = isVNodeSuspensible(u);
	Zd && _ && _.pendingBranch && (H = _.pendingId, _.deps++);
	let U = u.props ? toNumber(u.props.timeout) : void 0, G = O, K = {
		vnode: u,
		parent: _,
		parentComponent: T,
		namespace: A,
		container: E,
		hiddenContainer: D,
		deps: 0,
		pendingId: suspenseId++,
		timeout: typeof U == "number" ? U : -1,
		activeBranch: null,
		pendingBranch: null,
		isInFallback: !F,
		isHydrating: F,
		isUnmounted: !1,
		effects: [],
		resolve(u = !1, T = !1) {
			let { vnode: E, activeBranch: D, pendingBranch: A, pendingId: j, effects: M, parentComponent: P, container: F } = K, I = !1;
			K.isHydrating ? K.isHydrating = !1 : u || (I = D && A.transition && A.transition.mode === "out-in", I && (D.transition.afterLeave = () => {
				j === K.pendingId && (L(A, F, O === G ? z(D) : O, 0), queuePostFlushCb(M));
			}), D && (B(D.el) === F && (O = z(D)), R(D, P, K, !0)), I || L(A, F, O, 0)), setActiveBranch(K, A), K.pendingBranch = null, K.isInFallback = !1;
			let V = K.parent, U = !1;
			for (; V;) {
				if (V.pendingBranch) {
					V.effects.push(...M), U = !0;
					break;
				}
				V = V.parent;
			}
			!U && !I && queuePostFlushCb(M), K.effects = [], Zd && _ && _.pendingBranch && H === _.pendingId && (_.deps--, _.deps === 0 && !T && _.resolve()), triggerEvent(E, "onResolve");
		},
		fallback(u) {
			if (!K.pendingBranch) return;
			let { vnode: _, activeBranch: T, parentComponent: E, container: D, namespace: O } = K;
			triggerEvent(_, "onFallback");
			let A = z(T), P = () => {
				K.isInFallback && (I(null, u, D, A, E, null, O, j, M), setActiveBranch(K, u));
			}, F = u.transition && u.transition.mode === "out-in";
			F && (T.transition.afterLeave = P), K.isInFallback = !0, R(T, E, null, !0), F || P();
		},
		move(u, _, T) {
			K.activeBranch && L(K.activeBranch, u, _, T), K.container = u;
		},
		next() {
			return K.activeBranch && z(K.activeBranch);
		},
		registerDep(u, _, T) {
			let E = !!K.pendingBranch;
			E && K.deps++;
			let D = u.vnode.el;
			u.asyncDep.catch((_) => {
				handleError(_, u, 0);
			}).then((O) => {
				if (u.isUnmounted || K.isUnmounted || K.pendingId !== u.suspenseId) return;
				u.asyncResolved = !0;
				let { vnode: j } = u;
				handleSetupResult(u, O, !1), D && (j.el = D);
				let M = !D && u.subTree.el;
				_(u, j, B(D || u.subTree.el), D ? null : z(u.subTree), K, A, T), M && V(M), updateHOCHostEl(u, j.el), E && --K.deps === 0 && K.resolve();
			});
		},
		unmount(u, _) {
			K.isUnmounted = !0, K.activeBranch && R(K.activeBranch, T, u, _), K.pendingBranch && R(K.pendingBranch, T, u, _);
		}
	};
	return K;
}
function hydrateSuspense(u, _, T, E, D, O, A, j, M) {
	let P = _.suspense = createSuspenseBoundary(_, E, T, u.parentNode, document.createElement("div"), null, D, O, A, j, !0), F = M(u, P.pendingBranch = _.ssContent, T, P, O, A);
	return P.deps === 0 && P.resolve(!1, !0), F;
}
function normalizeSuspenseChildren(u) {
	let { shapeFlag: _, children: T } = u, E = _ & 32;
	u.ssContent = normalizeSuspenseSlot(E ? T.default : T), u.ssFallback = E ? normalizeSuspenseSlot(T.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(u) {
	let _;
	if (isFunction(u)) {
		let T = isBlockTreeEnabled && u._c;
		T && (u._d = !1, openBlock()), u = u(), T && (u._d = !0, _ = currentBlock, closeBlock());
	}
	return isArray(u) && (u = filterSingleRoot(u)), u = normalizeVNode(u), _ && !u.dynamicChildren && (u.dynamicChildren = _.filter((_) => _ !== u)), u;
}
function queueEffectWithSuspense(u, _) {
	_ && _.pendingBranch ? isArray(u) ? _.effects.push(...u) : _.effects.push(u) : queuePostFlushCb(u);
}
function setActiveBranch(u, _) {
	u.activeBranch = _;
	let { vnode: T, parentComponent: E } = u, D = _.el;
	for (; !D && _.component;) _ = _.component.subTree, D = _.el;
	T.el = D, E && E.subTree === T && (E.vnode.el = D, updateHOCHostEl(E, D));
}
function isVNodeSuspensible(u) {
	let _ = u.props && u.props.suspensible;
	return _ != null && _ !== !1;
}
var Fragment = Symbol.for("v-fgt"), Text = Symbol.for("v-txt"), Comment = Symbol.for("v-cmt"), Static = Symbol.for("v-stc"), blockStack = [], currentBlock = null;
function openBlock(u = !1) {
	blockStack.push(currentBlock = u ? null : []);
}
function closeBlock() {
	blockStack.pop(), currentBlock = blockStack[blockStack.length - 1] || null;
}
var isBlockTreeEnabled = 1;
function setBlockTracking(u, _ = !1) {
	isBlockTreeEnabled += u, u < 0 && currentBlock && _ && (currentBlock.hasOnce = !0);
}
function setupBlock(u) {
	return u.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null, closeBlock(), isBlockTreeEnabled > 0 && currentBlock && currentBlock.push(u), u;
}
function createElementBlock(u, _, T, E, D, O) {
	return setupBlock(createBaseVNode(u, _, T, E, D, O, !0));
}
function createBlock(u, _, T, E, D) {
	return setupBlock(createVNode(u, _, T, E, D, !0));
}
function isVNode(u) {
	return u ? u.__v_isVNode === !0 : !1;
}
function isSameVNodeType(u, _) {
	return u.type === _.type && u.key === _.key;
}
function transformVNodeArgs(u) {}
var normalizeKey = ({ key: u }) => u ?? null, normalizeRef = ({ ref: u, ref_key: _, ref_for: T }) => (typeof u == "number" && (u = "" + u), u == null ? null : isString(u) || isRef(u) || isFunction(u) ? {
	i: currentRenderingInstance,
	r: u,
	k: _,
	f: !!T
} : u);
function createBaseVNode(u, _ = null, T = null, E = 0, D = null, O = u === Fragment ? 0 : 1, A = !1, j = !1) {
	let M = {
		__v_isVNode: !0,
		__v_skip: !0,
		type: u,
		props: _,
		key: _ && normalizeKey(_),
		ref: _ && normalizeRef(_),
		scopeId: currentScopeId,
		slotScopeIds: null,
		children: T,
		component: null,
		suspense: null,
		ssContent: null,
		ssFallback: null,
		dirs: null,
		transition: null,
		el: null,
		anchor: null,
		target: null,
		targetStart: null,
		targetAnchor: null,
		staticCount: 0,
		shapeFlag: O,
		patchFlag: E,
		dynamicProps: D,
		dynamicChildren: null,
		appContext: null,
		ctx: currentRenderingInstance
	};
	return j ? (normalizeChildren(M, T), O & 128 && u.normalize(M)) : T && (M.shapeFlag |= isString(T) ? 8 : 16), isBlockTreeEnabled > 0 && !A && currentBlock && (M.patchFlag > 0 || O & 6) && M.patchFlag !== 32 && currentBlock.push(M), M;
}
var createVNode = _createVNode;
function _createVNode(u, _ = null, T = null, E = 0, D = null, O = !1) {
	if ((!u || u === NULL_DYNAMIC_COMPONENT) && (u = Comment), isVNode(u)) {
		let E = cloneVNode(u, _, !0);
		return T && normalizeChildren(E, T), isBlockTreeEnabled > 0 && !O && currentBlock && (E.shapeFlag & 6 ? currentBlock[currentBlock.indexOf(u)] = E : currentBlock.push(E)), E.patchFlag = -2, E;
	}
	if (isClassComponent(u) && (u = u.__vccOpts), _) {
		_ = guardReactiveProps(_);
		let { class: u, style: T } = _;
		u && !isString(u) && (_.class = normalizeClass(u)), isObject$2(T) && (isProxy(T) && !isArray(T) && (T = extend({}, T)), _.style = normalizeStyle(T));
	}
	let A = isString(u) ? 1 : isSuspense(u) ? 128 : isTeleport(u) ? 64 : isObject$2(u) ? 4 : isFunction(u) ? 2 : 0;
	return createBaseVNode(u, _, T, E, D, A, O, !0);
}
function guardReactiveProps(u) {
	return u ? isProxy(u) || isInternalObject(u) ? extend({}, u) : u : null;
}
function cloneVNode(u, _, T = !1, E = !1) {
	let { props: D, ref: O, patchFlag: A, children: j, transition: M } = u, P = _ ? mergeProps(D || {}, _) : D, F = {
		__v_isVNode: !0,
		__v_skip: !0,
		type: u.type,
		props: P,
		key: P && normalizeKey(P),
		ref: _ && _.ref ? T && O ? isArray(O) ? O.concat(normalizeRef(_)) : [O, normalizeRef(_)] : normalizeRef(_) : O,
		scopeId: u.scopeId,
		slotScopeIds: u.slotScopeIds,
		children: j,
		target: u.target,
		targetStart: u.targetStart,
		targetAnchor: u.targetAnchor,
		staticCount: u.staticCount,
		shapeFlag: u.shapeFlag,
		patchFlag: _ && u.type !== Fragment ? A === -1 ? 16 : A | 16 : A,
		dynamicProps: u.dynamicProps,
		dynamicChildren: u.dynamicChildren,
		appContext: u.appContext,
		dirs: u.dirs,
		transition: M,
		component: u.component,
		suspense: u.suspense,
		ssContent: u.ssContent && cloneVNode(u.ssContent),
		ssFallback: u.ssFallback && cloneVNode(u.ssFallback),
		placeholder: u.placeholder,
		el: u.el,
		anchor: u.anchor,
		ctx: u.ctx,
		ce: u.ce
	};
	return M && E && setTransitionHooks(F, M.clone(F)), F;
}
function createTextVNode(u = " ", _ = 0) {
	return createVNode(Text, null, u, _);
}
function createStaticVNode(u, _) {
	let T = createVNode(Static, null, u);
	return T.staticCount = _, T;
}
function createCommentVNode(u = "", _ = !1) {
	return _ ? (openBlock(), createBlock(Comment, null, u)) : createVNode(Comment, null, u);
}
function normalizeVNode(u) {
	return u == null || typeof u == "boolean" ? createVNode(Comment) : isArray(u) ? createVNode(Fragment, null, u.slice()) : isVNode(u) ? cloneIfMounted(u) : createVNode(Text, null, String(u));
}
function cloneIfMounted(u) {
	return u.el === null && u.patchFlag !== -1 || u.memo ? u : cloneVNode(u);
}
function normalizeChildren(u, _) {
	let T = 0, { shapeFlag: E } = u;
	if (_ == null) _ = null;
	else if (isArray(_)) T = 16;
	else if (typeof _ == "object") if (E & 65) {
		let T = _.default;
		T && (T._c && (T._d = !1), normalizeChildren(u, T()), T._c && (T._d = !0));
		return;
	} else {
		T = 32;
		let E = _._;
		!E && !isInternalObject(_) ? _._ctx = currentRenderingInstance : E === 3 && currentRenderingInstance && (currentRenderingInstance.slots._ === 1 ? _._ = 1 : (_._ = 2, u.patchFlag |= 1024));
	}
	else isFunction(_) ? (_ = {
		default: _,
		_ctx: currentRenderingInstance
	}, T = 32) : (_ = String(_), E & 64 ? (T = 16, _ = [createTextVNode(_)]) : T = 8);
	u.children = _, u.shapeFlag |= T;
}
function mergeProps(...u) {
	let _ = {};
	for (let T = 0; T < u.length; T++) {
		let E = u[T];
		for (let u in E) if (u === "class") _.class !== E.class && (_.class = normalizeClass([_.class, E.class]));
		else if (u === "style") _.style = normalizeStyle([_.style, E.style]);
		else if (isOn(u)) {
			let T = _[u], D = E[u];
			D && T !== D && !(isArray(T) && T.includes(D)) && (_[u] = T ? [].concat(T, D) : D);
		} else u !== "" && (_[u] = E[u]);
	}
	return _;
}
function invokeVNodeHook(u, _, T, E = null) {
	callWithAsyncErrorHandling(u, _, 7, [T, E]);
}
var emptyAppContext = createAppContext(), uid = 0;
function createComponentInstance(u, _, T) {
	let D = u.type, O = (_ ? _.appContext : u.appContext) || emptyAppContext, A = {
		uid: uid++,
		vnode: u,
		type: D,
		parent: _,
		appContext: O,
		root: null,
		next: null,
		subTree: null,
		effect: null,
		update: null,
		job: null,
		scope: new EffectScope(!0),
		render: null,
		proxy: null,
		exposed: null,
		exposeProxy: null,
		withProxy: null,
		provides: _ ? _.provides : Object.create(O.provides),
		ids: _ ? _.ids : [
			"",
			0,
			0
		],
		accessCache: null,
		renderCache: [],
		components: null,
		directives: null,
		propsOptions: normalizePropsOptions(D, O),
		emitsOptions: normalizeEmitsOptions(D, O),
		emit: null,
		emitted: null,
		propsDefaults: EMPTY_OBJ,
		inheritAttrs: D.inheritAttrs,
		ctx: EMPTY_OBJ,
		data: EMPTY_OBJ,
		props: EMPTY_OBJ,
		attrs: EMPTY_OBJ,
		slots: EMPTY_OBJ,
		refs: EMPTY_OBJ,
		setupState: EMPTY_OBJ,
		setupContext: null,
		suspense: T,
		suspenseId: T ? T.pendingId : 0,
		asyncDep: null,
		asyncResolved: !1,
		isMounted: !1,
		isUnmounted: !1,
		isDeactivated: !1,
		bc: null,
		c: null,
		bm: null,
		m: null,
		bu: null,
		u: null,
		um: null,
		bum: null,
		da: null,
		a: null,
		rtg: null,
		rtc: null,
		ec: null,
		sp: null
	};
	return A.ctx = { _: A }, A.root = _ ? _.root : A, A.emit = emit.bind(null, A), u.ce && u.ce(A), A;
}
var currentInstance = null, getCurrentInstance = () => currentInstance || currentRenderingInstance, internalSetCurrentInstance, setInSSRSetupState;
{
	let u = getGlobalThis(), _ = (_, T) => {
		let E;
		return (E = u[_]) || (E = u[_] = []), E.push(T), (u) => {
			E.length > 1 ? E.forEach((_) => _(u)) : E[0](u);
		};
	};
	internalSetCurrentInstance = _("__VUE_INSTANCE_SETTERS__", (u) => currentInstance = u), setInSSRSetupState = _("__VUE_SSR_SETTERS__", (u) => isInSSRComponentSetup = u);
}
var setCurrentInstance = (u) => {
	let _ = currentInstance;
	return internalSetCurrentInstance(u), u.scope.on(), () => {
		u.scope.off(), internalSetCurrentInstance(_);
	};
}, unsetCurrentInstance = () => {
	currentInstance && currentInstance.scope.off(), internalSetCurrentInstance(null);
};
function isStatefulComponent(u) {
	return u.vnode.shapeFlag & 4;
}
var isInSSRComponentSetup = !1;
function setupComponent(u, _ = !1, T = !1) {
	_ && setInSSRSetupState(_);
	let { props: E, children: D } = u.vnode, O = isStatefulComponent(u);
	initProps(u, E, O, _), initSlots(u, D, T || _);
	let A = O ? setupStatefulComponent(u, _) : void 0;
	return _ && setInSSRSetupState(!1), A;
}
function setupStatefulComponent(u, _) {
	let T = u.type;
	u.accessCache = /* @__PURE__ */ Object.create(null), u.proxy = new Proxy(u.ctx, PublicInstanceProxyHandlers);
	let { setup: E } = T;
	if (E) {
		pauseTracking();
		let T = u.setupContext = E.length > 1 ? createSetupContext(u) : null, D = setCurrentInstance(u), O = callWithErrorHandling(E, u, 0, [u.props, T]), A = isPromise(O);
		if (resetTracking(), D(), (A || u.sp) && !isAsyncWrapper(u) && markAsyncBoundary(u), A) {
			if (O.then(unsetCurrentInstance, unsetCurrentInstance), _) return O.then((T) => {
				handleSetupResult(u, T, _);
			}).catch((_) => {
				handleError(_, u, 0);
			});
			u.asyncDep = O;
		} else handleSetupResult(u, O, _);
	} else finishComponentSetup(u, _);
}
function handleSetupResult(u, _, T) {
	isFunction(_) ? u.type.__ssrInlineRender ? u.ssrRender = _ : u.render = _ : isObject$2(_) && (u.setupState = proxyRefs(_)), finishComponentSetup(u, T);
}
var compile$1, installWithProxy;
function registerRuntimeCompiler(u) {
	compile$1 = u, installWithProxy = (u) => {
		u.render._rc && (u.withProxy = new Proxy(u.ctx, RuntimeCompiledPublicInstanceProxyHandlers));
	};
}
var isRuntimeOnly = () => !compile$1;
function finishComponentSetup(u, _, T) {
	let E = u.type;
	if (!u.render) {
		if (!_ && compile$1 && !E.render) {
			let _ = E.template || resolveMergedOptions(u).template;
			if (_) {
				let { isCustomElement: T, compilerOptions: D } = u.appContext.config, { delimiters: O, compilerOptions: A } = E, j = extend(extend({
					isCustomElement: T,
					delimiters: O
				}, D), A);
				E.render = compile$1(_, j);
			}
		}
		u.render = E.render || NOOP, installWithProxy && installWithProxy(u);
	}
	{
		let _ = setCurrentInstance(u);
		pauseTracking();
		try {
			applyOptions(u);
		} finally {
			resetTracking(), _();
		}
	}
}
var attrsProxyHandlers = { get(u, _) {
	return track(u, "get", ""), u[_];
} };
function createSetupContext(u) {
	return {
		attrs: new Proxy(u.attrs, attrsProxyHandlers),
		slots: u.slots,
		emit: u.emit,
		expose: (_) => {
			u.exposed = _ || {};
		}
	};
}
function getComponentPublicInstance(u) {
	return u.exposed ? u.exposeProxy ||= new Proxy(proxyRefs(markRaw(u.exposed)), {
		get(_, T) {
			if (T in _) return _[T];
			if (T in publicPropertiesMap) return publicPropertiesMap[T](u);
		},
		has(u, _) {
			return _ in u || _ in publicPropertiesMap;
		}
	}) : u.proxy;
}
function getComponentName(u, _ = !0) {
	return isFunction(u) ? u.displayName || u.name : u.name || _ && u.__name;
}
function isClassComponent(u) {
	return isFunction(u) && "__vccOpts" in u;
}
var computed = (u, _) => computed$1(u, _, isInSSRComponentSetup);
function h$5(u, _, T) {
	try {
		setBlockTracking(-1);
		let E = arguments.length;
		return E === 2 ? isObject$2(_) && !isArray(_) ? isVNode(_) ? createVNode(u, null, [_]) : createVNode(u, _) : createVNode(u, null, _) : (E > 3 ? T = Array.prototype.slice.call(arguments, 2) : E === 3 && isVNode(T) && (T = [T]), createVNode(u, _, T));
	} finally {
		setBlockTracking(1);
	}
}
function initCustomFormatter() {
	return;
	function u(_, T, E) {
		let D = _[E];
		if (isArray(D) && D.includes(T) || isObject$2(D) && T in D || _.extends && u(_.extends, T, E) || _.mixins && _.mixins.some((_) => u(_, T, E))) return !0;
	}
}
function withMemo(u, _, T, E) {
	let D = T[E];
	if (D && isMemoSame(D, u)) return D;
	let O = _();
	return O.memo = u.slice(), O.cacheIndex = E, T[E] = O;
}
function isMemoSame(u, _) {
	let T = u.memo;
	if (T.length != _.length) return !1;
	for (let u = 0; u < T.length; u++) if (hasChanged(T[u], _[u])) return !1;
	return isBlockTreeEnabled > 0 && currentBlock && currentBlock.push(u), !0;
}
var version = "3.5.22", warn = NOOP, ErrorTypeStrings = ErrorTypeStrings$1, devtools = devtools$1, setDevtoolsHook = setDevtoolsHook$1, ssrUtils = {
	createComponentInstance,
	setupComponent,
	renderComponentRoot,
	setCurrentRenderingInstance,
	isVNode,
	normalizeVNode,
	getComponentPublicInstance,
	ensureValidVNode,
	pushWarningContext,
	popWarningContext
}, policy = void 0, tt = typeof window < "u" && window.trustedTypes;
if (tt) try {
	policy = /* @__PURE__ */ tt.createPolicy("vue", { createHTML: (u) => u });
} catch {}
var unsafeToTrustedHTML = policy ? (u) => policy.createHTML(u) : (u) => u, svgNS = "http://www.w3.org/2000/svg", mathmlNS = "http://www.w3.org/1998/Math/MathML", doc = typeof document < "u" ? document : null, templateContainer = doc && /* @__PURE__ */ doc.createElement("template"), nodeOps = {
	insert: (u, _, T) => {
		_.insertBefore(u, T || null);
	},
	remove: (u) => {
		let _ = u.parentNode;
		_ && _.removeChild(u);
	},
	createElement: (u, _, T, E) => {
		let D = _ === "svg" ? doc.createElementNS(svgNS, u) : _ === "mathml" ? doc.createElementNS(mathmlNS, u) : T ? doc.createElement(u, { is: T }) : doc.createElement(u);
		return u === "select" && E && E.multiple != null && D.setAttribute("multiple", E.multiple), D;
	},
	createText: (u) => doc.createTextNode(u),
	createComment: (u) => doc.createComment(u),
	setText: (u, _) => {
		u.nodeValue = _;
	},
	setElementText: (u, _) => {
		u.textContent = _;
	},
	parentNode: (u) => u.parentNode,
	nextSibling: (u) => u.nextSibling,
	querySelector: (u) => doc.querySelector(u),
	setScopeId(u, _) {
		u.setAttribute(_, "");
	},
	insertStaticContent(u, _, T, E, D, O) {
		let A = T ? T.previousSibling : _.lastChild;
		if (D && (D === O || D.nextSibling)) for (; _.insertBefore(D.cloneNode(!0), T), !(D === O || !(D = D.nextSibling)););
		else {
			templateContainer.innerHTML = unsafeToTrustedHTML(E === "svg" ? `<svg>${u}</svg>` : E === "mathml" ? `<math>${u}</math>` : u);
			let D = templateContainer.content;
			if (E === "svg" || E === "mathml") {
				let u = D.firstChild;
				for (; u.firstChild;) D.appendChild(u.firstChild);
				D.removeChild(u);
			}
			_.insertBefore(D, T);
		}
		return [A ? A.nextSibling : _.firstChild, T ? T.previousSibling : _.lastChild];
	}
}, TRANSITION = "transition", ANIMATION = "animation", vtcKey = Symbol("_vtc"), DOMTransitionPropsValidators = {
	name: String,
	type: String,
	css: {
		type: Boolean,
		default: !0
	},
	duration: [
		String,
		Number,
		Object
	],
	enterFromClass: String,
	enterActiveClass: String,
	enterToClass: String,
	appearFromClass: String,
	appearActiveClass: String,
	appearToClass: String,
	leaveFromClass: String,
	leaveActiveClass: String,
	leaveToClass: String
}, TransitionPropsValidators = /* @__PURE__ */ extend({}, BaseTransitionPropsValidators, DOMTransitionPropsValidators), Transition = /* @__PURE__ */ ((u) => (u.displayName = "Transition", u.props = TransitionPropsValidators, u))((u, { slots: _ }) => h$5(BaseTransition, resolveTransitionProps(u), _)), callHook = (u, _ = []) => {
	isArray(u) ? u.forEach((u) => u(..._)) : u && u(..._);
}, hasExplicitCallback = (u) => u ? isArray(u) ? u.some((u) => u.length > 1) : u.length > 1 : !1;
function resolveTransitionProps(u) {
	let _ = {};
	for (let T in u) T in DOMTransitionPropsValidators || (_[T] = u[T]);
	if (u.css === !1) return _;
	let { name: T = "v", type: E, duration: D, enterFromClass: O = `${T}-enter-from`, enterActiveClass: A = `${T}-enter-active`, enterToClass: j = `${T}-enter-to`, appearFromClass: M = O, appearActiveClass: F = A, appearToClass: I = j, leaveFromClass: L = `${T}-leave-from`, leaveActiveClass: R = `${T}-leave-active`, leaveToClass: z = `${T}-leave-to` } = u, B = normalizeDuration(D), V = B && B[0], H = B && B[1], { onBeforeEnter: Zd, onEnter: U, onEnterCancelled: G, onLeave: K, onLeaveCancelled: Qd, onBeforeAppear: $d = Zd, onAppear: ef = U, onAppearCancelled: tf = G } = _, nf = (u, _, T, E) => {
		u._enterCancelled = E, removeTransitionClass(u, _ ? I : j), removeTransitionClass(u, _ ? F : A), T && T();
	}, rf = (u, _) => {
		u._isLeaving = !1, removeTransitionClass(u, L), removeTransitionClass(u, z), removeTransitionClass(u, R), _ && _();
	}, af = (u) => (_, T) => {
		let D = u ? ef : U, A = () => nf(_, u, T);
		callHook(D, [_, A]), nextFrame(() => {
			removeTransitionClass(_, u ? M : O), addTransitionClass(_, u ? I : j), hasExplicitCallback(D) || whenTransitionEnds(_, E, V, A);
		});
	};
	return extend(_, {
		onBeforeEnter(u) {
			callHook(Zd, [u]), addTransitionClass(u, O), addTransitionClass(u, A);
		},
		onBeforeAppear(u) {
			callHook($d, [u]), addTransitionClass(u, M), addTransitionClass(u, F);
		},
		onEnter: af(!1),
		onAppear: af(!0),
		onLeave(u, _) {
			u._isLeaving = !0;
			let T = () => rf(u, _);
			addTransitionClass(u, L), u._enterCancelled ? (addTransitionClass(u, R), forceReflow(u)) : (forceReflow(u), addTransitionClass(u, R)), nextFrame(() => {
				u._isLeaving && (removeTransitionClass(u, L), addTransitionClass(u, z), hasExplicitCallback(K) || whenTransitionEnds(u, E, H, T));
			}), callHook(K, [u, T]);
		},
		onEnterCancelled(u) {
			nf(u, !1, void 0, !0), callHook(G, [u]);
		},
		onAppearCancelled(u) {
			nf(u, !0, void 0, !0), callHook(tf, [u]);
		},
		onLeaveCancelled(u) {
			rf(u), callHook(Qd, [u]);
		}
	});
}
function normalizeDuration(u) {
	if (u == null) return null;
	if (isObject$2(u)) return [NumberOf(u.enter), NumberOf(u.leave)];
	{
		let _ = NumberOf(u);
		return [_, _];
	}
}
function NumberOf(u) {
	return toNumber(u);
}
function addTransitionClass(u, _) {
	_.split(/\s+/).forEach((_) => _ && u.classList.add(_)), (u[vtcKey] || (u[vtcKey] = /* @__PURE__ */ new Set())).add(_);
}
function removeTransitionClass(u, _) {
	_.split(/\s+/).forEach((_) => _ && u.classList.remove(_));
	let T = u[vtcKey];
	T && (T.delete(_), T.size || (u[vtcKey] = void 0));
}
function nextFrame(u) {
	requestAnimationFrame(() => {
		requestAnimationFrame(u);
	});
}
var endId = 0;
function whenTransitionEnds(u, _, T, E) {
	let D = u._endId = ++endId, O = () => {
		D === u._endId && E();
	};
	if (T != null) return setTimeout(O, T);
	let { type: A, timeout: j, propCount: M } = getTransitionInfo(u, _);
	if (!A) return E();
	let P = A + "end", F = 0, I = () => {
		u.removeEventListener(P, L), O();
	}, L = (_) => {
		_.target === u && ++F >= M && I();
	};
	setTimeout(() => {
		F < M && I();
	}, j + 1), u.addEventListener(P, L);
}
function getTransitionInfo(u, _) {
	let T = window.getComputedStyle(u), E = (u) => (T[u] || "").split(", "), D = E(`${TRANSITION}Delay`), O = E(`${TRANSITION}Duration`), A = getTimeout(D, O), j = E(`${ANIMATION}Delay`), M = E(`${ANIMATION}Duration`), P = getTimeout(j, M), F = null, I = 0, L = 0;
	_ === TRANSITION ? A > 0 && (F = TRANSITION, I = A, L = O.length) : _ === ANIMATION ? P > 0 && (F = ANIMATION, I = P, L = M.length) : (I = Math.max(A, P), F = I > 0 ? A > P ? TRANSITION : ANIMATION : null, L = F ? F === TRANSITION ? O.length : M.length : 0);
	let R = F === TRANSITION && /\b(?:transform|all)(?:,|$)/.test(E(`${TRANSITION}Property`).toString());
	return {
		type: F,
		timeout: I,
		propCount: L,
		hasTransform: R
	};
}
function getTimeout(u, _) {
	for (; u.length < _.length;) u = u.concat(u);
	return Math.max(..._.map((_, T) => toMs(_) + toMs(u[T])));
}
function toMs(u) {
	return u === "auto" ? 0 : Number(u.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow(u) {
	return (u ? u.ownerDocument : document).body.offsetHeight;
}
function patchClass(u, _, T) {
	let E = u[vtcKey];
	E && (_ = (_ ? [_, ...E] : [...E]).join(" ")), _ == null ? u.removeAttribute("class") : T ? u.setAttribute("class", _) : u.className = _;
}
var vShowOriginalDisplay = Symbol("_vod"), vShowHidden = Symbol("_vsh"), vShow = {
	name: "show",
	beforeMount(u, { value: _ }, { transition: T }) {
		u[vShowOriginalDisplay] = u.style.display === "none" ? "" : u.style.display, T && _ ? T.beforeEnter(u) : setDisplay(u, _);
	},
	mounted(u, { value: _ }, { transition: T }) {
		T && _ && T.enter(u);
	},
	updated(u, { value: _, oldValue: T }, { transition: E }) {
		!_ != !T && (E ? _ ? (E.beforeEnter(u), setDisplay(u, !0), E.enter(u)) : E.leave(u, () => {
			setDisplay(u, !1);
		}) : setDisplay(u, _));
	},
	beforeUnmount(u, { value: _ }) {
		setDisplay(u, _);
	}
};
function setDisplay(u, _) {
	u.style.display = _ ? u[vShowOriginalDisplay] : "none", u[vShowHidden] = !_;
}
function initVShowForSSR() {
	vShow.getSSRProps = ({ value: u }) => {
		if (!u) return { style: { display: "none" } };
	};
}
var CSS_VAR_TEXT = Symbol("");
function useCssVars(u) {
	let _ = getCurrentInstance();
	if (!_) return;
	let T = _.ut = (T = u(_.proxy)) => {
		Array.from(document.querySelectorAll(`[data-v-owner="${_.uid}"]`)).forEach((u) => setVarsOnNode(u, T));
	}, E = () => {
		let E = u(_.proxy);
		_.ce ? setVarsOnNode(_.ce, E) : setVarsOnVNode(_.subTree, E), T(E);
	};
	onBeforeUpdate(() => {
		queuePostFlushCb(E);
	}), onMounted(() => {
		watch(E, NOOP, { flush: "post" });
		let u = new MutationObserver(E);
		u.observe(_.subTree.el.parentNode, { childList: !0 }), onUnmounted(() => u.disconnect());
	});
}
function setVarsOnVNode(u, _) {
	if (u.shapeFlag & 128) {
		let T = u.suspense;
		u = T.activeBranch, T.pendingBranch && !T.isHydrating && T.effects.push(() => {
			setVarsOnVNode(T.activeBranch, _);
		});
	}
	for (; u.component;) u = u.component.subTree;
	if (u.shapeFlag & 1 && u.el) setVarsOnNode(u.el, _);
	else if (u.type === Fragment) u.children.forEach((u) => setVarsOnVNode(u, _));
	else if (u.type === Static) {
		let { el: T, anchor: E } = u;
		for (; T && (setVarsOnNode(T, _), T !== E);) T = T.nextSibling;
	}
}
function setVarsOnNode(u, _) {
	if (u.nodeType === 1) {
		let T = u.style, E = "";
		for (let u in _) {
			let D = normalizeCssVarValue(_[u]);
			T.setProperty(`--${u}`, D), E += `--${u}: ${D};`;
		}
		T[CSS_VAR_TEXT] = E;
	}
}
var displayRE = /(?:^|;)\s*display\s*:/;
function patchStyle(u, _, T) {
	let E = u.style, D = isString(T), O = !1;
	if (T && !D) {
		if (_) if (isString(_)) for (let u of _.split(";")) {
			let _ = u.slice(0, u.indexOf(":")).trim();
			T[_] ?? setStyle(E, _, "");
		}
		else for (let u in _) T[u] ?? setStyle(E, u, "");
		for (let u in T) u === "display" && (O = !0), setStyle(E, u, T[u]);
	} else if (D) {
		if (_ !== T) {
			let u = E[CSS_VAR_TEXT];
			u && (T += ";" + u), E.cssText = T, O = displayRE.test(T);
		}
	} else _ && u.removeAttribute("style");
	vShowOriginalDisplay in u && (u[vShowOriginalDisplay] = O ? E.display : "", u[vShowHidden] && (E.display = "none"));
}
var importantRE = /\s*!important$/;
function setStyle(u, _, T) {
	if (isArray(T)) T.forEach((T) => setStyle(u, _, T));
	else if (T ??= "", _.startsWith("--")) u.setProperty(_, T);
	else {
		let E = autoPrefix(u, _);
		importantRE.test(T) ? u.setProperty(hyphenate$2(E), T.replace(importantRE, ""), "important") : u[E] = T;
	}
}
var prefixes = [
	"Webkit",
	"Moz",
	"ms"
], prefixCache = {};
function autoPrefix(u, _) {
	let T = prefixCache[_];
	if (T) return T;
	let E = camelize$2(_);
	if (E !== "filter" && E in u) return prefixCache[_] = E;
	E = capitalize(E);
	for (let T = 0; T < prefixes.length; T++) {
		let D = prefixes[T] + E;
		if (D in u) return prefixCache[_] = D;
	}
	return _;
}
var xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(u, _, T, E, D, O = isSpecialBooleanAttr(_)) {
	E && _.startsWith("xlink:") ? T == null ? u.removeAttributeNS(xlinkNS, _.slice(6, _.length)) : u.setAttributeNS(xlinkNS, _, T) : T == null || O && !includeBooleanAttr(T) ? u.removeAttribute(_) : u.setAttribute(_, O ? "" : isSymbol(T) ? String(T) : T);
}
function patchDOMProp(u, _, T, E, D) {
	if (_ === "innerHTML" || _ === "textContent") {
		T != null && (u[_] = _ === "innerHTML" ? unsafeToTrustedHTML(T) : T);
		return;
	}
	let O = u.tagName;
	if (_ === "value" && O !== "PROGRESS" && !O.includes("-")) {
		let E = O === "OPTION" ? u.getAttribute("value") || "" : u.value, D = T == null ? u.type === "checkbox" ? "on" : "" : String(T);
		(E !== D || !("_value" in u)) && (u.value = D), T ?? u.removeAttribute(_), u._value = T;
		return;
	}
	let A = !1;
	if (T === "" || T == null) {
		let E = typeof u[_];
		E === "boolean" ? T = includeBooleanAttr(T) : T == null && E === "string" ? (T = "", A = !0) : E === "number" && (T = 0, A = !0);
	}
	try {
		u[_] = T;
	} catch {}
	A && u.removeAttribute(D || _);
}
function addEventListener$1(u, _, T, E) {
	u.addEventListener(_, T, E);
}
function removeEventListener(u, _, T, E) {
	u.removeEventListener(_, T, E);
}
var veiKey = Symbol("_vei");
function patchEvent(u, _, T, E, D = null) {
	let O = u[veiKey] || (u[veiKey] = {}), A = O[_];
	if (E && A) A.value = E;
	else {
		let [T, j] = parseName(_);
		E ? addEventListener$1(u, T, O[_] = createInvoker(E, D), j) : A && (removeEventListener(u, T, A, j), O[_] = void 0);
	}
}
var optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(u) {
	let _;
	if (optionsModifierRE.test(u)) {
		_ = {};
		let T;
		for (; T = u.match(optionsModifierRE);) u = u.slice(0, u.length - T[0].length), _[T[0].toLowerCase()] = !0;
	}
	return [u[2] === ":" ? u.slice(3) : hyphenate$2(u.slice(2)), _];
}
var cachedNow = 0, p$2 = /* @__PURE__ */ Promise.resolve(), getNow = () => cachedNow ||= (p$2.then(() => cachedNow = 0), Date.now());
function createInvoker(u, _) {
	let T = (u) => {
		if (!u._vts) u._vts = Date.now();
		else if (u._vts <= T.attached) return;
		callWithAsyncErrorHandling(patchStopImmediatePropagation(u, T.value), _, 5, [u]);
	};
	return T.value = u, T.attached = getNow(), T;
}
function patchStopImmediatePropagation(u, _) {
	if (isArray(_)) {
		let T = u.stopImmediatePropagation;
		return u.stopImmediatePropagation = () => {
			T.call(u), u._stopped = !0;
		}, _.map((u) => (_) => !_._stopped && u && u(_));
	} else return _;
}
var isNativeOn = (u) => u.charCodeAt(0) === 111 && u.charCodeAt(1) === 110 && u.charCodeAt(2) > 96 && u.charCodeAt(2) < 123, patchProp = (u, _, T, E, D, O) => {
	let A = D === "svg";
	_ === "class" ? patchClass(u, E, A) : _ === "style" ? patchStyle(u, T, E) : isOn(_) ? isModelListener(_) || patchEvent(u, _, T, E, O) : (_[0] === "." ? (_ = _.slice(1), !0) : _[0] === "^" ? (_ = _.slice(1), !1) : shouldSetAsProp(u, _, E, A)) ? (patchDOMProp(u, _, E), !u.tagName.includes("-") && (_ === "value" || _ === "checked" || _ === "selected") && patchAttr(u, _, E, A, O, _ !== "value")) : u._isVueCE && (/[A-Z]/.test(_) || !isString(E)) ? patchDOMProp(u, camelize$2(_), E, O, _) : (_ === "true-value" ? u._trueValue = E : _ === "false-value" && (u._falseValue = E), patchAttr(u, _, E, A));
};
function shouldSetAsProp(u, _, T, E) {
	if (E) return !!(_ === "innerHTML" || _ === "textContent" || _ in u && isNativeOn(_) && isFunction(T));
	if (_ === "spellcheck" || _ === "draggable" || _ === "translate" || _ === "autocorrect" || _ === "form" || _ === "list" && u.tagName === "INPUT" || _ === "type" && u.tagName === "TEXTAREA") return !1;
	if (_ === "width" || _ === "height") {
		let _ = u.tagName;
		if (_ === "IMG" || _ === "VIDEO" || _ === "CANVAS" || _ === "SOURCE") return !1;
	}
	return isNativeOn(_) && isString(T) ? !1 : _ in u;
}
var REMOVAL = {};
/* @__NO_SIDE_EFFECTS__ */
function defineCustomElement(u, _, T) {
	let E = /* @__PURE__ */ defineComponent(u, _);
	isPlainObject$1(E) && (E = extend({}, E, _));
	class D extends VueElement {
		constructor(u) {
			super(E, u, T);
		}
	}
	return D.def = E, D;
}
var defineSSRCustomElement = ((u, _) => /* @__PURE__ */ defineCustomElement(u, _, createSSRApp)), BaseClass = typeof HTMLElement < "u" ? HTMLElement : class {}, VueElement = class u extends BaseClass {
	constructor(u, _ = {}, T = createApp) {
		super(), this._def = u, this._props = _, this._createApp = T, this._isVueCE = !0, this._instance = null, this._app = null, this._nonce = this._def.nonce, this._connected = !1, this._resolved = !1, this._numberProps = null, this._styleChildren = /* @__PURE__ */ new WeakSet(), this._ob = null, this.shadowRoot && T !== createApp ? this._root = this.shadowRoot : u.shadowRoot === !1 ? this._root = this : (this.attachShadow(extend({}, u.shadowRootOptions, { mode: "open" })), this._root = this.shadowRoot);
	}
	connectedCallback() {
		if (!this.isConnected) return;
		!this.shadowRoot && !this._resolved && this._parseSlots(), this._connected = !0;
		let _ = this;
		for (; _ &&= _.parentNode || _.host;) if (_ instanceof u) {
			this._parent = _;
			break;
		}
		this._instance || (this._resolved ? this._mount(this._def) : _ && _._pendingResolve ? this._pendingResolve = _._pendingResolve.then(() => {
			this._pendingResolve = void 0, this._resolveDef();
		}) : this._resolveDef());
	}
	_setParent(u = this._parent) {
		u && (this._instance.parent = u._instance, this._inheritParentContext(u));
	}
	_inheritParentContext(u = this._parent) {
		u && this._app && Object.setPrototypeOf(this._app._context.provides, u._instance.provides);
	}
	disconnectedCallback() {
		this._connected = !1, nextTick(() => {
			this._connected || (this._ob &&= (this._ob.disconnect(), null), this._app && this._app.unmount(), this._instance && (this._instance.ce = void 0), this._app = this._instance = null, this._teleportTargets &&= (this._teleportTargets.clear(), void 0));
		});
	}
	_processMutations(u) {
		for (let _ of u) this._setAttr(_.attributeName);
	}
	_resolveDef() {
		if (this._pendingResolve) return;
		for (let u = 0; u < this.attributes.length; u++) this._setAttr(this.attributes[u].name);
		this._ob = new MutationObserver(this._processMutations.bind(this)), this._ob.observe(this, { attributes: !0 });
		let u = (u, _ = !1) => {
			this._resolved = !0, this._pendingResolve = void 0;
			let { props: T, styles: E } = u, D;
			if (T && !isArray(T)) for (let u in T) {
				let _ = T[u];
				(_ === Number || _ && _.type === Number) && (u in this._props && (this._props[u] = toNumber(this._props[u])), (D ||= /* @__PURE__ */ Object.create(null))[camelize$2(u)] = !0);
			}
			this._numberProps = D, this._resolveProps(u), this.shadowRoot && this._applyStyles(E), this._mount(u);
		}, _ = this._def.__asyncLoader;
		_ ? this._pendingResolve = _().then((_) => {
			_.configureApp = this._def.configureApp, u(this._def = _, !0);
		}) : u(this._def);
	}
	_mount(u) {
		this._app = this._createApp(u), this._inheritParentContext(), u.configureApp && u.configureApp(this._app), this._app._ceVNode = this._createVNode(), this._app.mount(this._root);
		let _ = this._instance && this._instance.exposed;
		if (_) for (let u in _) hasOwn$2(this, u) || Object.defineProperty(this, u, { get: () => unref(_[u]) });
	}
	_resolveProps(u) {
		let { props: _ } = u, T = isArray(_) ? _ : Object.keys(_ || {});
		for (let u of Object.keys(this)) u[0] !== "_" && T.includes(u) && this._setProp(u, this[u]);
		for (let u of T.map(camelize$2)) Object.defineProperty(this, u, {
			get() {
				return this._getProp(u);
			},
			set(_) {
				this._setProp(u, _, !0, !0);
			}
		});
	}
	_setAttr(u) {
		if (u.startsWith("data-v-")) return;
		let _ = this.hasAttribute(u), T = _ ? this.getAttribute(u) : REMOVAL, E = camelize$2(u);
		_ && this._numberProps && this._numberProps[E] && (T = toNumber(T)), this._setProp(E, T, !1, !0);
	}
	_getProp(u) {
		return this._props[u];
	}
	_setProp(u, _, T = !0, E = !1) {
		if (_ !== this._props[u] && (_ === REMOVAL ? delete this._props[u] : (this._props[u] = _, u === "key" && this._app && (this._app._ceVNode.key = _)), E && this._instance && this._update(), T)) {
			let T = this._ob;
			T && (this._processMutations(T.takeRecords()), T.disconnect()), _ === !0 ? this.setAttribute(hyphenate$2(u), "") : typeof _ == "string" || typeof _ == "number" ? this.setAttribute(hyphenate$2(u), _ + "") : _ || this.removeAttribute(hyphenate$2(u)), T && T.observe(this, { attributes: !0 });
		}
	}
	_update() {
		let u = this._createVNode();
		this._app && (u.appContext = this._app._context), render(u, this._root);
	}
	_createVNode() {
		let u = {};
		this.shadowRoot || (u.onVnodeMounted = u.onVnodeUpdated = this._renderSlots.bind(this));
		let _ = createVNode(this._def, extend(u, this._props));
		return this._instance || (_.ce = (u) => {
			this._instance = u, u.ce = this, u.isCE = !0;
			let _ = (u, _) => {
				this.dispatchEvent(new CustomEvent(u, isPlainObject$1(_[0]) ? extend({ detail: _ }, _[0]) : { detail: _ }));
			};
			u.emit = (u, ...T) => {
				_(u, T), hyphenate$2(u) !== u && _(hyphenate$2(u), T);
			}, this._setParent();
		}), _;
	}
	_applyStyles(u, _) {
		if (!u) return;
		if (_) {
			if (_ === this._def || this._styleChildren.has(_)) return;
			this._styleChildren.add(_);
		}
		let T = this._nonce;
		for (let _ = u.length - 1; _ >= 0; _--) {
			let E = document.createElement("style");
			T && E.setAttribute("nonce", T), E.textContent = u[_], this.shadowRoot.prepend(E);
		}
	}
	_parseSlots() {
		let u = this._slots = {}, _;
		for (; _ = this.firstChild;) {
			let T = _.nodeType === 1 && _.getAttribute("slot") || "default";
			(u[T] || (u[T] = [])).push(_), this.removeChild(_);
		}
	}
	_renderSlots() {
		let u = this._getSlots(), _ = this._instance.type.__scopeId;
		for (let T = 0; T < u.length; T++) {
			let E = u[T], D = E.getAttribute("name") || "default", O = this._slots[D], A = E.parentNode;
			if (O) for (let u of O) {
				if (_ && u.nodeType === 1) {
					let T = _ + "-s", E = document.createTreeWalker(u, 1);
					u.setAttribute(T, "");
					let D;
					for (; D = E.nextNode();) D.setAttribute(T, "");
				}
				A.insertBefore(u, E);
			}
			else for (; E.firstChild;) A.insertBefore(E.firstChild, E);
			A.removeChild(E);
		}
	}
	_getSlots() {
		let u = [this];
		return this._teleportTargets && u.push(...this._teleportTargets), u.reduce((u, _) => (u.push(...Array.from(_.querySelectorAll("slot"))), u), []);
	}
	_injectChildStyle(u) {
		this._applyStyles(u.styles, u);
	}
	_removeChildStyle(u) {}
};
function useHost(u) {
	let _ = getCurrentInstance();
	return _ && _.ce || null;
}
function useShadowRoot() {
	let u = useHost();
	return u && u.shadowRoot;
}
function useCssModule(u = "$style") {
	{
		let _ = getCurrentInstance();
		if (!_) return EMPTY_OBJ;
		let T = _.type.__cssModules;
		return T && T[u] || EMPTY_OBJ;
	}
}
var positionMap = /* @__PURE__ */ new WeakMap(), newPositionMap = /* @__PURE__ */ new WeakMap(), moveCbKey = Symbol("_moveCb"), enterCbKey = Symbol("_enterCb"), TransitionGroup = /* @__PURE__ */ ((u) => (delete u.props.mode, u))({
	name: "TransitionGroup",
	props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
		tag: String,
		moveClass: String
	}),
	setup(u, { slots: _ }) {
		let T = getCurrentInstance(), E = useTransitionState(), D, O;
		return onUpdated(() => {
			if (!D.length) return;
			let _ = u.moveClass || `${u.name || "v"}-move`;
			if (!hasCSSTransform(D[0].el, T.vnode.el, _)) {
				D = [];
				return;
			}
			D.forEach(callPendingCbs), D.forEach(recordPosition);
			let E = D.filter(applyTranslation);
			forceReflow(T.vnode.el), E.forEach((u) => {
				let T = u.el, E = T.style;
				addTransitionClass(T, _), E.transform = E.webkitTransform = E.transitionDuration = "";
				let D = T[moveCbKey] = (u) => {
					u && u.target !== T || (!u || u.propertyName.endsWith("transform")) && (T.removeEventListener("transitionend", D), T[moveCbKey] = null, removeTransitionClass(T, _));
				};
				T.addEventListener("transitionend", D);
			}), D = [];
		}), () => {
			let A = toRaw(u), j = resolveTransitionProps(A), M = A.tag || Fragment;
			if (D = [], O) for (let u = 0; u < O.length; u++) {
				let _ = O[u];
				_.el && _.el instanceof Element && (D.push(_), setTransitionHooks(_, resolveTransitionHooks(_, j, E, T)), positionMap.set(_, _.el.getBoundingClientRect()));
			}
			O = _.default ? getTransitionRawChildren(_.default()) : [];
			for (let u = 0; u < O.length; u++) {
				let _ = O[u];
				_.key != null && setTransitionHooks(_, resolveTransitionHooks(_, j, E, T));
			}
			return createVNode(M, null, O);
		};
	}
});
function callPendingCbs(u) {
	let _ = u.el;
	_[moveCbKey] && _[moveCbKey](), _[enterCbKey] && _[enterCbKey]();
}
function recordPosition(u) {
	newPositionMap.set(u, u.el.getBoundingClientRect());
}
function applyTranslation(u) {
	let _ = positionMap.get(u), T = newPositionMap.get(u), E = _.left - T.left, D = _.top - T.top;
	if (E || D) {
		let _ = u.el.style;
		return _.transform = _.webkitTransform = `translate(${E}px,${D}px)`, _.transitionDuration = "0s", u;
	}
}
function hasCSSTransform(u, _, T) {
	let E = u.cloneNode(), D = u[vtcKey];
	D && D.forEach((u) => {
		u.split(/\s+/).forEach((u) => u && E.classList.remove(u));
	}), T.split(/\s+/).forEach((u) => u && E.classList.add(u)), E.style.display = "none";
	let O = _.nodeType === 1 ? _ : _.parentNode;
	O.appendChild(E);
	let { hasTransform: A } = getTransitionInfo(E);
	return O.removeChild(E), A;
}
var getModelAssigner = (u) => {
	let _ = u.props["onUpdate:modelValue"] || !1;
	return isArray(_) ? (u) => invokeArrayFns(_, u) : _;
};
function onCompositionStart(u) {
	u.target.composing = !0;
}
function onCompositionEnd(u) {
	let _ = u.target;
	_.composing && (_.composing = !1, _.dispatchEvent(new Event("input")));
}
var assignKey = Symbol("_assign"), vModelText = {
	created(u, { modifiers: { lazy: _, trim: T, number: E } }, D) {
		u[assignKey] = getModelAssigner(D);
		let O = E || D.props && D.props.type === "number";
		addEventListener$1(u, _ ? "change" : "input", (_) => {
			if (_.target.composing) return;
			let E = u.value;
			T && (E = E.trim()), O && (E = looseToNumber(E)), u[assignKey](E);
		}), T && addEventListener$1(u, "change", () => {
			u.value = u.value.trim();
		}), _ || (addEventListener$1(u, "compositionstart", onCompositionStart), addEventListener$1(u, "compositionend", onCompositionEnd), addEventListener$1(u, "change", onCompositionEnd));
	},
	mounted(u, { value: _ }) {
		u.value = _ ?? "";
	},
	beforeUpdate(u, { value: _, oldValue: T, modifiers: { lazy: E, trim: D, number: O } }, A) {
		if (u[assignKey] = getModelAssigner(A), u.composing) return;
		let j = (O || u.type === "number") && !/^0\d/.test(u.value) ? looseToNumber(u.value) : u.value, M = _ ?? "";
		j !== M && (document.activeElement === u && u.type !== "range" && (E && _ === T || D && u.value.trim() === M) || (u.value = M));
	}
}, vModelCheckbox = {
	deep: !0,
	created(u, _, T) {
		u[assignKey] = getModelAssigner(T), addEventListener$1(u, "change", () => {
			let _ = u._modelValue, T = getValue(u), E = u.checked, D = u[assignKey];
			if (isArray(_)) {
				let u = looseIndexOf(_, T), O = u !== -1;
				if (E && !O) D(_.concat(T));
				else if (!E && O) {
					let T = [..._];
					T.splice(u, 1), D(T);
				}
			} else if (isSet(_)) {
				let u = new Set(_);
				E ? u.add(T) : u.delete(T), D(u);
			} else D(getCheckboxValue(u, E));
		});
	},
	mounted: setChecked,
	beforeUpdate(u, _, T) {
		u[assignKey] = getModelAssigner(T), setChecked(u, _, T);
	}
};
function setChecked(u, { value: _, oldValue: T }, E) {
	u._modelValue = _;
	let D;
	if (isArray(_)) D = looseIndexOf(_, E.props.value) > -1;
	else if (isSet(_)) D = _.has(E.props.value);
	else {
		if (_ === T) return;
		D = looseEqual(_, getCheckboxValue(u, !0));
	}
	u.checked !== D && (u.checked = D);
}
var vModelRadio = {
	created(u, { value: _ }, T) {
		u.checked = looseEqual(_, T.props.value), u[assignKey] = getModelAssigner(T), addEventListener$1(u, "change", () => {
			u[assignKey](getValue(u));
		});
	},
	beforeUpdate(u, { value: _, oldValue: T }, E) {
		u[assignKey] = getModelAssigner(E), _ !== T && (u.checked = looseEqual(_, E.props.value));
	}
}, vModelSelect = {
	deep: !0,
	created(u, { value: _, modifiers: { number: T } }, E) {
		let D = isSet(_);
		addEventListener$1(u, "change", () => {
			let _ = Array.prototype.filter.call(u.options, (u) => u.selected).map((u) => T ? looseToNumber(getValue(u)) : getValue(u));
			u[assignKey](u.multiple ? D ? new Set(_) : _ : _[0]), u._assigning = !0, nextTick(() => {
				u._assigning = !1;
			});
		}), u[assignKey] = getModelAssigner(E);
	},
	mounted(u, { value: _ }) {
		setSelected(u, _);
	},
	beforeUpdate(u, _, T) {
		u[assignKey] = getModelAssigner(T);
	},
	updated(u, { value: _ }) {
		u._assigning || setSelected(u, _);
	}
};
function setSelected(u, _) {
	let T = u.multiple, E = isArray(_);
	if (!(T && !E && !isSet(_))) {
		for (let D = 0, O = u.options.length; D < O; D++) {
			let O = u.options[D], A = getValue(O);
			if (T) if (E) {
				let u = typeof A;
				u === "string" || u === "number" ? O.selected = _.some((u) => String(u) === String(A)) : O.selected = looseIndexOf(_, A) > -1;
			} else O.selected = _.has(A);
			else if (looseEqual(getValue(O), _)) {
				u.selectedIndex !== D && (u.selectedIndex = D);
				return;
			}
		}
		!T && u.selectedIndex !== -1 && (u.selectedIndex = -1);
	}
}
function getValue(u) {
	return "_value" in u ? u._value : u.value;
}
function getCheckboxValue(u, _) {
	let T = _ ? "_trueValue" : "_falseValue";
	return T in u ? u[T] : _;
}
var vModelDynamic = {
	created(u, _, T) {
		callModelHook(u, _, T, null, "created");
	},
	mounted(u, _, T) {
		callModelHook(u, _, T, null, "mounted");
	},
	beforeUpdate(u, _, T, E) {
		callModelHook(u, _, T, E, "beforeUpdate");
	},
	updated(u, _, T, E) {
		callModelHook(u, _, T, E, "updated");
	}
};
function resolveDynamicModel(u, _) {
	switch (u) {
		case "SELECT": return vModelSelect;
		case "TEXTAREA": return vModelText;
		default: switch (_) {
			case "checkbox": return vModelCheckbox;
			case "radio": return vModelRadio;
			default: return vModelText;
		}
	}
}
function callModelHook(u, _, T, E, D) {
	let O = resolveDynamicModel(u.tagName, T.props && T.props.type)[D];
	O && O(u, _, T, E);
}
function initVModelForSSR() {
	vModelText.getSSRProps = ({ value: u }) => ({ value: u }), vModelRadio.getSSRProps = ({ value: u }, _) => {
		if (_.props && looseEqual(_.props.value, u)) return { checked: !0 };
	}, vModelCheckbox.getSSRProps = ({ value: u }, _) => {
		if (isArray(u)) {
			if (_.props && looseIndexOf(u, _.props.value) > -1) return { checked: !0 };
		} else if (isSet(u)) {
			if (_.props && u.has(_.props.value)) return { checked: !0 };
		} else if (u) return { checked: !0 };
	}, vModelDynamic.getSSRProps = (u, _) => {
		if (typeof _.type != "string") return;
		let T = resolveDynamicModel(_.type.toUpperCase(), _.props && _.props.type);
		if (T.getSSRProps) return T.getSSRProps(u, _);
	};
}
var systemModifiers = [
	"ctrl",
	"shift",
	"alt",
	"meta"
], modifierGuards = {
	stop: (u) => u.stopPropagation(),
	prevent: (u) => u.preventDefault(),
	self: (u) => u.target !== u.currentTarget,
	ctrl: (u) => !u.ctrlKey,
	shift: (u) => !u.shiftKey,
	alt: (u) => !u.altKey,
	meta: (u) => !u.metaKey,
	left: (u) => "button" in u && u.button !== 0,
	middle: (u) => "button" in u && u.button !== 1,
	right: (u) => "button" in u && u.button !== 2,
	exact: (u, _) => systemModifiers.some((T) => u[`${T}Key`] && !_.includes(T))
}, withModifiers = (u, _) => {
	let T = u._withMods ||= {}, E = _.join(".");
	return T[E] || (T[E] = ((T, ...E) => {
		for (let u = 0; u < _.length; u++) {
			let E = modifierGuards[_[u]];
			if (E && E(T, _)) return;
		}
		return u(T, ...E);
	}));
}, keyNames = {
	esc: "escape",
	space: " ",
	up: "arrow-up",
	left: "arrow-left",
	right: "arrow-right",
	down: "arrow-down",
	delete: "backspace"
}, withKeys = (u, _) => {
	let T = u._withKeys ||= {}, E = _.join(".");
	return T[E] || (T[E] = ((T) => {
		if (!("key" in T)) return;
		let E = hyphenate$2(T.key);
		if (_.some((u) => u === E || keyNames[u] === E)) return u(T);
	}));
}, rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps), renderer, enabledHydration = !1;
function ensureRenderer() {
	return renderer ||= createRenderer(rendererOptions);
}
function ensureHydrationRenderer() {
	return renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions), enabledHydration = !0, renderer;
}
var render = ((...u) => {
	ensureRenderer().render(...u);
}), hydrate = ((...u) => {
	ensureHydrationRenderer().hydrate(...u);
}), createApp = ((...u) => {
	let _ = ensureRenderer().createApp(...u), { mount: T } = _;
	return _.mount = (u) => {
		let E = normalizeContainer(u);
		if (!E) return;
		let D = _._component;
		!isFunction(D) && !D.render && !D.template && (D.template = E.innerHTML), E.nodeType === 1 && (E.textContent = "");
		let O = T(E, !1, resolveRootNamespace(E));
		return E instanceof Element && (E.removeAttribute("v-cloak"), E.setAttribute("data-v-app", "")), O;
	}, _;
}), createSSRApp = ((...u) => {
	let _ = ensureHydrationRenderer().createApp(...u), { mount: T } = _;
	return _.mount = (u) => {
		let _ = normalizeContainer(u);
		if (_) return T(_, !0, resolveRootNamespace(_));
	}, _;
});
function resolveRootNamespace(u) {
	if (u instanceof SVGElement) return "svg";
	if (typeof MathMLElement == "function" && u instanceof MathMLElement) return "mathml";
}
function normalizeContainer(u) {
	return isString(u) ? document.querySelector(u) : u;
}
var ssrDirectiveInitialized = !1, initDirectivesForSSR = () => {
	ssrDirectiveInitialized || (ssrDirectiveInitialized = !0, initVModelForSSR(), initVShowForSSR());
}, vue_runtime_esm_bundler_exports = /* @__PURE__ */ __export({
	BaseTransition: () => BaseTransition,
	BaseTransitionPropsValidators: () => BaseTransitionPropsValidators,
	Comment: () => Comment,
	DeprecationTypes: () => null,
	EffectScope: () => EffectScope,
	ErrorCodes: () => ErrorCodes,
	ErrorTypeStrings: () => ErrorTypeStrings,
	Fragment: () => Fragment,
	KeepAlive: () => KeepAlive,
	ReactiveEffect: () => ReactiveEffect,
	Static: () => Static,
	Suspense: () => Suspense,
	Teleport: () => Teleport,
	Text: () => Text,
	TrackOpTypes: () => TrackOpTypes,
	Transition: () => Transition,
	TransitionGroup: () => TransitionGroup,
	TriggerOpTypes: () => TriggerOpTypes,
	VueElement: () => VueElement,
	assertNumber: () => assertNumber,
	callWithAsyncErrorHandling: () => callWithAsyncErrorHandling,
	callWithErrorHandling: () => callWithErrorHandling,
	camelize: () => camelize$2,
	capitalize: () => capitalize,
	cloneVNode: () => cloneVNode,
	compatUtils: () => null,
	compile: () => compile,
	computed: () => computed,
	createApp: () => createApp,
	createBlock: () => createBlock,
	createCommentVNode: () => createCommentVNode,
	createElementBlock: () => createElementBlock,
	createElementVNode: () => createBaseVNode,
	createHydrationRenderer: () => createHydrationRenderer,
	createPropsRestProxy: () => createPropsRestProxy,
	createRenderer: () => createRenderer,
	createSSRApp: () => createSSRApp,
	createSlots: () => createSlots,
	createStaticVNode: () => createStaticVNode,
	createTextVNode: () => createTextVNode,
	createVNode: () => createVNode,
	customRef: () => customRef,
	defineAsyncComponent: () => defineAsyncComponent,
	defineComponent: () => defineComponent,
	defineCustomElement: () => defineCustomElement,
	defineEmits: () => defineEmits,
	defineExpose: () => defineExpose,
	defineModel: () => defineModel,
	defineOptions: () => defineOptions,
	defineProps: () => defineProps,
	defineSSRCustomElement: () => defineSSRCustomElement,
	defineSlots: () => defineSlots,
	devtools: () => devtools,
	effect: () => effect,
	effectScope: () => effectScope,
	getCurrentInstance: () => getCurrentInstance,
	getCurrentScope: () => getCurrentScope,
	getCurrentWatcher: () => getCurrentWatcher,
	getTransitionRawChildren: () => getTransitionRawChildren,
	guardReactiveProps: () => guardReactiveProps,
	h: () => h$5,
	handleError: () => handleError,
	hasInjectionContext: () => hasInjectionContext,
	hydrate: () => hydrate,
	hydrateOnIdle: () => hydrateOnIdle,
	hydrateOnInteraction: () => hydrateOnInteraction,
	hydrateOnMediaQuery: () => hydrateOnMediaQuery,
	hydrateOnVisible: () => hydrateOnVisible,
	initCustomFormatter: () => initCustomFormatter,
	initDirectivesForSSR: () => initDirectivesForSSR,
	inject: () => inject,
	isMemoSame: () => isMemoSame,
	isProxy: () => isProxy,
	isReactive: () => isReactive,
	isReadonly: () => isReadonly,
	isRef: () => isRef,
	isRuntimeOnly: () => isRuntimeOnly,
	isShallow: () => isShallow,
	isVNode: () => isVNode,
	markRaw: () => markRaw,
	mergeDefaults: () => mergeDefaults,
	mergeModels: () => mergeModels,
	mergeProps: () => mergeProps,
	nextTick: () => nextTick,
	normalizeClass: () => normalizeClass,
	normalizeProps: () => normalizeProps,
	normalizeStyle: () => normalizeStyle,
	onActivated: () => onActivated,
	onBeforeMount: () => onBeforeMount,
	onBeforeUnmount: () => onBeforeUnmount,
	onBeforeUpdate: () => onBeforeUpdate,
	onDeactivated: () => onDeactivated,
	onErrorCaptured: () => onErrorCaptured,
	onMounted: () => onMounted,
	onRenderTracked: () => onRenderTracked,
	onRenderTriggered: () => onRenderTriggered,
	onScopeDispose: () => onScopeDispose,
	onServerPrefetch: () => onServerPrefetch,
	onUnmounted: () => onUnmounted,
	onUpdated: () => onUpdated,
	onWatcherCleanup: () => onWatcherCleanup,
	openBlock: () => openBlock,
	popScopeId: () => popScopeId,
	provide: () => provide,
	proxyRefs: () => proxyRefs,
	pushScopeId: () => pushScopeId,
	queuePostFlushCb: () => queuePostFlushCb,
	reactive: () => reactive,
	readonly: () => readonly,
	ref: () => ref,
	registerRuntimeCompiler: () => registerRuntimeCompiler,
	render: () => render,
	renderList: () => renderList,
	renderSlot: () => renderSlot,
	resolveComponent: () => resolveComponent,
	resolveDirective: () => resolveDirective,
	resolveDynamicComponent: () => resolveDynamicComponent,
	resolveFilter: () => null,
	resolveTransitionHooks: () => resolveTransitionHooks,
	setBlockTracking: () => setBlockTracking,
	setDevtoolsHook: () => setDevtoolsHook,
	setTransitionHooks: () => setTransitionHooks,
	shallowReactive: () => shallowReactive,
	shallowReadonly: () => shallowReadonly,
	shallowRef: () => shallowRef,
	ssrContextKey: () => ssrContextKey,
	ssrUtils: () => ssrUtils,
	stop: () => stop,
	toDisplayString: () => toDisplayString,
	toHandlerKey: () => toHandlerKey,
	toHandlers: () => toHandlers,
	toRaw: () => toRaw,
	toRef: () => toRef,
	toRefs: () => toRefs,
	toValue: () => toValue,
	transformVNodeArgs: () => transformVNodeArgs,
	triggerRef: () => triggerRef,
	unref: () => unref,
	useAttrs: () => useAttrs,
	useCssModule: () => useCssModule,
	useCssVars: () => useCssVars,
	useHost: () => useHost,
	useId: () => useId$1,
	useModel: () => useModel,
	useSSRContext: () => useSSRContext,
	useShadowRoot: () => useShadowRoot,
	useSlots: () => useSlots,
	useTemplateRef: () => useTemplateRef,
	useTransitionState: () => useTransitionState,
	vModelCheckbox: () => vModelCheckbox,
	vModelDynamic: () => vModelDynamic,
	vModelRadio: () => vModelRadio,
	vModelSelect: () => vModelSelect,
	vModelText: () => vModelText,
	vShow: () => vShow,
	version: () => version,
	warn: () => warn,
	watch: () => watch,
	watchEffect: () => watchEffect,
	watchPostEffect: () => watchPostEffect,
	watchSyncEffect: () => watchSyncEffect,
	withAsyncContext: () => withAsyncContext,
	withCtx: () => withCtx,
	withDefaults: () => withDefaults,
	withDirectives: () => withDirectives,
	withKeys: () => withKeys,
	withMemo: () => withMemo,
	withModifiers: () => withModifiers,
	withScopeId: () => withScopeId
}), compile = () => {}, activePinia, setActivePinia = (u) => activePinia = u, piniaSymbol = Symbol();
function isPlainObject(u) {
	return u && typeof u == "object" && Object.prototype.toString.call(u) === "[object Object]" && typeof u.toJSON != "function";
}
var MutationType;
(function(u) {
	u.direct = "direct", u.patchObject = "patch object", u.patchFunction = "patch function";
})(MutationType ||= {});
var IS_CLIENT = typeof window < "u", _global = /* @__PURE__ */ (() => typeof window == "object" && window.window === window ? window : typeof self == "object" && self.self === self ? self : typeof global == "object" && global.global === global ? global : typeof globalThis == "object" ? globalThis : { HTMLElement: null })();
function bom(u, { autoBom: _ = !1 } = {}) {
	return _ && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(u.type) ? new Blob(["﻿", u], { type: u.type }) : u;
}
function download(u, _, T) {
	let E = new XMLHttpRequest();
	E.open("GET", u), E.responseType = "blob", E.onload = function() {
		saveAs(E.response, _, T);
	}, E.onerror = function() {
		console.error("could not download file");
	}, E.send();
}
function corsEnabled(u) {
	let _ = new XMLHttpRequest();
	_.open("HEAD", u, !1);
	try {
		_.send();
	} catch {}
	return _.status >= 200 && _.status <= 299;
}
function click(u) {
	try {
		u.dispatchEvent(new MouseEvent("click"));
	} catch {
		let _ = new MouseEvent("click", {
			bubbles: !0,
			cancelable: !0,
			view: window,
			detail: 0,
			screenX: 80,
			screenY: 20,
			clientX: 80,
			clientY: 20,
			ctrlKey: !1,
			altKey: !1,
			shiftKey: !1,
			metaKey: !1,
			button: 0,
			relatedTarget: null
		});
		u.dispatchEvent(_);
	}
}
var _navigator = typeof navigator == "object" ? navigator : { userAgent: "" }, isMacOSWebView = /* @__PURE__ */ (() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))(), saveAs = IS_CLIENT ? typeof HTMLAnchorElement < "u" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs : "msSaveOrOpenBlob" in _navigator ? msSaveAs : fileSaverSaveAs : () => {};
function downloadSaveAs(u, _ = "download", T) {
	let E = document.createElement("a");
	E.download = _, E.rel = "noopener", typeof u == "string" ? (E.href = u, E.origin === location.origin ? click(E) : corsEnabled(E.href) ? download(u, _, T) : (E.target = "_blank", click(E))) : (E.href = URL.createObjectURL(u), setTimeout(function() {
		URL.revokeObjectURL(E.href);
	}, 4e4), setTimeout(function() {
		click(E);
	}, 0));
}
function msSaveAs(u, _ = "download", T) {
	if (typeof u == "string") if (corsEnabled(u)) download(u, _, T);
	else {
		let _ = document.createElement("a");
		_.href = u, _.target = "_blank", setTimeout(function() {
			click(_);
		});
	}
	else navigator.msSaveOrOpenBlob(bom(u, T), _);
}
function fileSaverSaveAs(u, _, T, E) {
	if (E ||= open("", "_blank"), E && (E.document.title = E.document.body.innerText = "downloading..."), typeof u == "string") return download(u, _, T);
	let D = u.type === "application/octet-stream", O = /constructor/i.test(String(_global.HTMLElement)) || "safari" in _global, A = /CriOS\/[\d]+/.test(navigator.userAgent);
	if ((A || D && O || isMacOSWebView) && typeof FileReader < "u") {
		let _ = new FileReader();
		_.onloadend = function() {
			let u = _.result;
			if (typeof u != "string") throw E = null, Error("Wrong reader.result type");
			u = A ? u : u.replace(/^data:[^;]*;/, "data:attachment/file;"), E ? E.location.href = u : location.assign(u), E = null;
		}, _.readAsDataURL(u);
	} else {
		let _ = URL.createObjectURL(u);
		E ? E.location.assign(_) : location.href = _, E = null, setTimeout(function() {
			URL.revokeObjectURL(_);
		}, 4e4);
	}
}
var { assign: assign$1 } = Object;
function createPinia() {
	let u = effectScope(!0), _ = u.run(() => ref({})), T = [], E = [], D = markRaw({
		install(u) {
			setActivePinia(D), D._a = u, u.provide(piniaSymbol, D), u.config.globalProperties.$pinia = D, E.forEach((u) => T.push(u)), E = [];
		},
		use(u) {
			return this._a ? T.push(u) : E.push(u), this;
		},
		_p: T,
		_a: null,
		_e: u,
		_s: /* @__PURE__ */ new Map(),
		state: _
	});
	return D;
}
var noop$2 = () => {};
function addSubscription(u, _, T, E = noop$2) {
	u.push(_);
	let D = () => {
		let T = u.indexOf(_);
		T > -1 && (u.splice(T, 1), E());
	};
	return !T && getCurrentScope() && onScopeDispose(D), D;
}
function triggerSubscriptions(u, ..._) {
	u.slice().forEach((u) => {
		u(..._);
	});
}
var fallbackRunWithContext = (u) => u(), ACTION_MARKER = Symbol(), ACTION_NAME = Symbol();
function mergeReactiveObjects(u, _) {
	for (let T in u instanceof Map && _ instanceof Map ? _.forEach((_, T) => u.set(T, _)) : u instanceof Set && _ instanceof Set && _.forEach(u.add, u), _) {
		if (!_.hasOwnProperty(T)) continue;
		let E = _[T], D = u[T];
		isPlainObject(D) && isPlainObject(E) && u.hasOwnProperty(T) && !isRef(E) && !isReactive(E) ? u[T] = mergeReactiveObjects(D, E) : u[T] = E;
	}
	return u;
}
var skipHydrateSymbol = Symbol();
function shouldHydrate(u) {
	return !isPlainObject(u) || !Object.prototype.hasOwnProperty.call(u, skipHydrateSymbol);
}
var { assign } = Object;
function isComputed(u) {
	return !!(isRef(u) && u.effect);
}
function createOptionsStore(u, _, T, E) {
	let { state: D, actions: O, getters: A } = _, j = T.state.value[u], M;
	function P() {
		return j || (T.state.value[u] = D ? D() : {}), assign(toRefs(T.state.value[u]), O, Object.keys(A || {}).reduce((_, E) => (_[E] = markRaw(computed(() => {
			setActivePinia(T);
			let _ = T._s.get(u);
			return A[E].call(_, _);
		})), _), {}));
	}
	return M = createSetupStore(u, P, _, T, E, !0), M;
}
function createSetupStore(u, _, T = {}, E, D, O) {
	let A, j = assign({ actions: {} }, T), M = { deep: !0 }, P, F, I = [], L = [], R = E.state.value[u];
	!O && !R && (E.state.value[u] = {}), ref({});
	let z;
	function B(_) {
		let T;
		P = F = !1, typeof _ == "function" ? (_(E.state.value[u]), T = {
			type: MutationType.patchFunction,
			storeId: u,
			events: void 0
		}) : (mergeReactiveObjects(E.state.value[u], _), T = {
			type: MutationType.patchObject,
			payload: _,
			storeId: u,
			events: void 0
		});
		let D = z = Symbol();
		nextTick().then(() => {
			z === D && (P = !0);
		}), F = !0, triggerSubscriptions(I, T, E.state.value[u]);
	}
	let V = O ? function() {
		let { state: u } = T, _ = u ? u() : {};
		this.$patch((u) => {
			assign(u, _);
		});
	} : noop$2;
	function H() {
		A.stop(), I = [], L = [], E._s.delete(u);
	}
	let Zd = (_, T = "") => {
		if (ACTION_MARKER in _) return _[ACTION_NAME] = T, _;
		let D = function() {
			setActivePinia(E);
			let T = Array.from(arguments), O = [], A = [];
			function j(u) {
				O.push(u);
			}
			function M(u) {
				A.push(u);
			}
			triggerSubscriptions(L, {
				args: T,
				name: D[ACTION_NAME],
				store: U,
				after: j,
				onError: M
			});
			let P;
			try {
				P = _.apply(this && this.$id === u ? this : U, T);
			} catch (u) {
				throw triggerSubscriptions(A, u), u;
			}
			return P instanceof Promise ? P.then((u) => (triggerSubscriptions(O, u), u)).catch((u) => (triggerSubscriptions(A, u), Promise.reject(u))) : (triggerSubscriptions(O, P), P);
		};
		return D[ACTION_MARKER] = !0, D[ACTION_NAME] = T, D;
	}, U = reactive({
		_p: E,
		$id: u,
		$onAction: addSubscription.bind(null, L),
		$patch: B,
		$reset: V,
		$subscribe(_, T = {}) {
			let D = addSubscription(I, _, T.detached, () => O()), O = A.run(() => watch(() => E.state.value[u], (E) => {
				(T.flush === "sync" ? F : P) && _({
					storeId: u,
					type: MutationType.direct,
					events: void 0
				}, E);
			}, assign({}, M, T)));
			return D;
		},
		$dispose: H
	});
	E._s.set(u, U);
	let G = (E._a && E._a.runWithContext || fallbackRunWithContext)(() => E._e.run(() => (A = effectScope()).run(() => _({ action: Zd }))));
	for (let _ in G) {
		let T = G[_];
		isRef(T) && !isComputed(T) || isReactive(T) ? O || (R && shouldHydrate(T) && (isRef(T) ? T.value = R[_] : mergeReactiveObjects(T, R[_])), E.state.value[u][_] = T) : typeof T == "function" && (G[_] = Zd(T, _), j.actions[_] = T);
	}
	return assign(U, G), assign(toRaw(U), G), Object.defineProperty(U, "$state", {
		get: () => E.state.value[u],
		set: (u) => {
			B((_) => {
				assign(_, u);
			});
		}
	}), E._p.forEach((u) => {
		assign(U, A.run(() => u({
			store: U,
			app: E._a,
			pinia: E,
			options: j
		})));
	}), R && O && T.hydrate && T.hydrate(U.$state, R), P = !0, F = !0, U;
}
/*! #__NO_SIDE_EFFECTS__ */
function defineStore(u, _, T) {
	let E, D = typeof _ == "function";
	E = D ? T : _;
	function O(T, O) {
		let A = hasInjectionContext();
		return T ||= A ? inject(piniaSymbol, null) : null, T && setActivePinia(T), T = activePinia, T._s.has(u) || (D ? createSetupStore(u, _, E, T) : createOptionsStore(u, E, T)), T._s.get(u);
	}
	return O.$id = u, O;
}
function storeToRefs(u) {
	let _ = toRaw(u), T = {};
	for (let E in _) {
		let D = _[E];
		D.effect ? T[E] = computed({
			get: () => u[E],
			set(_) {
				u[E] = _;
			}
		}) : (isRef(D) || isReactive(D)) && (T[E] = toRef(u, E));
	}
	return T;
}
var mu = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function pu(u) {
	return u && u.__esModule && Object.prototype.hasOwnProperty.call(u, "default") ? u.default : u;
}
var $l = { exports: {} }, du = $l.exports, qt;
function fu() {
	return qt || (qt = 1, function(u, _) {
		(function(_, T) {
			u.exports = T();
		})(du, function() {
			var u = function(_, T) {
				return (u = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(u, _) {
					u.__proto__ = _;
				} || function(u, _) {
					for (var T in _) Object.prototype.hasOwnProperty.call(_, T) && (u[T] = _[T]);
				})(_, T);
			}, _ = function() {
				return (_ = Object.assign || function(u) {
					for (var _, T = 1, E = arguments.length; T < E; T++) for (var D in _ = arguments[T]) Object.prototype.hasOwnProperty.call(_, D) && (u[D] = _[D]);
					return u;
				}).apply(this, arguments);
			};
			function T(u, _, T) {
				for (var E, D = 0, O = _.length; D < O; D++) !E && D in _ || ((E ||= Array.prototype.slice.call(_, 0, D))[D] = _[D]);
				return u.concat(E || Array.prototype.slice.call(_));
			}
			var E = typeof globalThis < "u" ? globalThis : typeof self < "u" ? self : typeof window < "u" ? window : mu, D = Object.keys, O = Array.isArray;
			function A(u, _) {
				return typeof _ != "object" || D(_).forEach(function(T) {
					u[T] = _[T];
				}), u;
			}
			typeof Promise > "u" || E.Promise || (E.Promise = Promise);
			var j = Object.getPrototypeOf, M = {}.hasOwnProperty;
			function P(u, _) {
				return M.call(u, _);
			}
			function F(u, _) {
				typeof _ == "function" && (_ = _(j(u))), (typeof Reflect > "u" ? D : Reflect.ownKeys)(_).forEach(function(T) {
					L(u, T, _[T]);
				});
			}
			var I = Object.defineProperty;
			function L(u, _, T, E) {
				I(u, _, A(T && P(T, "get") && typeof T.get == "function" ? {
					get: T.get,
					set: T.set,
					configurable: !0
				} : {
					value: T,
					configurable: !0,
					writable: !0
				}, E));
			}
			function R(u) {
				return { from: function(_) {
					return u.prototype = Object.create(_.prototype), L(u.prototype, "constructor", u), { extend: F.bind(null, u.prototype) };
				} };
			}
			var z = Object.getOwnPropertyDescriptor, B = [].slice;
			function V(u, _, T) {
				return B.call(u, _, T);
			}
			function H(u, _) {
				return _(u);
			}
			function Zd(u) {
				if (!u) throw Error("Assertion Failed");
			}
			function U(u) {
				E.setImmediate ? setImmediate(u) : setTimeout(u, 0);
			}
			function G(u, _) {
				if (typeof _ == "string" && P(u, _)) return u[_];
				if (!_) return u;
				if (typeof _ != "string") {
					for (var T = [], E = 0, D = _.length; E < D; ++E) {
						var O = G(u, _[E]);
						T.push(O);
					}
					return T;
				}
				var A = _.indexOf(".");
				if (A !== -1) {
					var j = u[_.substr(0, A)];
					return j == null ? void 0 : G(j, _.substr(A + 1));
				}
			}
			function K(u, _, T) {
				if (u && _ !== void 0 && !("isFrozen" in Object && Object.isFrozen(u))) if (typeof _ != "string" && "length" in _) {
					Zd(typeof T != "string" && "length" in T);
					for (var E = 0, D = _.length; E < D; ++E) K(u, _[E], T[E]);
				} else {
					var A, j, M = _.indexOf(".");
					M === -1 ? T === void 0 ? O(u) && !isNaN(parseInt(_)) ? u.splice(_, 1) : delete u[_] : u[_] = T : (A = _.substr(0, M), (j = _.substr(M + 1)) === "" ? T === void 0 ? O(u) && !isNaN(parseInt(A)) ? u.splice(A, 1) : delete u[A] : u[A] = T : K(M = !(M = u[A]) || !P(u, A) ? u[A] = {} : M, j, T));
				}
			}
			function Qd(u) {
				var _, T = {};
				for (_ in u) P(u, _) && (T[_] = u[_]);
				return T;
			}
			var $d = [].concat;
			function ef(u) {
				return $d.apply([], u);
			}
			var tf = "BigUint64Array,BigInt64Array,Array,Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(ef([
				8,
				16,
				32,
				64
			].map(function(u) {
				return [
					"Int",
					"Uint",
					"Float"
				].map(function(_) {
					return _ + u + "Array";
				});
			}))).filter(function(u) {
				return E[u];
			}), nf = new Set(tf.map(function(u) {
				return E[u];
			})), rf = null;
			function af(u) {
				return rf = /* @__PURE__ */ new WeakMap(), u = function u(_) {
					if (!_ || typeof _ != "object") return _;
					var T = rf.get(_);
					if (T) return T;
					if (O(_)) {
						T = [], rf.set(_, T);
						for (var E = 0, D = _.length; E < D; ++E) T.push(u(_[E]));
					} else if (nf.has(_.constructor)) T = _;
					else {
						var A, M = j(_);
						for (A in T = M === Object.prototype ? {} : Object.create(M), rf.set(_, T), _) P(_, A) && (T[A] = u(_[A]));
					}
					return T;
				}(u), rf = null, u;
			}
			var of = {}.toString;
			function sf(u) {
				return of.call(u).slice(8, -1);
			}
			var cf = typeof Symbol < "u" ? Symbol.iterator : "@@iterator", lf = typeof cf == "symbol" ? function(u) {
				var _;
				return u != null && (_ = u[cf]) && _.apply(u);
			} : function() {
				return null;
			};
			function uf(u, _) {
				return _ = u.indexOf(_), 0 <= _ && u.splice(_, 1), 0 <= _;
			}
			var df = {};
			function ff(u) {
				var _, T, E, D;
				if (arguments.length === 1) {
					if (O(u)) return u.slice();
					if (this === df && typeof u == "string") return [u];
					if (D = lf(u)) {
						for (T = []; !(E = D.next()).done;) T.push(E.value);
						return T;
					}
					if (u == null || typeof (_ = u.length) != "number") return [u];
					for (T = Array(_); _--;) T[_] = u[_];
					return T;
				}
				for (_ = arguments.length, T = Array(_); _--;) T[_] = arguments[_];
				return T;
			}
			var pf = typeof Symbol < "u" ? function(u) {
				return u[Symbol.toStringTag] === "AsyncFunction";
			} : function() {
				return !1;
			}, mf = [
				"Unknown",
				"Constraint",
				"Data",
				"TransactionInactive",
				"ReadOnly",
				"Version",
				"NotFound",
				"InvalidState",
				"InvalidAccess",
				"Abort",
				"Timeout",
				"QuotaExceeded",
				"Syntax",
				"DataClone"
			], hf = [
				"Modify",
				"Bulk",
				"OpenFailed",
				"VersionChange",
				"Schema",
				"Upgrade",
				"InvalidTable",
				"MissingAPI",
				"NoSuchDatabase",
				"InvalidArgument",
				"SubTransaction",
				"Unsupported",
				"Internal",
				"DatabaseClosed",
				"PrematureCommit",
				"ForeignAwait"
			].concat(mf), gf = {
				VersionChanged: "Database version changed by other database connection",
				DatabaseClosed: "Database has been closed",
				Abort: "Transaction aborted",
				TransactionInactive: "Transaction has already completed or failed",
				MissingAPI: "IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"
			};
			function _f(u, _) {
				this.name = u, this.message = _;
			}
			function vf(u, _) {
				return u + ". Errors: " + Object.keys(_).map(function(u) {
					return _[u].toString();
				}).filter(function(u, _, T) {
					return T.indexOf(u) === _;
				}).join("\n");
			}
			function yf(u, _, T, E) {
				this.failures = _, this.failedKeys = E, this.successCount = T, this.message = vf(u, _);
			}
			function bf(u, _) {
				this.name = "BulkError", this.failures = Object.keys(_).map(function(u) {
					return _[u];
				}), this.failuresByPos = _, this.message = vf(u, this.failures);
			}
			R(_f).from(Error).extend({ toString: function() {
				return this.name + ": " + this.message;
			} }), R(yf).from(_f), R(bf).from(_f);
			var xf = hf.reduce(function(u, _) {
				return u[_] = _ + "Error", u;
			}, {}), Sf = _f, J = hf.reduce(function(u, _) {
				var T = _ + "Error";
				function E(u, E) {
					this.name = T, u ? typeof u == "string" ? (this.message = `${u}${E ? "\n " + E : ""}`, this.inner = E || null) : typeof u == "object" && (this.message = `${u.name} ${u.message}`, this.inner = u) : (this.message = gf[_] || T, this.inner = null);
				}
				return R(E).from(Sf), u[_] = E, u;
			}, {});
			J.Syntax = SyntaxError, J.Type = TypeError, J.Range = RangeError;
			var Cf = mf.reduce(function(u, _) {
				return u[_ + "Error"] = J[_], u;
			}, {}), wf = hf.reduce(function(u, _) {
				return [
					"Syntax",
					"Type",
					"Range"
				].indexOf(_) === -1 && (u[_ + "Error"] = J[_]), u;
			}, {});
			function Tf() {}
			function Ef(u) {
				return u;
			}
			function Df(u, _) {
				return u == null || u === Ef ? _ : function(T) {
					return _(u(T));
				};
			}
			function Of(u, _) {
				return function() {
					u.apply(this, arguments), _.apply(this, arguments);
				};
			}
			function kf(u, _) {
				return u === Tf ? _ : function() {
					var T = u.apply(this, arguments);
					T !== void 0 && (arguments[0] = T);
					var E = this.onsuccess, D = this.onerror;
					this.onsuccess = null, this.onerror = null;
					var O = _.apply(this, arguments);
					return E && (this.onsuccess = this.onsuccess ? Of(E, this.onsuccess) : E), D && (this.onerror = this.onerror ? Of(D, this.onerror) : D), O === void 0 ? T : O;
				};
			}
			function Af(u, _) {
				return u === Tf ? _ : function() {
					u.apply(this, arguments);
					var T = this.onsuccess, E = this.onerror;
					this.onsuccess = this.onerror = null, _.apply(this, arguments), T && (this.onsuccess = this.onsuccess ? Of(T, this.onsuccess) : T), E && (this.onerror = this.onerror ? Of(E, this.onerror) : E);
				};
			}
			function jf(u, _) {
				return u === Tf ? _ : function(T) {
					var E = u.apply(this, arguments);
					A(T, E);
					var D = this.onsuccess, O = this.onerror;
					return this.onsuccess = null, this.onerror = null, T = _.apply(this, arguments), D && (this.onsuccess = this.onsuccess ? Of(D, this.onsuccess) : D), O && (this.onerror = this.onerror ? Of(O, this.onerror) : O), E === void 0 ? T === void 0 ? void 0 : T : A(E, T);
				};
			}
			function Mf(u, _) {
				return u === Tf ? _ : function() {
					return _.apply(this, arguments) !== !1 && u.apply(this, arguments);
				};
			}
			function Nf(u, _) {
				return u === Tf ? _ : function() {
					var T = u.apply(this, arguments);
					if (T && typeof T.then == "function") {
						for (var E = this, D = arguments.length, O = Array(D); D--;) O[D] = arguments[D];
						return T.then(function() {
							return _.apply(E, O);
						});
					}
					return _.apply(this, arguments);
				};
			}
			wf.ModifyError = yf, wf.DexieError = _f, wf.BulkError = bf;
			var Pf = typeof location < "u" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
			function Ff(u) {
				Pf = u;
			}
			var If = {}, Lf = 100, tf = typeof Promise > "u" ? [] : function() {
				var u = Promise.resolve();
				if (typeof crypto > "u" || !crypto.subtle) return [
					u,
					j(u),
					u
				];
				var _ = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
				return [
					_,
					j(_),
					u
				];
			}(), mf = tf[0], hf = tf[1], tf = tf[2], hf = hf && hf.then, Rf = mf && mf.constructor, zf = !!tf, Bf = function(u, _) {
				qf.push([u, _]), Hf &&= (queueMicrotask(np), !1);
			}, Vf = !0, Hf = !0, Uf = [], Wf = [], Gf = Ef, Kf = {
				id: "global",
				global: !0,
				ref: 0,
				unhandleds: [],
				onunhandled: Tf,
				pgp: !1,
				env: {},
				finalize: Tf
			}, Z = Kf, qf = [], Jf = 0, Yf = [];
			function Q(u) {
				if (typeof this != "object") throw TypeError("Promises must be constructed via new");
				this._listeners = [], this._lib = !1;
				var _ = this._PSD = Z;
				if (typeof u != "function") {
					if (u !== If) throw TypeError("Not a function");
					this._state = arguments[1], this._value = arguments[2], this._state === !1 && Qf(this, this._value);
					return;
				}
				this._state = null, this._value = null, ++_.ref, function u(_, T) {
					try {
						T(function(T) {
							if (_._state === null) {
								if (T === _) throw TypeError("A promise cannot be resolved with itself.");
								var E = _._lib && rp();
								T && typeof T.then == "function" ? u(_, function(u, _) {
									T instanceof Q ? T._then(u, _) : T.then(u, _);
								}) : (_._state = !0, _._value = T, $f(_)), E && ip();
							}
						}, Qf.bind(null, _));
					} catch (u) {
						Qf(_, u);
					}
				}(this, u);
			}
			var Xf = {
				get: function() {
					var u = Z, _ = fp;
					function T(T, E) {
						var D = this, O = !u.global && (u !== Z || _ !== fp), A = O && !gp(), j = new Q(function(_, j) {
							ep(D, new Zf(Sp(T, u, O, A), Sp(E, u, O, A), _, j, u));
						});
						return this._consoleTask && (j._consoleTask = this._consoleTask), j;
					}
					return T.prototype = If, T;
				},
				set: function(u) {
					L(this, "then", u && u.prototype === If ? Xf : {
						get: function() {
							return u;
						},
						set: Xf.set
					});
				}
			};
			function Zf(u, _, T, E, D) {
				this.onFulfilled = typeof u == "function" ? u : null, this.onRejected = typeof _ == "function" ? _ : null, this.resolve = T, this.reject = E, this.psd = D;
			}
			function Qf(u, _) {
				var T, E;
				Wf.push(_), u._state === null && (T = u._lib && rp(), _ = Gf(_), u._state = !1, u._value = _, E = u, Uf.some(function(u) {
					return u._value === E._value;
				}) || Uf.push(E), $f(u), T && ip());
			}
			function $f(u) {
				var _ = u._listeners;
				u._listeners = [];
				for (var T = 0, E = _.length; T < E; ++T) ep(u, _[T]);
				var D = u._PSD;
				--D.ref || D.finalize(), Jf === 0 && (++Jf, Bf(function() {
					--Jf == 0 && ap();
				}, []));
			}
			function ep(u, _) {
				if (u._state !== null) {
					var T = u._state ? _.onFulfilled : _.onRejected;
					if (T === null) return (u._state ? _.resolve : _.reject)(u._value);
					++_.psd.ref, ++Jf, Bf(tp, [
						T,
						u,
						_
					]);
				} else u._listeners.push(_);
			}
			function tp(u, _, T) {
				try {
					var E, D = _._value;
					!_._state && Wf.length && (Wf = []), E = Pf && _._consoleTask ? _._consoleTask.run(function() {
						return u(D);
					}) : u(D), _._state || Wf.indexOf(D) !== -1 || function(u) {
						for (var _ = Uf.length; _;) if (Uf[--_]._value === u._value) return Uf.splice(_, 1);
					}(_), T.resolve(E);
				} catch (u) {
					T.reject(u);
				} finally {
					--Jf == 0 && ap(), --T.psd.ref || T.psd.finalize();
				}
			}
			function np() {
				xp(Kf, function() {
					rp() && ip();
				});
			}
			function rp() {
				var u = Vf;
				return Hf = Vf = !1, u;
			}
			function ip() {
				var u, _, T;
				do
					for (; 0 < qf.length;) for (u = qf, qf = [], T = u.length, _ = 0; _ < T; ++_) {
						var E = u[_];
						E[0].apply(null, E[1]);
					}
				while (0 < qf.length);
				Hf = Vf = !0;
			}
			function ap() {
				var u = Uf;
				Uf = [], u.forEach(function(u) {
					u._PSD.onunhandled.call(null, u._value, u);
				});
				for (var _ = Yf.slice(0), T = _.length; T;) _[--T]();
			}
			function op(u) {
				return new Q(If, !1, u);
			}
			function sp(u, _) {
				var T = Z;
				return function() {
					var E = rp(), D = Z;
					try {
						return yp(T, !0), u.apply(this, arguments);
					} catch (u) {
						_ && _(u);
					} finally {
						yp(D, !1), E && ip();
					}
				};
			}
			F(Q.prototype, {
				then: Xf,
				_then: function(u, _) {
					ep(this, new Zf(null, null, u, _, Z));
				},
				catch: function(u) {
					if (arguments.length === 1) return this.then(null, u);
					var _ = u, T = arguments[1];
					return typeof _ == "function" ? this.then(null, function(u) {
						return (u instanceof _ ? T : op)(u);
					}) : this.then(null, function(u) {
						return (u && u.name === _ ? T : op)(u);
					});
				},
				finally: function(u) {
					return this.then(function(_) {
						return Q.resolve(u()).then(function() {
							return _;
						});
					}, function(_) {
						return Q.resolve(u()).then(function() {
							return op(_);
						});
					});
				},
				timeout: function(u, _) {
					var T = this;
					return u < Infinity ? new Q(function(E, D) {
						var O = setTimeout(function() {
							return D(new J.Timeout(_));
						}, u);
						T.then(E, D).finally(clearTimeout.bind(null, O));
					}) : this;
				}
			}), typeof Symbol < "u" && Symbol.toStringTag && L(Q.prototype, Symbol.toStringTag, "Dexie.Promise"), Kf.env = bp(), F(Q, {
				all: function() {
					var u = ff.apply(null, arguments).map(_p);
					return new Q(function(_, T) {
						u.length === 0 && _([]);
						var E = u.length;
						u.forEach(function(D, O) {
							return Q.resolve(D).then(function(T) {
								u[O] = T, --E || _(u);
							}, T);
						});
					});
				},
				resolve: function(u) {
					return u instanceof Q ? u : u && typeof u.then == "function" ? new Q(function(_, T) {
						u.then(_, T);
					}) : new Q(If, !0, u);
				},
				reject: op,
				race: function() {
					var u = ff.apply(null, arguments).map(_p);
					return new Q(function(_, T) {
						u.map(function(u) {
							return Q.resolve(u).then(_, T);
						});
					});
				},
				PSD: {
					get: function() {
						return Z;
					},
					set: function(u) {
						return Z = u;
					}
				},
				totalEchoes: { get: function() {
					return fp;
				} },
				newPSD: mp,
				usePSD: xp,
				scheduler: {
					get: function() {
						return Bf;
					},
					set: function(u) {
						Bf = u;
					}
				},
				rejectionMapper: {
					get: function() {
						return Gf;
					},
					set: function(u) {
						Gf = u;
					}
				},
				follow: function(u, _) {
					return new Q(function(T, E) {
						return mp(function(_, T) {
							var E = Z;
							E.unhandleds = [], E.onunhandled = T, E.finalize = Of(function() {
								var u, E = this;
								u = function() {
									E.unhandleds.length === 0 ? _() : T(E.unhandleds[0]);
								}, Yf.push(function _() {
									u(), Yf.splice(Yf.indexOf(_), 1);
								}), ++Jf, Bf(function() {
									--Jf == 0 && ap();
								}, []);
							}, E.finalize), u();
						}, _, T, E);
					});
				}
			}), Rf && (Rf.allSettled && L(Q, "allSettled", function() {
				var u = ff.apply(null, arguments).map(_p);
				return new Q(function(_) {
					u.length === 0 && _([]);
					var T = u.length, E = Array(T);
					u.forEach(function(u, D) {
						return Q.resolve(u).then(function(u) {
							return E[D] = {
								status: "fulfilled",
								value: u
							};
						}, function(u) {
							return E[D] = {
								status: "rejected",
								reason: u
							};
						}).then(function() {
							return --T || _(E);
						});
					});
				});
			}), Rf.any && typeof AggregateError < "u" && L(Q, "any", function() {
				var u = ff.apply(null, arguments).map(_p);
				return new Q(function(_, T) {
					u.length === 0 && T(/* @__PURE__ */ AggregateError([]));
					var E = u.length, D = Array(E);
					u.forEach(function(u, O) {
						return Q.resolve(u).then(function(u) {
							return _(u);
						}, function(u) {
							D[O] = u, --E || T(AggregateError(D));
						});
					});
				});
			}), Rf.withResolvers && (Q.withResolvers = Rf.withResolvers));
			var cp = {
				awaits: 0,
				echoes: 0,
				id: 0
			}, lp = 0, up = [], dp = 0, fp = 0, pp = 0;
			function mp(u, _, T, E) {
				var D = Z, O = Object.create(D);
				return O.parent = D, O.ref = 0, O.global = !1, O.id = ++pp, Kf.env, O.env = zf ? {
					Promise: Q,
					PromiseProp: {
						value: Q,
						configurable: !0,
						writable: !0
					},
					all: Q.all,
					race: Q.race,
					allSettled: Q.allSettled,
					any: Q.any,
					resolve: Q.resolve,
					reject: Q.reject
				} : {}, _ && A(O, _), ++D.ref, O.finalize = function() {
					--this.parent.ref || this.parent.finalize();
				}, E = xp(O, u, T, E), O.ref === 0 && O.finalize(), E;
			}
			function hp() {
				return cp.id ||= ++lp, ++cp.awaits, cp.echoes += Lf, cp.id;
			}
			function gp() {
				return !!cp.awaits && (--cp.awaits == 0 && (cp.id = 0), cp.echoes = cp.awaits * Lf, !0);
			}
			function _p(u) {
				return cp.echoes && u && u.constructor === Rf ? (hp(), u.then(function(u) {
					return gp(), u;
				}, function(u) {
					return gp(), wp(u);
				})) : u;
			}
			function vp() {
				var u = up[up.length - 1];
				up.pop(), yp(u, !1);
			}
			function yp(u, _) {
				var T, D = Z;
				(_ ? !cp.echoes || dp++ && u === Z : !dp || --dp && u === Z) || queueMicrotask(_ ? (function(u) {
					++fp, cp.echoes && --cp.echoes != 0 || (cp.echoes = cp.awaits = cp.id = 0), up.push(Z), yp(u, !0);
				}).bind(null, u) : vp), u !== Z && (Z = u, D === Kf && (Kf.env = bp()), zf && (T = Kf.env.Promise, _ = u.env, (D.global || u.global) && (Object.defineProperty(E, "Promise", _.PromiseProp), T.all = _.all, T.race = _.race, T.resolve = _.resolve, T.reject = _.reject, _.allSettled && (T.allSettled = _.allSettled), _.any && (T.any = _.any))));
			}
			function bp() {
				var u = E.Promise;
				return zf ? {
					Promise: u,
					PromiseProp: Object.getOwnPropertyDescriptor(E, "Promise"),
					all: u.all,
					race: u.race,
					allSettled: u.allSettled,
					any: u.any,
					resolve: u.resolve,
					reject: u.reject
				} : {};
			}
			function xp(u, _, T, E, D) {
				var O = Z;
				try {
					return yp(u, !0), _(T, E, D);
				} finally {
					yp(O, !1);
				}
			}
			function Sp(u, _, T, E) {
				return typeof u == "function" ? function() {
					var D = Z;
					T && hp(), yp(_, !0);
					try {
						return u.apply(this, arguments);
					} finally {
						yp(D, !1), E && queueMicrotask(gp);
					}
				} : u;
			}
			function Cp(u) {
				Promise === Rf && cp.echoes === 0 ? dp === 0 ? u() : enqueueNativeMicroTask(u) : setTimeout(u, 0);
			}
			("" + hf).indexOf("[native code]") === -1 && (hp = gp = Tf);
			var wp = Q.reject, Tp = "￿", Ep = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.", Dp = "String expected.", Op = [], kp = "__dbnames", Ap = "readonly", jp = "readwrite";
			function Mp(u, _) {
				return u ? _ ? function() {
					return u.apply(this, arguments) && _.apply(this, arguments);
				} : u : _;
			}
			var Np = {
				type: 3,
				lower: -Infinity,
				lowerOpen: !1,
				upper: [[]],
				upperOpen: !1
			};
			function Pp(u) {
				return typeof u != "string" || /\./.test(u) ? function(u) {
					return u;
				} : function(_) {
					return _[u] === void 0 && u in _ && delete (_ = af(_))[u], _;
				};
			}
			function Fp() {
				throw J.Type("Entity instances must never be new:ed. Instances are generated by the framework bypassing the constructor.");
			}
			function Ip(u, _) {
				try {
					var T = Lp(u), E = Lp(_);
					if (T !== E) return T === "Array" ? 1 : E === "Array" ? -1 : T === "binary" ? 1 : E === "binary" ? -1 : T === "string" ? 1 : E === "string" ? -1 : T === "Date" ? 1 : E === "Date" ? -1 : NaN;
					switch (T) {
						case "number":
						case "Date":
						case "string": return _ < u ? 1 : u < _ ? -1 : 0;
						case "binary": return function(u, _) {
							for (var T = u.length, E = _.length, D = T < E ? T : E, O = 0; O < D; ++O) if (u[O] !== _[O]) return u[O] < _[O] ? -1 : 1;
							return T === E ? 0 : T < E ? -1 : 1;
						}(Rp(u), Rp(_));
						case "Array": return function(u, _) {
							for (var T = u.length, E = _.length, D = T < E ? T : E, O = 0; O < D; ++O) {
								var A = Ip(u[O], _[O]);
								if (A !== 0) return A;
							}
							return T === E ? 0 : T < E ? -1 : 1;
						}(u, _);
					}
				} catch {}
				return NaN;
			}
			function Lp(u) {
				var _ = typeof u;
				return _ == "object" ? ArrayBuffer.isView(u) ? "binary" : (u = sf(u), u === "ArrayBuffer" ? "binary" : u) : _;
			}
			function Rp(u) {
				return u instanceof Uint8Array ? u : ArrayBuffer.isView(u) ? new Uint8Array(u.buffer, u.byteOffset, u.byteLength) : new Uint8Array(u);
			}
			function zp(u, _, T) {
				var E = u.schema.yProps;
				return E ? (_ && 0 < T.numFailures && (_ = _.filter(function(u, _) {
					return !T.failures[_];
				})), Promise.all(E.map(function(T) {
					return T = T.updatesTable, _ ? u.db.table(T).where("k").anyOf(_).delete() : u.db.table(T).clear();
				})).then(function() {
					return T;
				})) : T;
			}
			var Bp = (Vp.prototype._trans = function(u, _, T) {
				var E = this._tx || Z.trans, D = this.name, O = Pf && typeof console < "u" && console.createTask && console.createTask(`Dexie: ${u === "readonly" ? "read" : "write"} ${this.name}`);
				function A(u, T, E) {
					if (!E.schema[D]) throw new J.NotFound("Table " + D + " not part of transaction");
					return _(E.idbtrans, E);
				}
				var j = rp();
				try {
					var M = E && E.db._novip === this.db._novip ? E === Z.trans ? E._promise(u, A, T) : mp(function() {
						return E._promise(u, A, T);
					}, {
						trans: E,
						transless: Z.transless || Z
					}) : function u(_, T, E, D) {
						if (_.idbdb && (_._state.openComplete || Z.letThrough || _._vip)) {
							var O = _._createTransaction(T, E, _._dbSchema);
							try {
								O.create(), _._state.PR1398_maxLoop = 3;
							} catch (O) {
								return O.name === xf.InvalidState && _.isOpen() && 0 < --_._state.PR1398_maxLoop ? (console.warn("Dexie: Need to reopen db"), _.close({ disableAutoOpen: !1 }), _.open().then(function() {
									return u(_, T, E, D);
								})) : wp(O);
							}
							return O._promise(T, function(u, _) {
								return mp(function() {
									return Z.trans = O, D(u, _, O);
								});
							}).then(function(u) {
								if (T === "readwrite") try {
									O.idbtrans.commit();
								} catch {}
								return T === "readonly" ? u : O._completion.then(function() {
									return u;
								});
							});
						}
						if (_._state.openComplete) return wp(new J.DatabaseClosed(_._state.dbOpenError));
						if (!_._state.isBeingOpened) {
							if (!_._state.autoOpen) return wp(new J.DatabaseClosed());
							_.open().catch(Tf);
						}
						return _._state.dbReadyPromise.then(function() {
							return u(_, T, E, D);
						});
					}(this.db, u, [this.name], A);
					return O && (M._consoleTask = O, M = M.catch(function(u) {
						return console.trace(u), wp(u);
					})), M;
				} finally {
					j && ip();
				}
			}, Vp.prototype.get = function(u, _) {
				var T = this;
				return u && u.constructor === Object ? this.where(u).first(_) : u == null ? wp(new J.Type("Invalid argument to Table.get()")) : this._trans("readonly", function(_) {
					return T.core.get({
						trans: _,
						key: u
					}).then(function(u) {
						return T.hook.reading.fire(u);
					});
				}).then(_);
			}, Vp.prototype.where = function(u) {
				if (typeof u == "string") return new this.db.WhereClause(this, u);
				if (O(u)) return new this.db.WhereClause(this, `[${u.join("+")}]`);
				var _ = D(u);
				if (_.length === 1) return this.where(_[0]).equals(u[_[0]]);
				var T = this.schema.indexes.concat(this.schema.primKey).filter(function(u) {
					if (u.compound && _.every(function(_) {
						return 0 <= u.keyPath.indexOf(_);
					})) {
						for (var T = 0; T < _.length; ++T) if (_.indexOf(u.keyPath[T]) === -1) return !1;
						return !0;
					}
					return !1;
				}).sort(function(u, _) {
					return u.keyPath.length - _.keyPath.length;
				})[0];
				if (T && this.db._maxKey !== Tp) {
					var E = T.keyPath.slice(0, _.length);
					return this.where(E).equals(E.map(function(_) {
						return u[_];
					}));
				}
				!T && Pf && console.warn(`The query ${JSON.stringify(u)} on ${this.name} would benefit from a compound index [${_.join("+")}]`);
				var A = this.schema.idxByName;
				function j(u, _) {
					return Ip(u, _) === 0;
				}
				var M = _.reduce(function(_, T) {
					var E = _[0], D = _[1], _ = A[T], M = u[T];
					return [E || _, E || !_ ? Mp(D, _ && _.multi ? function(u) {
						return u = G(u, T), O(u) && u.some(function(u) {
							return j(M, u);
						});
					} : function(u) {
						return j(M, G(u, T));
					}) : D];
				}, [null, null]), E = M[0], M = M[1];
				return E ? this.where(E.name).equals(u[E.keyPath]).filter(M) : T ? this.filter(M) : this.where(_).equals("");
			}, Vp.prototype.filter = function(u) {
				return this.toCollection().and(u);
			}, Vp.prototype.count = function(u) {
				return this.toCollection().count(u);
			}, Vp.prototype.offset = function(u) {
				return this.toCollection().offset(u);
			}, Vp.prototype.limit = function(u) {
				return this.toCollection().limit(u);
			}, Vp.prototype.each = function(u) {
				return this.toCollection().each(u);
			}, Vp.prototype.toArray = function(u) {
				return this.toCollection().toArray(u);
			}, Vp.prototype.toCollection = function() {
				return new this.db.Collection(new this.db.WhereClause(this));
			}, Vp.prototype.orderBy = function(u) {
				return new this.db.Collection(new this.db.WhereClause(this, O(u) ? `[${u.join("+")}]` : u));
			}, Vp.prototype.reverse = function() {
				return this.toCollection().reverse();
			}, Vp.prototype.mapToClass = function(_) {
				var T, E = this.db, D = this.name;
				function O() {
					return T !== null && T.apply(this, arguments) || this;
				}
				(this.schema.mappedClass = _).prototype instanceof Fp && (function(_, T) {
					if (typeof T != "function" && T !== null) throw TypeError("Class extends value " + String(T) + " is not a constructor or null");
					function E() {
						this.constructor = _;
					}
					u(_, T), _.prototype = T === null ? Object.create(T) : (E.prototype = T.prototype, new E());
				}(O, T = _), Object.defineProperty(O.prototype, "db", {
					get: function() {
						return E;
					},
					enumerable: !1,
					configurable: !0
				}), O.prototype.table = function() {
					return D;
				}, _ = O);
				for (var A = /* @__PURE__ */ new Set(), M = _.prototype; M; M = j(M)) Object.getOwnPropertyNames(M).forEach(function(u) {
					return A.add(u);
				});
				function P(u) {
					if (!u) return u;
					var T, E = Object.create(_.prototype);
					for (T in u) if (!A.has(T)) try {
						E[T] = u[T];
					} catch {}
					return E;
				}
				return this.schema.readHook && this.hook.reading.unsubscribe(this.schema.readHook), this.schema.readHook = P, this.hook("reading", P), _;
			}, Vp.prototype.defineClass = function() {
				return this.mapToClass(function(u) {
					A(this, u);
				});
			}, Vp.prototype.add = function(u, _) {
				var T = this, E = this.schema.primKey, D = E.auto, O = E.keyPath, A = u;
				return O && D && (A = Pp(O)(u)), this._trans("readwrite", function(u) {
					return T.core.mutate({
						trans: u,
						type: "add",
						keys: _ == null ? null : [_],
						values: [A]
					});
				}).then(function(u) {
					return u.numFailures ? Q.reject(u.failures[0]) : u.lastResult;
				}).then(function(_) {
					if (O) try {
						K(u, O, _);
					} catch {}
					return _;
				});
			}, Vp.prototype.update = function(u, _) {
				return typeof u != "object" || O(u) ? this.where(":id").equals(u).modify(_) : (u = G(u, this.schema.primKey.keyPath), u === void 0 ? wp(new J.InvalidArgument("Given object does not contain its primary key")) : this.where(":id").equals(u).modify(_));
			}, Vp.prototype.put = function(u, _) {
				var T = this, E = this.schema.primKey, D = E.auto, O = E.keyPath, A = u;
				return O && D && (A = Pp(O)(u)), this._trans("readwrite", function(u) {
					return T.core.mutate({
						trans: u,
						type: "put",
						values: [A],
						keys: _ == null ? null : [_]
					});
				}).then(function(u) {
					return u.numFailures ? Q.reject(u.failures[0]) : u.lastResult;
				}).then(function(_) {
					if (O) try {
						K(u, O, _);
					} catch {}
					return _;
				});
			}, Vp.prototype.delete = function(u) {
				var _ = this;
				return this._trans("readwrite", function(T) {
					return _.core.mutate({
						trans: T,
						type: "delete",
						keys: [u]
					}).then(function(T) {
						return zp(_, [u], T);
					}).then(function(u) {
						return u.numFailures ? Q.reject(u.failures[0]) : void 0;
					});
				});
			}, Vp.prototype.clear = function() {
				var u = this;
				return this._trans("readwrite", function(_) {
					return u.core.mutate({
						trans: _,
						type: "deleteRange",
						range: Np
					}).then(function(_) {
						return zp(u, null, _);
					});
				}).then(function(u) {
					return u.numFailures ? Q.reject(u.failures[0]) : void 0;
				});
			}, Vp.prototype.bulkGet = function(u) {
				var _ = this;
				return this._trans("readonly", function(T) {
					return _.core.getMany({
						keys: u,
						trans: T
					}).then(function(u) {
						return u.map(function(u) {
							return _.hook.reading.fire(u);
						});
					});
				});
			}, Vp.prototype.bulkAdd = function(u, _, T) {
				var E = this, D = Array.isArray(_) ? _ : void 0, O = (T ||= D ? void 0 : _) ? T.allKeys : void 0;
				return this._trans("readwrite", function(_) {
					var T = E.schema.primKey, A = T.auto, T = T.keyPath;
					if (T && D) throw new J.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
					if (D && D.length !== u.length) throw new J.InvalidArgument("Arguments objects and keys must have the same length");
					var j = u.length, T = T && A ? u.map(Pp(T)) : u;
					return E.core.mutate({
						trans: _,
						type: "add",
						keys: D,
						values: T,
						wantResults: O
					}).then(function(u) {
						var _ = u.numFailures, T = u.results, D = u.lastResult, u = u.failures;
						if (_ === 0) return O ? T : D;
						throw new bf(`${E.name}.bulkAdd(): ${_} of ${j} operations failed`, u);
					});
				});
			}, Vp.prototype.bulkPut = function(u, _, T) {
				var E = this, D = Array.isArray(_) ? _ : void 0, O = (T ||= D ? void 0 : _) ? T.allKeys : void 0;
				return this._trans("readwrite", function(_) {
					var T = E.schema.primKey, A = T.auto, T = T.keyPath;
					if (T && D) throw new J.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
					if (D && D.length !== u.length) throw new J.InvalidArgument("Arguments objects and keys must have the same length");
					var j = u.length, T = T && A ? u.map(Pp(T)) : u;
					return E.core.mutate({
						trans: _,
						type: "put",
						keys: D,
						values: T,
						wantResults: O
					}).then(function(u) {
						var _ = u.numFailures, T = u.results, D = u.lastResult, u = u.failures;
						if (_ === 0) return O ? T : D;
						throw new bf(`${E.name}.bulkPut(): ${_} of ${j} operations failed`, u);
					});
				});
			}, Vp.prototype.bulkUpdate = function(u) {
				var _ = this, T = this.core, E = u.map(function(u) {
					return u.key;
				}), D = u.map(function(u) {
					return u.changes;
				}), O = [];
				return this._trans("readwrite", function(A) {
					return T.getMany({
						trans: A,
						keys: E,
						cache: "clone"
					}).then(function(j) {
						var M = [], P = [];
						u.forEach(function(u, T) {
							var E = u.key, D = u.changes, A = j[T];
							if (A) {
								for (var F = 0, I = Object.keys(D); F < I.length; F++) {
									var L = I[F], R = D[L];
									if (L === _.schema.primKey.keyPath) {
										if (Ip(R, E) !== 0) throw new J.Constraint("Cannot update primary key in bulkUpdate()");
									} else K(A, L, R);
								}
								O.push(T), M.push(E), P.push(A);
							}
						});
						var F = M.length;
						return T.mutate({
							trans: A,
							type: "put",
							keys: M,
							values: P,
							updates: {
								keys: E,
								changeSpecs: D
							}
						}).then(function(u) {
							var T = u.numFailures, E = u.failures;
							if (T === 0) return F;
							for (var D = 0, A = Object.keys(E); D < A.length; D++) {
								var j, M = A[D], P = O[Number(M)];
								P != null && (j = E[M], delete E[M], E[P] = j);
							}
							throw new bf(`${_.name}.bulkUpdate(): ${T} of ${F} operations failed`, E);
						});
					});
				});
			}, Vp.prototype.bulkDelete = function(u) {
				var _ = this, T = u.length;
				return this._trans("readwrite", function(T) {
					return _.core.mutate({
						trans: T,
						type: "delete",
						keys: u
					}).then(function(T) {
						return zp(_, u, T);
					});
				}).then(function(u) {
					var E = u.numFailures, D = u.lastResult, u = u.failures;
					if (E === 0) return D;
					throw new bf(`${_.name}.bulkDelete(): ${E} of ${T} operations failed`, u);
				});
			}, Vp);
			function Vp() {}
			function Hp(u) {
				function _(_, E) {
					if (E) {
						for (var D = arguments.length, O = Array(D - 1); --D;) O[D - 1] = arguments[D];
						return T[_].subscribe.apply(null, O), u;
					}
					if (typeof _ == "string") return T[_];
				}
				var T = {};
				_.addEventType = j;
				for (var E = 1, A = arguments.length; E < A; ++E) j(arguments[E]);
				return _;
				function j(u, E, A) {
					if (typeof u != "object") {
						var M;
						E ||= Mf;
						var P = {
							subscribers: [],
							fire: A ||= Tf,
							subscribe: function(u) {
								P.subscribers.indexOf(u) === -1 && (P.subscribers.push(u), P.fire = E(P.fire, u));
							},
							unsubscribe: function(u) {
								P.subscribers = P.subscribers.filter(function(_) {
									return _ !== u;
								}), P.fire = P.subscribers.reduce(E, A);
							}
						};
						return T[u] = _[u] = P;
					}
					D(M = u).forEach(function(u) {
						var _ = M[u];
						if (O(_)) j(u, M[u][0], M[u][1]);
						else {
							if (_ !== "asap") throw new J.InvalidArgument("Invalid event config");
							var T = j(u, Ef, function() {
								for (var u = arguments.length, _ = Array(u); u--;) _[u] = arguments[u];
								T.subscribers.forEach(function(u) {
									U(function() {
										u.apply(null, _);
									});
								});
							});
						}
					});
				}
			}
			function Up(u, _) {
				return R(_).from({ prototype: u }), _;
			}
			function Wp(u, _) {
				return !(u.filter || u.algorithm || u.or) && (_ ? u.justLimit : !u.replayFilter);
			}
			function Gp(u, _) {
				u.filter = Mp(u.filter, _);
			}
			function Kp(u, _, T) {
				var E = u.replayFilter;
				u.replayFilter = E ? function() {
					return Mp(E(), _());
				} : _, u.justLimit = T && !E;
			}
			function qp(u, _) {
				if (u.isPrimKey) return _.primaryKey;
				var T = _.getIndexByKeyPath(u.index);
				if (!T) throw new J.Schema("KeyPath " + u.index + " on object store " + _.name + " is not indexed");
				return T;
			}
			function Jp(u, _, T) {
				var E = qp(u, _.schema);
				return _.openCursor({
					trans: T,
					values: !u.keysOnly,
					reverse: u.dir === "prev",
					unique: !!u.unique,
					query: {
						index: E,
						range: u.range
					}
				});
			}
			function Yp(u, _, T, E) {
				var D = u.replayFilter ? Mp(u.filter, u.replayFilter()) : u.filter;
				if (u.or) {
					var O = {}, A = function(u, T, E) {
						var A, j;
						D && !D(T, E, function(u) {
							return T.stop(u);
						}, function(u) {
							return T.fail(u);
						}) || ((j = "" + (A = T.primaryKey)) == "[object ArrayBuffer]" && (j = "" + new Uint8Array(A)), P(O, j) || (O[j] = !0, _(u, T, E)));
					};
					return Promise.all([u.or._iterate(A, T), Xp(Jp(u, E, T), u.algorithm, A, !u.keysOnly && u.valueMapper)]);
				}
				return Xp(Jp(u, E, T), Mp(u.algorithm, D), _, !u.keysOnly && u.valueMapper);
			}
			function Xp(u, _, T, E) {
				var D = sp(E ? function(u, _, D) {
					return T(E(u), _, D);
				} : T);
				return u.then(function(u) {
					if (u) return u.start(function() {
						var T = function() {
							return u.continue();
						};
						_ && !_(u, function(u) {
							return T = u;
						}, function(_) {
							u.stop(_), T = Tf;
						}, function(_) {
							u.fail(_), T = Tf;
						}) || D(u.value, u, function(u) {
							return T = u;
						}), T();
					});
				});
			}
			var Zp = (Qp.prototype.execute = function(u) {
				var _ = this["@@propmod"];
				if (_.add !== void 0) {
					var E = _.add;
					if (O(E)) return T(T([], O(u) ? u : [], !0), E).sort();
					if (typeof E == "number") return (Number(u) || 0) + E;
					if (typeof E == "bigint") try {
						return BigInt(u) + E;
					} catch {
						return BigInt(0) + E;
					}
					throw TypeError(`Invalid term ${E}`);
				}
				if (_.remove !== void 0) {
					var D = _.remove;
					if (O(D)) return O(u) ? u.filter(function(u) {
						return !D.includes(u);
					}).sort() : [];
					if (typeof D == "number") return Number(u) - D;
					if (typeof D == "bigint") try {
						return BigInt(u) - D;
					} catch {
						return BigInt(0) - D;
					}
					throw TypeError(`Invalid subtrahend ${D}`);
				}
				return E = (E = _.replacePrefix)?.[0], E && typeof u == "string" && u.startsWith(E) ? _.replacePrefix[1] + u.substring(E.length) : u;
			}, Qp);
			function Qp(u) {
				this["@@propmod"] = u;
			}
			var $p = (em.prototype._read = function(u, _) {
				var T = this._ctx;
				return T.error ? T.table._trans(null, wp.bind(null, T.error)) : T.table._trans("readonly", u).then(_);
			}, em.prototype._write = function(u) {
				var _ = this._ctx;
				return _.error ? _.table._trans(null, wp.bind(null, _.error)) : _.table._trans("readwrite", u, "locked");
			}, em.prototype._addAlgorithm = function(u) {
				var _ = this._ctx;
				_.algorithm = Mp(_.algorithm, u);
			}, em.prototype._iterate = function(u, _) {
				return Yp(this._ctx, u, _, this._ctx.table.core);
			}, em.prototype.clone = function(u) {
				var _ = Object.create(this.constructor.prototype), T = Object.create(this._ctx);
				return u && A(T, u), _._ctx = T, _;
			}, em.prototype.raw = function() {
				return this._ctx.valueMapper = null, this;
			}, em.prototype.each = function(u) {
				var _ = this._ctx;
				return this._read(function(T) {
					return Yp(_, u, T, _.table.core);
				});
			}, em.prototype.count = function(u) {
				var _ = this;
				return this._read(function(u) {
					var T = _._ctx, E = T.table.core;
					if (Wp(T, !0)) return E.count({
						trans: u,
						query: {
							index: qp(T, E.schema),
							range: T.range
						}
					}).then(function(u) {
						return Math.min(u, T.limit);
					});
					var D = 0;
					return Yp(T, function() {
						return ++D, !1;
					}, u, E).then(function() {
						return D;
					});
				}).then(u);
			}, em.prototype.sortBy = function(u, _) {
				var T = u.split(".").reverse(), E = T[0], D = T.length - 1;
				function O(u, _) {
					return _ ? O(u[T[_]], _ - 1) : u[E];
				}
				var A = this._ctx.dir === "next" ? 1 : -1;
				function j(u, _) {
					return Ip(O(u, D), O(_, D)) * A;
				}
				return this.toArray(function(u) {
					return u.sort(j);
				}).then(_);
			}, em.prototype.toArray = function(u) {
				var _ = this;
				return this._read(function(u) {
					var T = _._ctx;
					if (T.dir === "next" && Wp(T, !0) && 0 < T.limit) {
						var E = T.valueMapper, D = qp(T, T.table.core.schema);
						return T.table.core.query({
							trans: u,
							limit: T.limit,
							values: !0,
							query: {
								index: D,
								range: T.range
							}
						}).then(function(u) {
							return u = u.result, E ? u.map(E) : u;
						});
					}
					var O = [];
					return Yp(T, function(u) {
						return O.push(u);
					}, u, T.table.core).then(function() {
						return O;
					});
				}, u);
			}, em.prototype.offset = function(u) {
				var _ = this._ctx;
				return u <= 0 || (_.offset += u, Wp(_) ? Kp(_, function() {
					var _ = u;
					return function(u, T) {
						return _ === 0 || (_ === 1 ? --_ : T(function() {
							u.advance(_), _ = 0;
						}), !1);
					};
				}) : Kp(_, function() {
					var _ = u;
					return function() {
						return --_ < 0;
					};
				})), this;
			}, em.prototype.limit = function(u) {
				return this._ctx.limit = Math.min(this._ctx.limit, u), Kp(this._ctx, function() {
					var _ = u;
					return function(u, T, E) {
						return --_ <= 0 && T(E), 0 <= _;
					};
				}, !0), this;
			}, em.prototype.until = function(u, _) {
				return Gp(this._ctx, function(T, E, D) {
					return !u(T.value) || (E(D), _);
				}), this;
			}, em.prototype.first = function(u) {
				return this.limit(1).toArray(function(u) {
					return u[0];
				}).then(u);
			}, em.prototype.last = function(u) {
				return this.reverse().first(u);
			}, em.prototype.filter = function(u) {
				var _;
				return Gp(this._ctx, function(_) {
					return u(_.value);
				}), (_ = this._ctx).isMatch = Mp(_.isMatch, u), this;
			}, em.prototype.and = function(u) {
				return this.filter(u);
			}, em.prototype.or = function(u) {
				return new this.db.WhereClause(this._ctx.table, u, this);
			}, em.prototype.reverse = function() {
				return this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev", this._ondirectionchange && this._ondirectionchange(this._ctx.dir), this;
			}, em.prototype.desc = function() {
				return this.reverse();
			}, em.prototype.eachKey = function(u) {
				var _ = this._ctx;
				return _.keysOnly = !_.isMatch, this.each(function(_, T) {
					u(T.key, T);
				});
			}, em.prototype.eachUniqueKey = function(u) {
				return this._ctx.unique = "unique", this.eachKey(u);
			}, em.prototype.eachPrimaryKey = function(u) {
				var _ = this._ctx;
				return _.keysOnly = !_.isMatch, this.each(function(_, T) {
					u(T.primaryKey, T);
				});
			}, em.prototype.keys = function(u) {
				var _ = this._ctx;
				_.keysOnly = !_.isMatch;
				var T = [];
				return this.each(function(u, _) {
					T.push(_.key);
				}).then(function() {
					return T;
				}).then(u);
			}, em.prototype.primaryKeys = function(u) {
				var _ = this._ctx;
				if (_.dir === "next" && Wp(_, !0) && 0 < _.limit) return this._read(function(u) {
					var T = qp(_, _.table.core.schema);
					return _.table.core.query({
						trans: u,
						values: !1,
						limit: _.limit,
						query: {
							index: T,
							range: _.range
						}
					});
				}).then(function(u) {
					return u.result;
				}).then(u);
				_.keysOnly = !_.isMatch;
				var T = [];
				return this.each(function(u, _) {
					T.push(_.primaryKey);
				}).then(function() {
					return T;
				}).then(u);
			}, em.prototype.uniqueKeys = function(u) {
				return this._ctx.unique = "unique", this.keys(u);
			}, em.prototype.firstKey = function(u) {
				return this.limit(1).keys(function(u) {
					return u[0];
				}).then(u);
			}, em.prototype.lastKey = function(u) {
				return this.reverse().firstKey(u);
			}, em.prototype.distinct = function() {
				var u = this._ctx, u = u.index && u.table.schema.idxByName[u.index];
				if (!u || !u.multi) return this;
				var _ = {};
				return Gp(this._ctx, function(u) {
					var T = u.primaryKey.toString(), u = P(_, T);
					return _[T] = !0, !u;
				}), this;
			}, em.prototype.modify = function(u) {
				var _ = this, T = this._ctx;
				return this._write(function(E) {
					var O, A, j = typeof u == "function" ? u : (O = D(u), A = O.length, function(_) {
						for (var T = !1, E = 0; E < A; ++E) {
							var D = O[E], j = u[D], M = G(_, D);
							j instanceof Zp ? (K(_, D, j.execute(M)), T = !0) : M !== j && (K(_, D, j), T = !0);
						}
						return T;
					}), M = T.table.core, P = M.schema.primaryKey, F = P.outbound, I = P.extractKey, L = 200, P = _.db._options.modifyChunkSize;
					P && (L = typeof P == "object" ? P[M.name] || P["*"] || 200 : P);
					function R(u, _) {
						var T = _.failures, _ = _.numFailures;
						B += u - _;
						for (var E = 0, O = D(T); E < O.length; E++) {
							var A = O[E];
							z.push(T[A]);
						}
					}
					var z = [], B = 0, V = [], H = u === tm;
					return _.clone().primaryKeys().then(function(_) {
						function D(A) {
							var P = Math.min(L, _.length - A), z = _.slice(A, A + P);
							return (H ? Promise.resolve([]) : M.getMany({
								trans: E,
								keys: z,
								cache: "immutable"
							})).then(function(B) {
								var V = [], Zd = [], U = F ? [] : null, G = H ? z : [];
								if (!H) for (var K = 0; K < P; ++K) {
									var Qd = B[K], $d = {
										value: af(Qd),
										primKey: _[A + K]
									};
									j.call($d, $d.value, $d) !== !1 && ($d.value == null ? G.push(_[A + K]) : F || Ip(I(Qd), I($d.value)) === 0 ? (Zd.push($d.value), F && U.push(_[A + K])) : (G.push(_[A + K]), V.push($d.value)));
								}
								return Promise.resolve(0 < V.length && M.mutate({
									trans: E,
									type: "add",
									values: V
								}).then(function(u) {
									for (var _ in u.failures) G.splice(parseInt(_), 1);
									R(V.length, u);
								})).then(function() {
									return (0 < Zd.length || O && typeof u == "object") && M.mutate({
										trans: E,
										type: "put",
										keys: U,
										values: Zd,
										criteria: O,
										changeSpec: typeof u != "function" && u,
										isAdditionalChunk: 0 < A
									}).then(function(u) {
										return R(Zd.length, u);
									});
								}).then(function() {
									return (0 < G.length || O && H) && M.mutate({
										trans: E,
										type: "delete",
										keys: G,
										criteria: O,
										isAdditionalChunk: 0 < A
									}).then(function(u) {
										return zp(T.table, G, u);
									}).then(function(u) {
										return R(G.length, u);
									});
								}).then(function() {
									return _.length > A + P && D(A + L);
								});
							});
						}
						var O = Wp(T) && T.limit === Infinity && (typeof u != "function" || H) && {
							index: T.index,
							range: T.range
						};
						return D(0).then(function() {
							if (0 < z.length) throw new yf("Error modifying one or more objects", z, B, V);
							return _.length;
						});
					});
				});
			}, em.prototype.delete = function() {
				var u = this._ctx, _ = u.range;
				return !Wp(u) || u.table.schema.yProps || !u.isPrimKey && _.type !== 3 ? this.modify(tm) : this._write(function(T) {
					var E = u.table.core.schema.primaryKey, D = _;
					return u.table.core.count({
						trans: T,
						query: {
							index: E,
							range: D
						}
					}).then(function(_) {
						return u.table.core.mutate({
							trans: T,
							type: "deleteRange",
							range: D
						}).then(function(u) {
							var T = u.failures, u = u.numFailures;
							if (u) throw new yf("Could not delete some values", Object.keys(T).map(function(u) {
								return T[u];
							}), _ - u);
							return _ - u;
						});
					});
				});
			}, em);
			function em() {}
			var tm = function(u, _) {
				return _.value = null;
			};
			function nm(u, _) {
				return u < _ ? -1 : u === _ ? 0 : 1;
			}
			function rm(u, _) {
				return _ < u ? -1 : u === _ ? 0 : 1;
			}
			function im(u, _, T) {
				return u = u instanceof lm ? new u.Collection(u) : u, u._ctx.error = new (T || TypeError)(_), u;
			}
			function am(u) {
				return new u.Collection(u, function() {
					return cm("");
				}).limit(0);
			}
			function om(u, _, T, E) {
				var D, O, A, j, M, P, F, I = T.length;
				if (!T.every(function(u) {
					return typeof u == "string";
				})) return im(u, Dp);
				function L(u) {
					D = u === "next" ? function(u) {
						return u.toUpperCase();
					} : function(u) {
						return u.toLowerCase();
					}, O = u === "next" ? function(u) {
						return u.toLowerCase();
					} : function(u) {
						return u.toUpperCase();
					}, A = u === "next" ? nm : rm;
					var _ = T.map(function(u) {
						return {
							lower: O(u),
							upper: D(u)
						};
					}).sort(function(u, _) {
						return A(u.lower, _.lower);
					});
					j = _.map(function(u) {
						return u.upper;
					}), M = _.map(function(u) {
						return u.lower;
					}), F = (P = u) === "next" ? "" : E;
				}
				L("next"), u = new u.Collection(u, function() {
					return sm(j[0], M[I - 1] + E);
				}), u._ondirectionchange = function(u) {
					L(u);
				};
				var R = 0;
				return u._addAlgorithm(function(u, T, E) {
					var D = u.key;
					if (typeof D != "string") return !1;
					var L = O(D);
					if (_(L, M, R)) return !0;
					for (var z = null, B = R; B < I; ++B) {
						var V = function(u, _, T, E, D, O) {
							for (var A = Math.min(u.length, E.length), j = -1, M = 0; M < A; ++M) {
								var P = _[M];
								if (P !== E[M]) return D(u[M], T[M]) < 0 ? u.substr(0, M) + T[M] + T.substr(M + 1) : D(u[M], E[M]) < 0 ? u.substr(0, M) + E[M] + T.substr(M + 1) : 0 <= j ? u.substr(0, j) + _[j] + T.substr(j + 1) : null;
								D(u[M], P) < 0 && (j = M);
							}
							return A < E.length && O === "next" ? u + T.substr(u.length) : A < u.length && O === "prev" ? u.substr(0, T.length) : j < 0 ? null : u.substr(0, j) + E[j] + T.substr(j + 1);
						}(D, L, j[B], M[B], A, P);
						V === null && z === null ? R = B + 1 : (z === null || 0 < A(z, V)) && (z = V);
					}
					return T(z === null ? E : function() {
						u.continue(z + F);
					}), !1;
				}), u;
			}
			function sm(u, _, T, E) {
				return {
					type: 2,
					lower: u,
					upper: _,
					lowerOpen: T,
					upperOpen: E
				};
			}
			function cm(u) {
				return {
					type: 1,
					lower: u,
					upper: u
				};
			}
			var lm = (Object.defineProperty(um.prototype, "Collection", {
				get: function() {
					return this._ctx.table.db.Collection;
				},
				enumerable: !1,
				configurable: !0
			}), um.prototype.between = function(u, _, T, E) {
				T = T !== !1, E = E === !0;
				try {
					return 0 < this._cmp(u, _) || this._cmp(u, _) === 0 && (T || E) && (!T || !E) ? am(this) : new this.Collection(this, function() {
						return sm(u, _, !T, !E);
					});
				} catch {
					return im(this, Ep);
				}
			}, um.prototype.equals = function(u) {
				return u == null ? im(this, Ep) : new this.Collection(this, function() {
					return cm(u);
				});
			}, um.prototype.above = function(u) {
				return u == null ? im(this, Ep) : new this.Collection(this, function() {
					return sm(u, void 0, !0);
				});
			}, um.prototype.aboveOrEqual = function(u) {
				return u == null ? im(this, Ep) : new this.Collection(this, function() {
					return sm(u, void 0, !1);
				});
			}, um.prototype.below = function(u) {
				return u == null ? im(this, Ep) : new this.Collection(this, function() {
					return sm(void 0, u, !1, !0);
				});
			}, um.prototype.belowOrEqual = function(u) {
				return u == null ? im(this, Ep) : new this.Collection(this, function() {
					return sm(void 0, u);
				});
			}, um.prototype.startsWith = function(u) {
				return typeof u == "string" ? this.between(u, u + Tp, !0, !0) : im(this, Dp);
			}, um.prototype.startsWithIgnoreCase = function(u) {
				return u === "" ? this.startsWith(u) : om(this, function(u, _) {
					return u.indexOf(_[0]) === 0;
				}, [u], Tp);
			}, um.prototype.equalsIgnoreCase = function(u) {
				return om(this, function(u, _) {
					return u === _[0];
				}, [u], "");
			}, um.prototype.anyOfIgnoreCase = function() {
				var u = ff.apply(df, arguments);
				return u.length === 0 ? am(this) : om(this, function(u, _) {
					return _.indexOf(u) !== -1;
				}, u, "");
			}, um.prototype.startsWithAnyOfIgnoreCase = function() {
				var u = ff.apply(df, arguments);
				return u.length === 0 ? am(this) : om(this, function(u, _) {
					return _.some(function(_) {
						return u.indexOf(_) === 0;
					});
				}, u, Tp);
			}, um.prototype.anyOf = function() {
				var u = this, _ = ff.apply(df, arguments), T = this._cmp;
				try {
					_.sort(T);
				} catch {
					return im(this, Ep);
				}
				if (_.length === 0) return am(this);
				var E = new this.Collection(this, function() {
					return sm(_[0], _[_.length - 1]);
				});
				E._ondirectionchange = function(E) {
					T = E === "next" ? u._ascending : u._descending, _.sort(T);
				};
				var D = 0;
				return E._addAlgorithm(function(u, E, O) {
					for (var A = u.key; 0 < T(A, _[D]);) if (++D === _.length) return E(O), !1;
					return T(A, _[D]) === 0 || (E(function() {
						u.continue(_[D]);
					}), !1);
				}), E;
			}, um.prototype.notEqual = function(u) {
				return this.inAnyRange([[-Infinity, u], [u, this.db._maxKey]], {
					includeLowers: !1,
					includeUppers: !1
				});
			}, um.prototype.noneOf = function() {
				var u = ff.apply(df, arguments);
				if (u.length === 0) return new this.Collection(this);
				try {
					u.sort(this._ascending);
				} catch {
					return im(this, Ep);
				}
				var _ = u.reduce(function(u, _) {
					return u ? u.concat([[u[u.length - 1][1], _]]) : [[-Infinity, _]];
				}, null);
				return _.push([u[u.length - 1], this.db._maxKey]), this.inAnyRange(_, {
					includeLowers: !1,
					includeUppers: !1
				});
			}, um.prototype.inAnyRange = function(u, _) {
				var T = this, E = this._cmp, D = this._ascending, O = this._descending, A = this._min, j = this._max;
				if (u.length === 0) return am(this);
				if (!u.every(function(u) {
					return u[0] !== void 0 && u[1] !== void 0 && D(u[0], u[1]) <= 0;
				})) return im(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", J.InvalidArgument);
				var M = !_ || _.includeLowers !== !1, P = _ && _.includeUppers === !0, F, I = D;
				function L(u, _) {
					return I(u[0], _[0]);
				}
				try {
					(F = u.reduce(function(u, _) {
						for (var T = 0, D = u.length; T < D; ++T) {
							var O = u[T];
							if (E(_[0], O[1]) < 0 && 0 < E(_[1], O[0])) {
								O[0] = A(O[0], _[0]), O[1] = j(O[1], _[1]);
								break;
							}
						}
						return T === D && u.push(_), u;
					}, [])).sort(L);
				} catch {
					return im(this, Ep);
				}
				var R = 0, z = P ? function(u) {
					return 0 < D(u, F[R][1]);
				} : function(u) {
					return 0 <= D(u, F[R][1]);
				}, B = M ? function(u) {
					return 0 < O(u, F[R][0]);
				} : function(u) {
					return 0 <= O(u, F[R][0]);
				}, V = z, u = new this.Collection(this, function() {
					return sm(F[0][0], F[F.length - 1][1], !M, !P);
				});
				return u._ondirectionchange = function(u) {
					I = u === "next" ? (V = z, D) : (V = B, O), F.sort(L);
				}, u._addAlgorithm(function(u, _, E) {
					for (var O, A = u.key; V(A);) if (++R === F.length) return _(E), !1;
					return !z(O = A) && !B(O) || (T._cmp(A, F[R][1]) === 0 || T._cmp(A, F[R][0]) === 0 || _(function() {
						I === D ? u.continue(F[R][0]) : u.continue(F[R][1]);
					}), !1);
				}), u;
			}, um.prototype.startsWithAnyOf = function() {
				var u = ff.apply(df, arguments);
				return u.every(function(u) {
					return typeof u == "string";
				}) ? u.length === 0 ? am(this) : this.inAnyRange(u.map(function(u) {
					return [u, u + Tp];
				})) : im(this, "startsWithAnyOf() only works with strings");
			}, um);
			function um() {}
			function dm(u) {
				return sp(function(_) {
					return fm(_), u(_.target.error), !1;
				});
			}
			function fm(u) {
				u.stopPropagation && u.stopPropagation(), u.preventDefault && u.preventDefault();
			}
			var pm = "storagemutated", mm = "x-storagemutated-1", hm = Hp(null, pm), gm = (_m.prototype._lock = function() {
				return Zd(!Z.global), ++this._reculock, this._reculock !== 1 || Z.global || (Z.lockOwnerFor = this), this;
			}, _m.prototype._unlock = function() {
				if (Zd(!Z.global), --this._reculock == 0) for (Z.global || (Z.lockOwnerFor = null); 0 < this._blockedFuncs.length && !this._locked();) {
					var u = this._blockedFuncs.shift();
					try {
						xp(u[1], u[0]);
					} catch {}
				}
				return this;
			}, _m.prototype._locked = function() {
				return this._reculock && Z.lockOwnerFor !== this;
			}, _m.prototype.create = function(u) {
				var _ = this;
				if (!this.mode) return this;
				var T = this.db.idbdb, E = this.db._state.dbOpenError;
				if (Zd(!this.idbtrans), !u && !T) switch (E && E.name) {
					case "DatabaseClosedError": throw new J.DatabaseClosed(E);
					case "MissingAPIError": throw new J.MissingAPI(E.message, E);
					default: throw new J.OpenFailed(E);
				}
				if (!this.active) throw new J.TransactionInactive();
				return Zd(this._completion._state === null), (u = this.idbtrans = u || (this.db.core || T).transaction(this.storeNames, this.mode, { durability: this.chromeTransactionDurability })).onerror = sp(function(T) {
					fm(T), _._reject(u.error);
				}), u.onabort = sp(function(T) {
					fm(T), _.active && _._reject(new J.Abort(u.error)), _.active = !1, _.on("abort").fire(T);
				}), u.oncomplete = sp(function() {
					_.active = !1, _._resolve(), "mutatedParts" in u && hm.storagemutated.fire(u.mutatedParts);
				}), this;
			}, _m.prototype._promise = function(u, _, T) {
				var E = this;
				if (u === "readwrite" && this.mode !== "readwrite") return wp(new J.ReadOnly("Transaction is readonly"));
				if (!this.active) return wp(new J.TransactionInactive());
				if (this._locked()) return new Q(function(D, O) {
					E._blockedFuncs.push([function() {
						E._promise(u, _, T).then(D, O);
					}, Z]);
				});
				if (T) return mp(function() {
					var u = new Q(function(u, T) {
						E._lock();
						var D = _(u, T, E);
						D && D.then && D.then(u, T);
					});
					return u.finally(function() {
						return E._unlock();
					}), u._lib = !0, u;
				});
				var D = new Q(function(u, T) {
					var D = _(u, T, E);
					D && D.then && D.then(u, T);
				});
				return D._lib = !0, D;
			}, _m.prototype._root = function() {
				return this.parent ? this.parent._root() : this;
			}, _m.prototype.waitFor = function(u) {
				var _, T = this._root(), E = Q.resolve(u);
				T._waitingFor ? T._waitingFor = T._waitingFor.then(function() {
					return E;
				}) : (T._waitingFor = E, T._waitingQueue = [], _ = T.idbtrans.objectStore(T.storeNames[0]), function u() {
					for (++T._spinCount; T._waitingQueue.length;) T._waitingQueue.shift()();
					T._waitingFor && (_.get(-Infinity).onsuccess = u);
				}());
				var D = T._waitingFor;
				return new Q(function(u, _) {
					E.then(function(_) {
						return T._waitingQueue.push(sp(u.bind(null, _)));
					}, function(u) {
						return T._waitingQueue.push(sp(_.bind(null, u)));
					}).finally(function() {
						T._waitingFor === D && (T._waitingFor = null);
					});
				});
			}, _m.prototype.abort = function() {
				this.active && (this.active = !1, this.idbtrans && this.idbtrans.abort(), this._reject(new J.Abort()));
			}, _m.prototype.table = function(u) {
				var _ = this._memoizedTables ||= {};
				if (P(_, u)) return _[u];
				var T = this.schema[u];
				if (!T) throw new J.NotFound("Table " + u + " not part of transaction");
				return T = new this.db.Table(u, T, this), T.core = this.db.core.table(u), _[u] = T;
			}, _m);
			function _m() {}
			function vm(u, _, T, E, D, O, A, j) {
				return {
					name: u,
					keyPath: _,
					unique: T,
					multi: E,
					auto: D,
					compound: O,
					src: (T && !A ? "&" : "") + (E ? "*" : "") + (D ? "++" : "") + ym(_),
					type: j
				};
			}
			function ym(u) {
				return typeof u == "string" ? u : u ? "[" + [].join.call(u, "+") + "]" : "";
			}
			function bm(u, _, T) {
				return {
					name: u,
					primKey: _,
					indexes: T,
					mappedClass: null,
					idxByName: (E = function(u) {
						return [u.name, u];
					}, T.reduce(function(u, _, T) {
						return T = E(_, T), T && (u[T[0]] = T[1]), u;
					}, {}))
				};
				var E;
			}
			var xm = function(u) {
				try {
					return u.only([[]]), xm = function() {
						return [[]];
					}, [[]];
				} catch {
					return xm = function() {
						return Tp;
					}, Tp;
				}
			};
			function Sm(u) {
				return u == null ? function() {} : typeof u == "string" ? (_ = u).split(".").length === 1 ? function(u) {
					return u[_];
				} : function(u) {
					return G(u, _);
				} : function(_) {
					return G(_, u);
				};
				var _;
			}
			function Cm(u) {
				return [].slice.call(u);
			}
			var wm = 0;
			function Tm(u) {
				return u == null ? ":id" : typeof u == "string" ? u : `[${u.join("+")}]`;
			}
			function Em(u, _, T) {
				function E(u) {
					if (u.type === 3) return null;
					if (u.type === 4) throw Error("Cannot convert never type to IDBKeyRange");
					var T = u.lower, E = u.upper, D = u.lowerOpen, u = u.upperOpen;
					return T === void 0 ? E === void 0 ? null : _.upperBound(E, !!u) : E === void 0 ? _.lowerBound(T, !!D) : _.bound(T, E, !!D, !!u);
				}
				function D(u) {
					var _, T = u.name;
					return {
						name: T,
						schema: u,
						mutate: function(u) {
							var _ = u.trans, D = u.type, O = u.keys, A = u.values, j = u.range;
							return new Promise(function(u, M) {
								u = sp(u);
								var P = _.objectStore(T), F = P.keyPath == null, I = D === "put" || D === "add";
								if (!I && D !== "delete" && D !== "deleteRange") throw Error("Invalid operation type: " + D);
								var L, R = (O || A || { length: 1 }).length;
								if (O && A && O.length !== A.length) throw Error("Given keys array must have same length as given values array.");
								if (R === 0) return u({
									numFailures: 0,
									failures: {},
									results: [],
									lastResult: void 0
								});
								function z(u) {
									++H, fm(u);
								}
								var B = [], V = [], H = 0;
								if (D === "deleteRange") {
									if (j.type === 4) return u({
										numFailures: H,
										failures: V,
										results: [],
										lastResult: void 0
									});
									j.type === 3 ? B.push(L = P.clear()) : B.push(L = P.delete(E(j)));
								} else {
									var F = I ? F ? [A, O] : [A, null] : [O, null], Zd = F[0], U = F[1];
									if (I) for (var G = 0; G < R; ++G) B.push(L = U && U[G] !== void 0 ? P[D](Zd[G], U[G]) : P[D](Zd[G])), L.onerror = z;
									else for (G = 0; G < R; ++G) B.push(L = P[D](Zd[G])), L.onerror = z;
								}
								function K(_) {
									_ = _.target.result, B.forEach(function(u, _) {
										return u.error != null && (V[_] = u.error);
									}), u({
										numFailures: H,
										failures: V,
										results: D === "delete" ? O : B.map(function(u) {
											return u.result;
										}),
										lastResult: _
									});
								}
								L.onerror = function(u) {
									z(u), K(u);
								}, L.onsuccess = K;
							});
						},
						getMany: function(u) {
							var _ = u.trans, E = u.keys;
							return new Promise(function(u, D) {
								u = sp(u);
								for (var O, A = _.objectStore(T), j = E.length, M = Array(j), P = 0, F = 0, I = function(_) {
									_ = _.target, M[_._pos] = _.result, ++F === P && u(M);
								}, L = dm(D), R = 0; R < j; ++R) E[R] != null && ((O = A.get(E[R]))._pos = R, O.onsuccess = I, O.onerror = L, ++P);
								P === 0 && u(M);
							});
						},
						get: function(u) {
							var _ = u.trans, E = u.key;
							return new Promise(function(u, D) {
								u = sp(u);
								var O = _.objectStore(T).get(E);
								O.onsuccess = function(_) {
									return u(_.target.result);
								}, O.onerror = dm(D);
							});
						},
						query: (_ = F, function(u) {
							return new Promise(function(D, O) {
								D = sp(D);
								var A, j, M, P = u.trans, F = u.values, I = u.limit, L = u.query, R = I === Infinity ? void 0 : I, z = L.index, L = L.range, P = P.objectStore(T), z = z.isPrimaryKey ? P : P.index(z.name), L = E(L);
								if (I === 0) return D({ result: [] });
								_ ? ((R = F ? z.getAll(L, R) : z.getAllKeys(L, R)).onsuccess = function(u) {
									return D({ result: u.target.result });
								}, R.onerror = dm(O)) : (A = 0, j = !F && "openKeyCursor" in z ? z.openKeyCursor(L) : z.openCursor(L), M = [], j.onsuccess = function(u) {
									var _ = j.result;
									return _ ? (M.push(F ? _.value : _.primaryKey), ++A === I ? D({ result: M }) : void _.continue()) : D({ result: M });
								}, j.onerror = dm(O));
							});
						}),
						openCursor: function(u) {
							var _ = u.trans, D = u.values, O = u.query, A = u.reverse, j = u.unique;
							return new Promise(function(u, M) {
								u = sp(u);
								var P = O.index, F = O.range, I = _.objectStore(T), I = P.isPrimaryKey ? I : I.index(P.name), P = A ? j ? "prevunique" : "prev" : j ? "nextunique" : "next", L = !D && "openKeyCursor" in I ? I.openKeyCursor(E(F), P) : I.openCursor(E(F), P);
								L.onerror = dm(M), L.onsuccess = sp(function(T) {
									var E, D, O, A, j = L.result;
									j ? (j.___id = ++wm, j.done = !1, E = j.continue.bind(j), D = (D = j.continuePrimaryKey) && D.bind(j), O = j.advance.bind(j), A = function() {
										throw Error("Cursor not stopped");
									}, j.trans = _, j.stop = j.continue = j.continuePrimaryKey = j.advance = function() {
										throw Error("Cursor not started");
									}, j.fail = sp(M), j.next = function() {
										var u = this, _ = 1;
										return this.start(function() {
											return _-- ? u.continue() : u.stop();
										}).then(function() {
											return u;
										});
									}, j.start = function(u) {
										function _() {
											if (L.result) try {
												u();
											} catch (u) {
												j.fail(u);
											}
											else j.done = !0, j.start = function() {
												throw Error("Cursor behind last entry");
											}, j.stop();
										}
										var T = new Promise(function(u, _) {
											u = sp(u), L.onerror = dm(_), j.fail = _, j.stop = function(_) {
												j.stop = j.continue = j.continuePrimaryKey = j.advance = A, u(_);
											};
										});
										return L.onsuccess = sp(function(u) {
											L.onsuccess = _, _();
										}), j.continue = E, j.continuePrimaryKey = D, j.advance = O, _(), T;
									}, u(j)) : u(null);
								}, M);
							});
						},
						count: function(u) {
							var _ = u.query, D = u.trans, O = _.index, A = _.range;
							return new Promise(function(u, _) {
								var j = D.objectStore(T), M = O.isPrimaryKey ? j : j.index(O.name), j = E(A), M = j ? M.count(j) : M.count();
								M.onsuccess = sp(function(_) {
									return u(_.target.result);
								}), M.onerror = dm(_);
							});
						}
					};
				}
				var A, j, M, P = (j = T, M = Cm((A = u).objectStoreNames), {
					schema: {
						name: A.name,
						tables: M.map(function(u) {
							return j.objectStore(u);
						}).map(function(u) {
							var _ = u.keyPath, T = u.autoIncrement, E = O(_), D = {}, T = {
								name: u.name,
								primaryKey: {
									name: null,
									isPrimaryKey: !0,
									outbound: _ == null,
									compound: E,
									keyPath: _,
									autoIncrement: T,
									unique: !0,
									extractKey: Sm(_)
								},
								indexes: Cm(u.indexNames).map(function(_) {
									return u.index(_);
								}).map(function(u) {
									var _ = u.name, T = u.unique, E = u.multiEntry, u = u.keyPath, E = {
										name: _,
										compound: O(u),
										keyPath: u,
										unique: T,
										multiEntry: E,
										extractKey: Sm(u)
									};
									return D[Tm(u)] = E;
								}),
								getIndexByKeyPath: function(u) {
									return D[Tm(u)];
								}
							};
							return D[":id"] = T.primaryKey, _ != null && (D[Tm(_)] = T.primaryKey), T;
						})
					},
					hasGetAll: 0 < M.length && "getAll" in j.objectStore(M[0]) && !(typeof navigator < "u" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
				}), T = P.schema, F = P.hasGetAll, P = T.tables.map(D), I = {};
				return P.forEach(function(u) {
					return I[u.name] = u;
				}), {
					stack: "dbcore",
					transaction: u.transaction.bind(u),
					table: function(u) {
						if (!I[u]) throw Error(`Table '${u}' not found`);
						return I[u];
					},
					MIN_KEY: -Infinity,
					MAX_KEY: xm(_),
					schema: T
				};
			}
			function Dm(u, T, E, D) {
				var O = E.IDBKeyRange;
				return E.indexedDB, { dbcore: (D = Em(T, O, D), u.dbcore.reduce(function(u, T) {
					return T = T.create, _(_({}, u), T(u));
				}, D)) };
			}
			function Om(u, _) {
				var T = _.db, _ = Dm(u._middlewares, T, u._deps, _);
				u.core = _.dbcore, u.tables.forEach(function(_) {
					var T = _.name;
					u.core.schema.tables.some(function(u) {
						return u.name === T;
					}) && (_.core = u.core.table(T), u[T] instanceof u.Table && (u[T].core = _.core));
				});
			}
			function km(u, _, T, E) {
				T.forEach(function(T) {
					var D = E[T];
					_.forEach(function(_) {
						var E = function u(_, T) {
							return z(_, T) || (_ = j(_)) && u(_, T);
						}(_, T);
						(!E || "value" in E && E.value === void 0) && (_ === u.Transaction.prototype || _ instanceof u.Transaction ? L(_, T, {
							get: function() {
								return this.table(T);
							},
							set: function(u) {
								I(this, T, {
									value: u,
									writable: !0,
									configurable: !0,
									enumerable: !0
								});
							}
						}) : _[T] = new u.Table(T, D));
					});
				});
			}
			function Am(u, _) {
				_.forEach(function(_) {
					for (var T in _) _[T] instanceof u.Table && delete _[T];
				});
			}
			function jm(u, _) {
				return u._cfg.version - _._cfg.version;
			}
			function Mm(u, _, T, E) {
				var O = u._dbSchema;
				T.objectStoreNames.contains("$meta") && !O.$meta && (O.$meta = bm("$meta", Bm("")[0], []), u._storeNames.push("$meta"));
				var A = u._createTransaction("readwrite", u._storeNames, O);
				A.create(T), A._completion.catch(E);
				var j = A._reject.bind(A), M = Z.transless || Z;
				mp(function() {
					return Z.trans = A, Z.transless = M, _ === 0 ? (D(O).forEach(function(u) {
						Fm(T, u, O[u].primKey, O[u].indexes);
					}), Om(u, T), void Q.follow(function() {
						return u.on.populate.fire(A);
					}).catch(j)) : (Om(u, T), P = _, ((E = A).storeNames.includes("$meta") ? E.table("$meta").get("version").then(function(u) {
						return u ?? P;
					}) : Q.resolve(P)).then(function(_) {
						return O = _, j = A, M = T, P = [], _ = (E = u)._versions, F = E._dbSchema = Rm(0, E.idbdb, M), (_ = _.filter(function(u) {
							return u._cfg.version >= O;
						})).length === 0 ? Q.resolve() : (_.forEach(function(u) {
							P.push(function() {
								var _ = F, T = u._cfg.dbschema;
								zm(E, _, M), zm(E, T, M), F = E._dbSchema = T;
								var A = Pm(_, T);
								A.add.forEach(function(u) {
									Fm(M, u[0], u[1].primKey, u[1].indexes);
								}), A.change.forEach(function(u) {
									if (u.recreate) throw new J.Upgrade("Not yet support for changing primary key");
									var _ = M.objectStore(u.name);
									u.add.forEach(function(u) {
										return Lm(_, u);
									}), u.change.forEach(function(u) {
										_.deleteIndex(u.name), Lm(_, u);
									}), u.del.forEach(function(u) {
										return _.deleteIndex(u);
									});
								});
								var P = u._cfg.contentUpgrade;
								if (P && u._cfg.version > O) {
									Om(E, M), j._memoizedTables = {};
									var I = Qd(T);
									A.del.forEach(function(u) {
										I[u] = _[u];
									}), Am(E, [E.Transaction.prototype]), km(E, [E.Transaction.prototype], D(I), I), j.schema = I;
									var L, R = pf(P);
									return R && hp(), A = Q.follow(function() {
										var u;
										(L = P(j)) && R && (u = gp.bind(null, null), L.then(u, u));
									}), L && typeof L.then == "function" ? Q.resolve(L) : A.then(function() {
										return L;
									});
								}
							}), P.push(function(_) {
								var T = u._cfg.dbschema, D = _;
								[].slice.call(D.db.objectStoreNames).forEach(function(u) {
									return T[u] == null && D.db.deleteObjectStore(u);
								}), Am(E, [E.Transaction.prototype]), km(E, [E.Transaction.prototype], E._storeNames, E._dbSchema), j.schema = E._dbSchema;
							}), P.push(function(_) {
								E.idbdb.objectStoreNames.contains("$meta") && (Math.ceil(E.idbdb.version / 10) === u._cfg.version ? (E.idbdb.deleteObjectStore("$meta"), delete E._dbSchema.$meta, E._storeNames = E._storeNames.filter(function(u) {
									return u !== "$meta";
								})) : _.objectStore("$meta").put(u._cfg.version, "version"));
							});
						}), function u() {
							return P.length ? Q.resolve(P.shift()(j.idbtrans)).then(u) : Q.resolve();
						}().then(function() {
							Im(F, M);
						}));
						var E, O, j, M, P, F;
					}).catch(j));
					var E, P;
				});
			}
			function Nm(u, _) {
				Im(u._dbSchema, _), _.db.version % 10 != 0 || _.objectStoreNames.contains("$meta") || _.db.createObjectStore("$meta").add(Math.ceil(_.db.version / 10 - 1), "version");
				var T = Rm(0, u.idbdb, _);
				zm(u, u._dbSchema, _);
				for (var E = 0, D = Pm(T, u._dbSchema).change; E < D.length; E++) {
					var O = function(u) {
						if (u.change.length || u.recreate) return console.warn(`Unable to patch indexes of table ${u.name} because it has changes on the type of index or primary key.`), { value: void 0 };
						var T = _.objectStore(u.name);
						u.add.forEach(function(_) {
							Pf && console.debug(`Dexie upgrade patch: Creating missing index ${u.name}.${_.src}`), Lm(T, _);
						});
					}(D[E]);
					if (typeof O == "object") return O.value;
				}
			}
			function Pm(u, _) {
				var T, E = {
					del: [],
					add: [],
					change: []
				};
				for (T in u) _[T] || E.del.push(T);
				for (T in _) {
					var D = u[T], O = _[T];
					if (D) {
						var A = {
							name: T,
							def: O,
							recreate: !1,
							del: [],
							add: [],
							change: []
						};
						if ("" + (D.primKey.keyPath || "") != "" + (O.primKey.keyPath || "") || D.primKey.auto !== O.primKey.auto) A.recreate = !0, E.change.push(A);
						else {
							var j = D.idxByName, M = O.idxByName, P = void 0;
							for (P in j) M[P] || A.del.push(P);
							for (P in M) {
								var F = j[P], I = M[P];
								F ? F.src !== I.src && A.change.push(I) : A.add.push(I);
							}
							(0 < A.del.length || 0 < A.add.length || 0 < A.change.length) && E.change.push(A);
						}
					} else E.add.push([T, O]);
				}
				return E;
			}
			function Fm(u, _, T, E) {
				var D = u.db.createObjectStore(_, T.keyPath ? {
					keyPath: T.keyPath,
					autoIncrement: T.auto
				} : { autoIncrement: T.auto });
				return E.forEach(function(u) {
					return Lm(D, u);
				}), D;
			}
			function Im(u, _) {
				D(u).forEach(function(T) {
					_.db.objectStoreNames.contains(T) || (Pf && console.debug("Dexie: Creating missing table", T), Fm(_, T, u[T].primKey, u[T].indexes));
				});
			}
			function Lm(u, _) {
				u.createIndex(_.name, _.keyPath, {
					unique: _.unique,
					multiEntry: _.multi
				});
			}
			function Rm(u, _, T) {
				var E = {};
				return V(_.objectStoreNames, 0).forEach(function(u) {
					for (var _ = T.objectStore(u), D = vm(ym(M = _.keyPath), M || "", !0, !1, !!_.autoIncrement, M && typeof M != "string", !0), O = [], A = 0; A < _.indexNames.length; ++A) {
						var j = _.index(_.indexNames[A]), M = j.keyPath, j = vm(j.name, M, !!j.unique, !!j.multiEntry, !1, M && typeof M != "string", !1);
						O.push(j);
					}
					E[u] = bm(u, D, O);
				}), E;
			}
			function zm(u, _, T) {
				for (var D = T.db.objectStoreNames, O = 0; O < D.length; ++O) {
					var A = D[O], j = T.objectStore(A);
					u._hasGetAll = "getAll" in j;
					for (var M = 0; M < j.indexNames.length; ++M) {
						var P = j.indexNames[M], F = j.index(P).keyPath, I = typeof F == "string" ? F : "[" + V(F).join("+") + "]";
						!_[A] || (F = _[A].idxByName[I]) && (F.name = P, delete _[A].idxByName[I], _[A].idxByName[P] = F);
					}
				}
				typeof navigator < "u" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && E.WorkerGlobalScope && E instanceof E.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604 && (u._hasGetAll = !1);
			}
			function Bm(u) {
				return u.split(",").map(function(u, _) {
					var T = u.split(":"), E = (D = T[1])?.trim(), D = (u = T[0].trim()).replace(/([&*]|\+\+)/g, ""), T = /^\[/.test(D) ? D.match(/^\[(.*)\]$/)[1].split("+") : D;
					return vm(D, T || null, /\&/.test(u), /\*/.test(u), /\+\+/.test(u), O(T), _ === 0, E);
				});
			}
			var Vm = (Hm.prototype._createTableSchema = bm, Hm.prototype._parseIndexSyntax = Bm, Hm.prototype._parseStoresSpec = function(u, _) {
				var T = this;
				D(u).forEach(function(E) {
					if (u[E] !== null) {
						var D = T._parseIndexSyntax(u[E]), O = D.shift();
						if (!O) throw new J.Schema("Invalid schema for table " + E + ": " + u[E]);
						if (O.unique = !0, O.multi) throw new J.Schema("Primary key cannot be multiEntry*");
						D.forEach(function(u) {
							if (u.auto) throw new J.Schema("Only primary key can be marked as autoIncrement (++)");
							if (!u.keyPath) throw new J.Schema("Index must have a name and cannot be an empty string");
						}), D = T._createTableSchema(E, O, D), _[E] = D;
					}
				});
			}, Hm.prototype.stores = function(u) {
				var _ = this.db;
				this._cfg.storesSource = this._cfg.storesSource ? A(this._cfg.storesSource, u) : u;
				var u = _._versions, T = {}, E = {};
				return u.forEach(function(u) {
					A(T, u._cfg.storesSource), E = u._cfg.dbschema = {}, u._parseStoresSpec(T, E);
				}), _._dbSchema = E, Am(_, [
					_._allTables,
					_,
					_.Transaction.prototype
				]), km(_, [
					_._allTables,
					_,
					_.Transaction.prototype,
					this._cfg.tables
				], D(E), E), _._storeNames = D(E), this;
			}, Hm.prototype.upgrade = function(u) {
				return this._cfg.contentUpgrade = Nf(this._cfg.contentUpgrade || Tf, u), this;
			}, Hm);
			function Hm() {}
			function Um(u, _) {
				var T = u._dbNamesDB;
				return T || (T = u._dbNamesDB = new Oh(kp, {
					addons: [],
					indexedDB: u,
					IDBKeyRange: _
				})).version(1).stores({ dbnames: "name" }), T.table("dbnames");
			}
			function Wm(u) {
				return u && typeof u.databases == "function";
			}
			function Gm(u) {
				return mp(function() {
					return Z.letThrough = !0, u();
				});
			}
			function Km(u) {
				return !("from" in u);
			}
			var qm = function(u, _) {
				if (!this) {
					var T = new qm();
					return u && "d" in u && A(T, u), T;
				}
				A(this, arguments.length ? {
					d: 1,
					from: u,
					to: 1 < arguments.length ? _ : u
				} : { d: 0 });
			};
			function Jm(u, _, T) {
				var E = Ip(_, T);
				if (!isNaN(E)) {
					if (0 < E) throw RangeError();
					if (Km(u)) return A(u, {
						from: _,
						to: T,
						d: 1
					});
					var D = u.l, E = u.r;
					if (Ip(T, u.from) < 0) return D ? Jm(D, _, T) : u.l = {
						from: _,
						to: T,
						d: 1,
						l: null,
						r: null
					}, Qm(u);
					if (0 < Ip(_, u.to)) return E ? Jm(E, _, T) : u.r = {
						from: _,
						to: T,
						d: 1,
						l: null,
						r: null
					}, Qm(u);
					Ip(_, u.from) < 0 && (u.from = _, u.l = null, u.d = E ? E.d + 1 : 1), 0 < Ip(T, u.to) && (u.to = T, u.r = null, u.d = u.l ? u.l.d + 1 : 1), T = !u.r, D && !u.l && Ym(u, D), E && T && Ym(u, E);
				}
			}
			function Ym(u, _) {
				Km(_) || function u(_, T) {
					var E = T.from, D = T.to, O = T.l, T = T.r;
					Jm(_, E, D), O && u(_, O), T && u(_, T);
				}(u, _);
			}
			function Xm(u, _) {
				var T = Zm(_), E = T.next();
				if (E.done) return !1;
				for (var D = E.value, O = Zm(u), A = O.next(D.from), j = A.value; !E.done && !A.done;) {
					if (Ip(j.from, D.to) <= 0 && 0 <= Ip(j.to, D.from)) return !0;
					Ip(D.from, j.from) < 0 ? D = (E = T.next(j.from)).value : j = (A = O.next(D.from)).value;
				}
				return !1;
			}
			function Zm(u) {
				var _ = Km(u) ? null : {
					s: 0,
					n: u
				};
				return { next: function(u) {
					for (var T = 0 < arguments.length; _;) switch (_.s) {
						case 0: if (_.s = 1, T) for (; _.n.l && Ip(u, _.n.from) < 0;) _ = {
							up: _,
							n: _.n.l,
							s: 1
						};
						else for (; _.n.l;) _ = {
							up: _,
							n: _.n.l,
							s: 1
						};
						case 1: if (_.s = 2, !T || Ip(u, _.n.to) <= 0) return {
							value: _.n,
							done: !1
						};
						case 2: if (_.n.r) {
							_.s = 3, _ = {
								up: _,
								n: _.n.r,
								s: 0
							};
							continue;
						}
						case 3: _ = _.up;
					}
					return { done: !0 };
				} };
			}
			function Qm(u) {
				var T, E, D = ((T = u.r)?.d || 0) - ((E = u.l)?.d || 0), O = 1 < D ? "r" : D < -1 ? "l" : "";
				O && (T = O == "r" ? "l" : "r", E = _({}, u), D = u[O], u.from = D.from, u.to = D.to, u[O] = D[O], E[O] = D[T], (u[T] = E).d = $m(E)), u.d = $m(u);
			}
			function $m(u) {
				var _ = u.r, u = u.l;
				return (_ ? u ? Math.max(_.d, u.d) : _.d : u ? u.d : 0) + 1;
			}
			function eh(u, _) {
				return D(_).forEach(function(T) {
					u[T] ? Ym(u[T], _[T]) : u[T] = function u(_) {
						var T, E, D = {};
						for (T in _) P(_, T) && (E = _[T], D[T] = !E || typeof E != "object" || nf.has(E.constructor) ? E : u(E));
						return D;
					}(_[T]);
				}), u;
			}
			function th(u, _) {
				return u.all || _.all || Object.keys(u).some(function(T) {
					return _[T] && Xm(_[T], u[T]);
				});
			}
			F(qm.prototype, ((hf = {
				add: function(u) {
					return Ym(this, u), this;
				},
				addKey: function(u) {
					return Jm(this, u, u), this;
				},
				addKeys: function(u) {
					var _ = this;
					return u.forEach(function(u) {
						return Jm(_, u, u);
					}), this;
				},
				hasKey: function(u) {
					var _ = Zm(this).next(u).value;
					return _ && Ip(_.from, u) <= 0 && 0 <= Ip(_.to, u);
				}
			})[cf] = function() {
				return Zm(this);
			}, hf));
			var nh = {}, rh = {}, ih = !1;
			function ah(u) {
				eh(rh, u), ih || (ih = !0, setTimeout(function() {
					ih = !1, oh(rh, !(rh = {}));
				}, 0));
			}
			function oh(u, _) {
				_ === void 0 && (_ = !1);
				var T = /* @__PURE__ */ new Set();
				if (u.all) for (var E = 0, D = Object.values(nh); E < D.length; E++) sh(A = D[E], u, T, _);
				else for (var O in u) {
					var A, j = /^idb\:\/\/(.*)\/(.*)\//.exec(O);
					j && (O = j[1], j = j[2], (A = nh[`idb://${O}/${j}`]) && sh(A, u, T, _));
				}
				T.forEach(function(u) {
					return u();
				});
			}
			function sh(u, _, T, E) {
				for (var D = [], O = 0, A = Object.entries(u.queries.query); O < A.length; O++) {
					for (var j = A[O], M = j[0], P = [], F = 0, I = j[1]; F < I.length; F++) {
						var L = I[F];
						th(_, L.obsSet) ? L.subscribers.forEach(function(u) {
							return T.add(u);
						}) : E && P.push(L);
					}
					E && D.push([M, P]);
				}
				if (E) for (var R = 0, z = D; R < z.length; R++) {
					var B = z[R], M = B[0], P = B[1];
					u.queries.query[M] = P;
				}
			}
			function ch(u) {
				var _ = u._state, T = u._deps.indexedDB;
				if (_.isBeingOpened || u.idbdb) return _.dbReadyPromise.then(function() {
					return _.dbOpenError ? wp(_.dbOpenError) : u;
				});
				_.isBeingOpened = !0, _.dbOpenError = null, _.openComplete = !1;
				var E = _.openCanceller, O = Math.round(10 * u.verno), A = !1;
				function j() {
					if (_.openCanceller !== E) throw new J.DatabaseClosed("db.open() was cancelled");
				}
				function M() {
					return new Q(function(E, P) {
						if (j(), !T) throw new J.MissingAPI();
						var F = u.name, R = _.autoSchema || !O ? T.open(F) : T.open(F, O);
						if (!R) throw new J.MissingAPI();
						R.onerror = dm(P), R.onblocked = sp(u._fireOnBlocked), R.onupgradeneeded = sp(function(E) {
							var D;
							I = R.transaction, _.autoSchema && !u._options.allowEmptyDB ? (R.onerror = fm, I.abort(), R.result.close(), (D = T.deleteDatabase(F)).onsuccess = D.onerror = sp(function() {
								P(new J.NoSuchDatabase(`Database ${F} doesnt exist`));
							})) : (I.onerror = dm(P), E = E.oldVersion > 2 ** 62 ? 0 : E.oldVersion, L = E < 1, u.idbdb = R.result, A && Nm(u, I), Mm(u, E / 10, I, P));
						}, P), R.onsuccess = sp(function() {
							I = null;
							var T, j, P, z, B, H = u.idbdb = R.result, Zd = V(H.objectStoreNames);
							if (0 < Zd.length) try {
								var U = H.transaction((z = Zd).length === 1 ? z[0] : z, "readonly");
								if (_.autoSchema) j = H, P = U, (T = u).verno = j.version / 10, P = T._dbSchema = Rm(0, j, P), T._storeNames = V(j.objectStoreNames, 0), km(T, [T._allTables], D(P), P);
								else if (zm(u, u._dbSchema, U), ((B = Pm(Rm(0, (B = u).idbdb, U), B._dbSchema)).add.length || B.change.some(function(u) {
									return u.add.length || u.change.length;
								})) && !A) return console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Dexie will add missing parts and increment native version number to workaround this."), H.close(), O = H.version + 1, A = !0, E(M());
								Om(u, U);
							} catch {}
							Op.push(u), H.onversionchange = sp(function(T) {
								_.vcFired = !0, u.on("versionchange").fire(T);
							}), H.onclose = sp(function(_) {
								u.on("close").fire(_);
							}), L && (B = u._deps, U = F, H = B.indexedDB, B = B.IDBKeyRange, Wm(H) || U === kp || Um(H, B).put({ name: U }).catch(Tf)), E();
						}, P);
					}).catch(function(u) {
						switch (u?.name) {
							case "UnknownError":
								if (0 < _.PR1398_maxLoop) return _.PR1398_maxLoop--, console.warn("Dexie: Workaround for Chrome UnknownError on open()"), M();
								break;
							case "VersionError": if (0 < O) return O = 0, M();
						}
						return Q.reject(u);
					});
				}
				var P, F = _.dbReadyResolve, I = null, L = !1;
				return Q.race([E, (typeof navigator > "u" ? Q.resolve() : !navigator.userAgentData && /Safari\//.test(navigator.userAgent) && !/Chrom(e|ium)\//.test(navigator.userAgent) && indexedDB.databases ? new Promise(function(u) {
					function _() {
						return indexedDB.databases().finally(u);
					}
					P = setInterval(_, 100), _();
				}).finally(function() {
					return clearInterval(P);
				}) : Promise.resolve()).then(M)]).then(function() {
					return j(), _.onReadyBeingFired = [], Q.resolve(Gm(function() {
						return u.on.ready.fire(u.vip);
					})).then(function T() {
						if (0 < _.onReadyBeingFired.length) {
							var E = _.onReadyBeingFired.reduce(Nf, Tf);
							return _.onReadyBeingFired = [], Q.resolve(Gm(function() {
								return E(u.vip);
							})).then(T);
						}
					});
				}).finally(function() {
					_.openCanceller === E && (_.onReadyBeingFired = null, _.isBeingOpened = !1);
				}).catch(function(T) {
					_.dbOpenError = T;
					try {
						I && I.abort();
					} catch {}
					return E === _.openCanceller && u._close(), wp(T);
				}).finally(function() {
					_.openComplete = !0, F();
				}).then(function() {
					var _;
					return L && (_ = {}, u.tables.forEach(function(T) {
						T.schema.indexes.forEach(function(E) {
							E.name && (_[`idb://${u.name}/${T.name}/${E.name}`] = new qm(-Infinity, [[[]]]));
						}), _[`idb://${u.name}/${T.name}/`] = _[`idb://${u.name}/${T.name}/:dels`] = new qm(-Infinity, [[[]]]);
					}), hm(pm).fire(_), oh(_, !0)), u;
				});
			}
			function lh(u) {
				function _(_) {
					return u.next(_);
				}
				var T = D(_), E = D(function(_) {
					return u.throw(_);
				});
				function D(u) {
					return function(_) {
						var D = u(_), _ = D.value;
						return D.done ? _ : _ && typeof _.then == "function" ? _.then(T, E) : O(_) ? Promise.all(_).then(T, E) : T(_);
					};
				}
				return D(_)();
			}
			function uh(u, _, T) {
				for (var E = O(u) ? u.slice() : [u], D = 0; D < T; ++D) E.push(_);
				return E;
			}
			var dh = {
				stack: "dbcore",
				name: "VirtualIndexMiddleware",
				level: 1,
				create: function(u) {
					return _(_({}, u), { table: function(T) {
						var E = u.table(T), D = E.schema, O = {}, A = [];
						function j(u, T, E) {
							var D = Tm(u), M = O[D] = O[D] || [], P = u == null ? 0 : typeof u == "string" ? 1 : u.length, F = 0 < T, F = _(_({}, E), {
								name: F ? `${D}(virtual-from:${E.name})` : E.name,
								lowLevelIndex: E,
								isVirtual: F,
								keyTail: T,
								keyLength: P,
								extractKey: Sm(u),
								unique: !F && E.unique
							});
							return M.push(F), F.isPrimaryKey || A.push(F), 1 < P && j(P === 2 ? u[0] : u.slice(0, P - 1), T + 1, E), M.sort(function(u, _) {
								return u.keyTail - _.keyTail;
							}), F;
						}
						T = j(D.primaryKey.keyPath, 0, D.primaryKey), O[":id"] = [T];
						for (var M = 0, P = D.indexes; M < P.length; M++) {
							var F = P[M];
							j(F.keyPath, 0, F);
						}
						function I(T) {
							var E, D = T.query.index;
							return D.isVirtual ? _(_({}, T), { query: {
								index: D.lowLevelIndex,
								range: (E = T.query.range, D = D.keyTail, {
									type: E.type === 1 ? 2 : E.type,
									lower: uh(E.lower, E.lowerOpen ? u.MAX_KEY : u.MIN_KEY, D),
									lowerOpen: !0,
									upper: uh(E.upper, E.upperOpen ? u.MIN_KEY : u.MAX_KEY, D),
									upperOpen: !0
								})
							} }) : T;
						}
						return _(_({}, E), {
							schema: _(_({}, D), {
								primaryKey: T,
								indexes: A,
								getIndexByKeyPath: function(u) {
									return (u = O[Tm(u)]) && u[0];
								}
							}),
							count: function(u) {
								return E.count(I(u));
							},
							query: function(u) {
								return E.query(I(u));
							},
							openCursor: function(_) {
								var T = _.query.index, D = T.keyTail, O = T.isVirtual, A = T.keyLength;
								return O ? E.openCursor(I(_)).then(function(u) {
									return u && j(u);
								}) : E.openCursor(_);
								function j(T) {
									return Object.create(T, {
										continue: { value: function(E) {
											E == null ? _.unique ? T.continue(T.key.slice(0, A).concat(_.reverse ? u.MIN_KEY : u.MAX_KEY, D)) : T.continue() : T.continue(uh(E, _.reverse ? u.MAX_KEY : u.MIN_KEY, D));
										} },
										continuePrimaryKey: { value: function(_, E) {
											T.continuePrimaryKey(uh(_, u.MAX_KEY, D), E);
										} },
										primaryKey: { get: function() {
											return T.primaryKey;
										} },
										key: { get: function() {
											var u = T.key;
											return A === 1 ? u[0] : u.slice(0, A);
										} },
										value: { get: function() {
											return T.value;
										} }
									});
								}
							}
						});
					} });
				}
			};
			function fh(u, _, T, E) {
				return T ||= {}, E ||= "", D(u).forEach(function(D) {
					var O, A, j;
					P(_, D) ? (O = u[D], A = _[D], typeof O == "object" && typeof A == "object" && O && A ? (j = sf(O)) === sf(A) ? j === "Object" ? fh(O, A, T, E + D + ".") : O !== A && (T[E + D] = _[D]) : T[E + D] = _[D] : O !== A && (T[E + D] = _[D])) : T[E + D] = void 0;
				}), D(_).forEach(function(D) {
					P(u, D) || (T[E + D] = _[D]);
				}), T;
			}
			function ph(u, _) {
				return _.type === "delete" ? _.keys : _.keys || _.values.map(u.extractKey);
			}
			var mh = {
				stack: "dbcore",
				name: "HooksMiddleware",
				level: 2,
				create: function(u) {
					return _(_({}, u), { table: function(E) {
						var D = u.table(E), O = D.schema.primaryKey;
						return _(_({}, D), { mutate: function(u) {
							var A = Z.trans, j = A.table(E).hook, M = j.deleting, F = j.creating, I = j.updating;
							switch (u.type) {
								case "add":
									if (F.fire === Tf) break;
									return A._promise("readwrite", function() {
										return L(u);
									}, !0);
								case "put":
									if (F.fire === Tf && I.fire === Tf) break;
									return A._promise("readwrite", function() {
										return L(u);
									}, !0);
								case "delete":
									if (M.fire === Tf) break;
									return A._promise("readwrite", function() {
										return L(u);
									}, !0);
								case "deleteRange":
									if (M.fire === Tf) break;
									return A._promise("readwrite", function() {
										return function u(T, E, A) {
											return D.query({
												trans: T,
												values: !1,
												query: {
													index: O,
													range: E
												},
												limit: A
											}).then(function(D) {
												var O = D.result;
												return L({
													type: "delete",
													keys: O,
													trans: T
												}).then(function(D) {
													return 0 < D.numFailures ? Promise.reject(D.failures[0]) : O.length < A ? {
														failures: [],
														numFailures: 0,
														lastResult: void 0
													} : u(T, _(_({}, E), {
														lower: O[O.length - 1],
														lowerOpen: !0
													}), A);
												});
											});
										}(u.trans, u.range, 1e4);
									}, !0);
							}
							return D.mutate(u);
							function L(u) {
								var E, A, j, L = Z.trans, R = u.keys || ph(O, u);
								if (!R) throw Error("Keys missing");
								return (u = u.type === "add" || u.type === "put" ? _(_({}, u), { keys: R }) : _({}, u)).type !== "delete" && (u.values = T([], u.values)), u.keys &&= T([], u.keys), E = D, j = R, ((A = u).type === "add" ? Promise.resolve([]) : E.getMany({
									trans: A.trans,
									keys: j,
									cache: "immutable"
								})).then(function(_) {
									var T = R.map(function(T, E) {
										var D, A, j, R = _[E], z = {
											onerror: null,
											onsuccess: null
										};
										return u.type === "delete" ? M.fire.call(z, T, R, L) : u.type === "add" || R === void 0 ? (D = F.fire.call(z, T, u.values[E], L), T == null && D != null && (u.keys[E] = T = D, O.outbound || K(u.values[E], O.keyPath, T))) : (D = fh(R, u.values[E]), (A = I.fire.call(z, D, T, R, L)) && (j = u.values[E], Object.keys(A).forEach(function(u) {
											P(j, u) ? j[u] = A[u] : K(j, u, A[u]);
										}))), z;
									});
									return D.mutate(u).then(function(E) {
										for (var D = E.failures, O = E.results, A = E.numFailures, E = E.lastResult, j = 0; j < R.length; ++j) {
											var M = (O || R)[j], P = T[j];
											M == null ? P.onerror && P.onerror(D[j]) : P.onsuccess && P.onsuccess(u.type === "put" && _[j] ? u.values[j] : M);
										}
										return {
											failures: D,
											results: O,
											numFailures: A,
											lastResult: E
										};
									}).catch(function(u) {
										return T.forEach(function(_) {
											return _.onerror && _.onerror(u);
										}), Promise.reject(u);
									});
								});
							}
						} });
					} });
				}
			};
			function hh(u, _, T) {
				try {
					if (!_ || _.keys.length < u.length) return null;
					for (var E = [], D = 0, O = 0; D < _.keys.length && O < u.length; ++D) Ip(_.keys[D], u[O]) === 0 && (E.push(T ? af(_.values[D]) : _.values[D]), ++O);
					return E.length === u.length ? E : null;
				} catch {
					return null;
				}
			}
			var gh = {
				stack: "dbcore",
				level: -1,
				create: function(u) {
					return { table: function(T) {
						var E = u.table(T);
						return _(_({}, E), {
							getMany: function(u) {
								if (!u.cache) return E.getMany(u);
								var _ = hh(u.keys, u.trans._cache, u.cache === "clone");
								return _ ? Q.resolve(_) : E.getMany(u).then(function(_) {
									return u.trans._cache = {
										keys: u.keys,
										values: u.cache === "clone" ? af(_) : _
									}, _;
								});
							},
							mutate: function(u) {
								return u.type !== "add" && (u.trans._cache = null), E.mutate(u);
							}
						});
					} };
				}
			};
			function _h(u, _) {
				return u.trans.mode === "readonly" && !!u.subscr && !u.trans.explicit && u.trans.db._options.cache !== "disabled" && !_.schema.primaryKey.outbound;
			}
			function vh(u, _) {
				switch (u) {
					case "query": return _.values && !_.unique;
					case "get":
					case "getMany":
					case "count":
					case "openCursor": return !1;
				}
			}
			var yh = {
				stack: "dbcore",
				level: 0,
				name: "Observability",
				create: function(u) {
					var T = u.schema.name, E = new qm(u.MIN_KEY, u.MAX_KEY);
					return _(_({}, u), {
						transaction: function(_, T, E) {
							if (Z.subscr && T !== "readonly") throw new J.ReadOnly(`Readwrite transaction in liveQuery context. Querier source: ${Z.querier}`);
							return u.transaction(_, T, E);
						},
						table: function(A) {
							var j = u.table(A), M = j.schema, P = M.primaryKey, F = M.indexes, I = P.extractKey, L = P.outbound, R = P.autoIncrement && F.filter(function(u) {
								return u.compound && u.keyPath.includes(P.keyPath);
							}), z = _(_({}, j), { mutate: function(_) {
								function D(u) {
									return u = `idb://${T}/${A}/${u}`, B[u] || (B[u] = new qm());
								}
								var F, I, L, z = _.trans, B = _.mutatedParts ||= {}, V = D(""), H = D(":dels"), Zd = _.type, U = _.type === "deleteRange" ? [_.range] : _.type === "delete" ? [_.keys] : _.values.length < 50 ? [ph(P, _).filter(function(u) {
									return u;
								}), _.values] : [], G = U[0], K = U[1], U = _.trans._cache;
								return O(G) ? (V.addKeys(G), (U = Zd === "delete" || G.length === K.length ? hh(G, U) : null) || H.addKeys(G), (U || K) && (F = D, I = U, L = K, M.indexes.forEach(function(u) {
									var _ = F(u.name || "");
									function T(_) {
										return _ == null ? null : u.extractKey(_);
									}
									function E(T) {
										return u.multiEntry && O(T) ? T.forEach(function(u) {
											return _.addKey(u);
										}) : _.addKey(T);
									}
									(I || L).forEach(function(u, _) {
										var D = I && T(I[_]), _ = L && T(L[_]);
										Ip(D, _) !== 0 && (D != null && E(D), _ != null && E(_));
									});
								}))) : G ? (K = {
									from: (K = G.lower) ?? u.MIN_KEY,
									to: (K = G.upper) ?? u.MAX_KEY
								}, H.add(K), V.add(K)) : (V.add(E), H.add(E), M.indexes.forEach(function(u) {
									return D(u.name).add(E);
								})), j.mutate(_).then(function(u) {
									return !G || _.type !== "add" && _.type !== "put" || (V.addKeys(u.results), R && R.forEach(function(T) {
										for (var E = _.values.map(function(u) {
											return T.extractKey(u);
										}), O = T.keyPath.findIndex(function(u) {
											return u === P.keyPath;
										}), A = 0, j = u.results.length; A < j; ++A) E[A][O] = u.results[A];
										D(T.name).addKeys(E);
									})), z.mutatedParts = eh(z.mutatedParts || {}, B), u;
								});
							} }), F = function(_) {
								var T = _.query, _ = T.index, T = T.range;
								return [_, new qm((_ = T.lower) ?? u.MIN_KEY, (T = T.upper) ?? u.MAX_KEY)];
							}, B = {
								get: function(u) {
									return [P, new qm(u.key)];
								},
								getMany: function(u) {
									return [P, new qm().addKeys(u.keys)];
								},
								count: F,
								query: F,
								openCursor: F
							};
							return D(B).forEach(function(u) {
								z[u] = function(D) {
									var O = Z.subscr, M = !!O, P = _h(Z, j) && vh(u, D) ? D.obsSet = {} : O;
									if (M) {
										var F = function(u) {
											return u = `idb://${T}/${A}/${u}`, P[u] || (P[u] = new qm());
										}, R = F(""), z = F(":dels"), O = B[u](D), M = O[0], O = O[1];
										if ((u === "query" && M.isPrimaryKey && !D.values ? z : F(M.name || "")).add(O), !M.isPrimaryKey) {
											if (u !== "count") {
												var V = u === "query" && L && D.values && j.query(_(_({}, D), { values: !1 }));
												return j[u].apply(this, arguments).then(function(_) {
													if (u === "query") {
														if (L && D.values) return V.then(function(u) {
															return u = u.result, R.addKeys(u), _;
														});
														var T = D.values ? _.result.map(I) : _.result;
														(D.values ? R : z).addKeys(T);
													} else if (u === "openCursor") {
														var E = _, O = D.values;
														return E && Object.create(E, {
															key: { get: function() {
																return z.addKey(E.primaryKey), E.key;
															} },
															primaryKey: { get: function() {
																var u = E.primaryKey;
																return z.addKey(u), u;
															} },
															value: { get: function() {
																return O && R.addKey(E.primaryKey), E.value;
															} }
														});
													}
													return _;
												});
											}
											z.add(E);
										}
									}
									return j[u].apply(this, arguments);
								};
							}), z;
						}
					});
				}
			};
			function bh(u, T, E) {
				if (E.numFailures === 0) return T;
				if (T.type === "deleteRange") return null;
				var D = T.keys ? T.keys.length : "values" in T && T.values ? T.values.length : 1;
				return E.numFailures === D ? null : (T = _({}, T), O(T.keys) && (T.keys = T.keys.filter(function(u, _) {
					return !(_ in E.failures);
				})), "values" in T && O(T.values) && (T.values = T.values.filter(function(u, _) {
					return !(_ in E.failures);
				})), T);
			}
			function xh(u, _) {
				return T = u, ((E = _).lower === void 0 || (E.lowerOpen ? 0 < Ip(T, E.lower) : 0 <= Ip(T, E.lower))) && (u = u, (_ = _).upper === void 0 || (_.upperOpen ? Ip(u, _.upper) < 0 : Ip(u, _.upper) <= 0));
				var T, E;
			}
			function Sh(u, _, T, E, D, A) {
				if (!T || T.length === 0) return u;
				var j = _.query.index, M = j.multiEntry, P = _.query.range, F = E.schema.primaryKey.extractKey, I = j.extractKey, L = (j.lowLevelIndex || j).extractKey, T = T.reduce(function(u, T) {
					var E = u, D = [];
					if (T.type === "add" || T.type === "put") for (var A = new qm(), j = T.values.length - 1; 0 <= j; --j) {
						var L, R = T.values[j], z = F(R);
						A.hasKey(z) || (L = I(R), (M && O(L) ? L.some(function(u) {
							return xh(u, P);
						}) : xh(L, P)) && (A.addKey(z), D.push(R)));
					}
					switch (T.type) {
						case "add":
							var B = new qm().addKeys(_.values ? u.map(function(u) {
								return F(u);
							}) : u), E = u.concat(_.values ? D.filter(function(u) {
								return u = F(u), !B.hasKey(u) && (B.addKey(u), !0);
							}) : D.map(function(u) {
								return F(u);
							}).filter(function(u) {
								return !B.hasKey(u) && (B.addKey(u), !0);
							}));
							break;
						case "put":
							var V = new qm().addKeys(T.values.map(function(u) {
								return F(u);
							}));
							E = u.filter(function(u) {
								return !V.hasKey(_.values ? F(u) : u);
							}).concat(_.values ? D : D.map(function(u) {
								return F(u);
							}));
							break;
						case "delete":
							var H = new qm().addKeys(T.keys);
							E = u.filter(function(u) {
								return !H.hasKey(_.values ? F(u) : u);
							});
							break;
						case "deleteRange":
							var Zd = T.range;
							E = u.filter(function(u) {
								return !xh(F(u), Zd);
							});
					}
					return E;
				}, u);
				return T === u ? u : (T.sort(function(u, _) {
					return Ip(L(u), L(_)) || Ip(F(u), F(_));
				}), _.limit && _.limit < Infinity && (T.length > _.limit ? T.length = _.limit : u.length === _.limit && T.length < _.limit && (D.dirty = !0)), A ? Object.freeze(T) : T);
			}
			function Ch(u, _) {
				return Ip(u.lower, _.lower) === 0 && Ip(u.upper, _.upper) === 0 && !!u.lowerOpen == !!_.lowerOpen && !!u.upperOpen == !!_.upperOpen;
			}
			function wh(u, _) {
				return function(u, _, T, E) {
					if (u === void 0) return _ === void 0 ? 0 : -1;
					if (_ === void 0) return 1;
					if ((_ = Ip(u, _)) === 0) {
						if (T && E) return 0;
						if (T) return 1;
						if (E) return -1;
					}
					return _;
				}(u.lower, _.lower, u.lowerOpen, _.lowerOpen) <= 0 && 0 <= function(u, _, T, E) {
					if (u === void 0) return _ === void 0 ? 0 : 1;
					if (_ === void 0) return -1;
					if ((_ = Ip(u, _)) === 0) {
						if (T && E) return 0;
						if (T) return -1;
						if (E) return 1;
					}
					return _;
				}(u.upper, _.upper, u.upperOpen, _.upperOpen);
			}
			function Th(u, _, T, E) {
				u.subscribers.add(T), E.addEventListener("abort", function() {
					var E, D;
					u.subscribers.delete(T), u.subscribers.size === 0 && (E = u, D = _, setTimeout(function() {
						E.subscribers.size === 0 && uf(D, E);
					}, 3e3));
				});
			}
			var Eh = {
				stack: "dbcore",
				level: 0,
				name: "Cache",
				create: function(u) {
					var T = u.schema.name;
					return _(_({}, u), {
						transaction: function(_, E, D) {
							var O, A, j = u.transaction(_, E, D);
							return E === "readwrite" && (A = (O = new AbortController()).signal, D = function(D) {
								return function() {
									if (O.abort(), E === "readwrite") {
										for (var A = /* @__PURE__ */ new Set(), M = 0, P = _; M < P.length; M++) {
											var F = P[M], I = nh[`idb://${T}/${F}`];
											if (I) {
												var L = u.table(F), R = I.optimisticOps.filter(function(u) {
													return u.trans === j;
												});
												if (j._explicit && D && j.mutatedParts) for (var z = 0, B = Object.values(I.queries.query); z < B.length; z++) for (var V = 0, H = (G = B[z]).slice(); V < H.length; V++) th((K = H[V]).obsSet, j.mutatedParts) && (uf(G, K), K.subscribers.forEach(function(u) {
													return A.add(u);
												}));
												else if (0 < R.length) {
													I.optimisticOps = I.optimisticOps.filter(function(u) {
														return u.trans !== j;
													});
													for (var Zd = 0, U = Object.values(I.queries.query); Zd < U.length; Zd++) for (var G, K, Qd, $d = 0, ef = (G = U[Zd]).slice(); $d < ef.length; $d++) (K = ef[$d]).res != null && j.mutatedParts && (D && !K.dirty ? (Qd = Object.isFrozen(K.res), Qd = Sh(K.res, K.req, R, L, K, Qd), K.dirty ? (uf(G, K), K.subscribers.forEach(function(u) {
														return A.add(u);
													})) : Qd !== K.res && (K.res = Qd, K.promise = Q.resolve({ result: Qd }))) : (K.dirty && uf(G, K), K.subscribers.forEach(function(u) {
														return A.add(u);
													})));
												}
											}
										}
										A.forEach(function(u) {
											return u();
										});
									}
								};
							}, j.addEventListener("abort", D(!1), { signal: A }), j.addEventListener("error", D(!1), { signal: A }), j.addEventListener("complete", D(!0), { signal: A })), j;
						},
						table: function(E) {
							var D = u.table(E), O = D.schema.primaryKey;
							return _(_({}, D), {
								mutate: function(u) {
									var A = Z.trans;
									if (O.outbound || A.db._options.cache === "disabled" || A.explicit || A.idbtrans.mode !== "readwrite") return D.mutate(u);
									var j = nh[`idb://${T}/${E}`];
									return j ? (A = D.mutate(u), u.type !== "add" && u.type !== "put" || !(50 <= u.values.length || ph(O, u).some(function(u) {
										return u == null;
									})) ? (j.optimisticOps.push(u), u.mutatedParts && ah(u.mutatedParts), A.then(function(_) {
										0 < _.numFailures && (uf(j.optimisticOps, u), (_ = bh(0, u, _)) && j.optimisticOps.push(_), u.mutatedParts && ah(u.mutatedParts));
									}), A.catch(function() {
										uf(j.optimisticOps, u), u.mutatedParts && ah(u.mutatedParts);
									})) : A.then(function(T) {
										var E = bh(0, _(_({}, u), { values: u.values.map(function(u, E) {
											var D;
											return T.failures[E] ? u : (u = (D = O.keyPath) != null && D.includes(".") ? af(u) : _({}, u), K(u, O.keyPath, T.results[E]), u);
										}) }), T);
										j.optimisticOps.push(E), queueMicrotask(function() {
											return u.mutatedParts && ah(u.mutatedParts);
										});
									}), A) : D.mutate(u);
								},
								query: function(u) {
									if (!_h(Z, D) || !vh("query", u)) return D.query(u);
									var _ = (M = Z.trans)?.db._options.cache === "immutable", O = Z, A = O.requery, j = O.signal, M = function(u, _, T, E) {
										var D = nh[`idb://${u}/${_}`];
										if (!D) return [];
										if (!(_ = D.queries[T])) return [
											null,
											!1,
											D,
											null
										];
										var O = _[(E.query ? E.query.index.name : null) || ""];
										if (!O) return [
											null,
											!1,
											D,
											null
										];
										switch (T) {
											case "query":
												var A = O.find(function(u) {
													return u.req.limit === E.limit && u.req.values === E.values && Ch(u.req.query.range, E.query.range);
												});
												return A ? [
													A,
													!0,
													D,
													O
												] : [
													O.find(function(u) {
														return ("limit" in u.req ? u.req.limit : Infinity) >= E.limit && (!E.values || u.req.values) && wh(u.req.query.range, E.query.range);
													}),
													!1,
													D,
													O
												];
											case "count": return A = O.find(function(u) {
												return Ch(u.req.query.range, E.query.range);
											}), [
												A,
												!!A,
												D,
												O
											];
										}
									}(T, E, "query", u), P = M[0], O = M[1], F = M[2], I = M[3];
									return P && O ? P.obsSet = u.obsSet : (O = D.query(u).then(function(u) {
										var T = u.result;
										if (P && (P.res = T), _) {
											for (var E = 0, D = T.length; E < D; ++E) Object.freeze(T[E]);
											Object.freeze(T);
										} else u.result = af(T);
										return u;
									}).catch(function(u) {
										return I && P && uf(I, P), Promise.reject(u);
									}), P = {
										obsSet: u.obsSet,
										promise: O,
										subscribers: /* @__PURE__ */ new Set(),
										type: "query",
										req: u,
										dirty: !1
									}, I ? I.push(P) : (I = [P], (F ||= nh[`idb://${T}/${E}`] = {
										queries: {
											query: {},
											count: {}
										},
										objs: /* @__PURE__ */ new Map(),
										optimisticOps: [],
										unsignaledParts: {}
									}).queries.query[u.query.index.name || ""] = I)), Th(P, I, A, j), P.promise.then(function(T) {
										return { result: Sh(T.result, u, F?.optimisticOps, D, P, _) };
									});
								}
							});
						}
					});
				}
			};
			function Dh(u, _) {
				return new Proxy(u, { get: function(u, T, E) {
					return T === "db" ? _ : Reflect.get(u, T, E);
				} });
			}
			var Oh = (kh.prototype.version = function(u) {
				if (isNaN(u) || u < .1) throw new J.Type("Given version is not a positive number");
				if (u = Math.round(10 * u) / 10, this.idbdb || this._state.isBeingOpened) throw new J.Schema("Cannot add version when database is open");
				this.verno = Math.max(this.verno, u);
				var _ = this._versions, T = _.filter(function(_) {
					return _._cfg.version === u;
				})[0];
				return T || (T = new this.Version(u), _.push(T), _.sort(jm), T.stores({}), this._state.autoSchema = !1, T);
			}, kh.prototype._whenReady = function(u) {
				var _ = this;
				return this.idbdb && (this._state.openComplete || Z.letThrough || this._vip) ? u() : new Q(function(u, T) {
					if (_._state.openComplete) return T(new J.DatabaseClosed(_._state.dbOpenError));
					if (!_._state.isBeingOpened) {
						if (!_._state.autoOpen) return void T(new J.DatabaseClosed());
						_.open().catch(Tf);
					}
					_._state.dbReadyPromise.then(u, T);
				}).then(u);
			}, kh.prototype.use = function(u) {
				var _ = u.stack, T = u.create, E = u.level, D = u.name;
				return D && this.unuse({
					stack: _,
					name: D
				}), u = this._middlewares[_] || (this._middlewares[_] = []), u.push({
					stack: _,
					create: T,
					level: E ?? 10,
					name: D
				}), u.sort(function(u, _) {
					return u.level - _.level;
				}), this;
			}, kh.prototype.unuse = function(u) {
				var _ = u.stack, T = u.name, E = u.create;
				return _ && this._middlewares[_] && (this._middlewares[_] = this._middlewares[_].filter(function(u) {
					return E ? u.create !== E : !!T && u.name !== T;
				})), this;
			}, kh.prototype.open = function() {
				var u = this;
				return xp(Kf, function() {
					return ch(u);
				});
			}, kh.prototype._close = function() {
				this.on.close.fire(new CustomEvent("close"));
				var u = this._state, _ = Op.indexOf(this);
				if (0 <= _ && Op.splice(_, 1), this.idbdb) {
					try {
						this.idbdb.close();
					} catch {}
					this.idbdb = null;
				}
				u.isBeingOpened || (u.dbReadyPromise = new Q(function(_) {
					u.dbReadyResolve = _;
				}), u.openCanceller = new Q(function(_, T) {
					u.cancelOpen = T;
				}));
			}, kh.prototype.close = function(u) {
				var _ = (u === void 0 ? { disableAutoOpen: !0 } : u).disableAutoOpen, u = this._state;
				_ ? (u.isBeingOpened && u.cancelOpen(new J.DatabaseClosed()), this._close(), u.autoOpen = !1, u.dbOpenError = new J.DatabaseClosed()) : (this._close(), u.autoOpen = this._options.autoOpen || u.isBeingOpened, u.openComplete = !1, u.dbOpenError = null);
			}, kh.prototype.delete = function(u) {
				var _ = this;
				u === void 0 && (u = { disableAutoOpen: !0 });
				var T = 0 < arguments.length && typeof arguments[0] != "object", E = this._state;
				return new Q(function(D, O) {
					function A() {
						_.close(u);
						var T = _._deps.indexedDB.deleteDatabase(_.name);
						T.onsuccess = sp(function() {
							var u = _._deps, T = _.name, E = u.indexedDB;
							u = u.IDBKeyRange, Wm(E) || T === kp || Um(E, u).delete(T).catch(Tf), D();
						}), T.onerror = dm(O), T.onblocked = _._fireOnBlocked;
					}
					if (T) throw new J.InvalidArgument("Invalid closeOptions argument to db.delete()");
					E.isBeingOpened ? E.dbReadyPromise.then(A) : A();
				});
			}, kh.prototype.backendDB = function() {
				return this.idbdb;
			}, kh.prototype.isOpen = function() {
				return this.idbdb !== null;
			}, kh.prototype.hasBeenClosed = function() {
				var u = this._state.dbOpenError;
				return u && u.name === "DatabaseClosed";
			}, kh.prototype.hasFailed = function() {
				return this._state.dbOpenError !== null;
			}, kh.prototype.dynamicallyOpened = function() {
				return this._state.autoSchema;
			}, Object.defineProperty(kh.prototype, "tables", {
				get: function() {
					var u = this;
					return D(this._allTables).map(function(_) {
						return u._allTables[_];
					});
				},
				enumerable: !1,
				configurable: !0
			}), kh.prototype.transaction = function() {
				var u = (function(u, _, T) {
					var E = arguments.length;
					if (E < 2) throw new J.InvalidArgument("Too few arguments");
					for (var D = Array(E - 1); --E;) D[E - 1] = arguments[E];
					return T = D.pop(), [
						u,
						ef(D),
						T
					];
				}).apply(this, arguments);
				return this._transaction.apply(this, u);
			}, kh.prototype._transaction = function(u, _, T) {
				var E = this, D = Z.trans;
				D && D.db === this && u.indexOf("!") === -1 || (D = null);
				var O, A, j = u.indexOf("?") !== -1;
				u = u.replace("!", "").replace("?", "");
				try {
					if (A = _.map(function(u) {
						if (u = u instanceof E.Table ? u.name : u, typeof u != "string") throw TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
						return u;
					}), u == "r" || u === Ap) O = Ap;
					else {
						if (u != "rw" && u != jp) throw new J.InvalidArgument("Invalid transaction mode: " + u);
						O = jp;
					}
					if (D) {
						if (D.mode === Ap && O === jp) {
							if (!j) throw new J.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
							D = null;
						}
						D && A.forEach(function(u) {
							if (D && D.storeNames.indexOf(u) === -1) {
								if (!j) throw new J.SubTransaction("Table " + u + " not included in parent transaction.");
								D = null;
							}
						}), j && D && !D.active && (D = null);
					}
				} catch (u) {
					return D ? D._promise(null, function(_, T) {
						T(u);
					}) : wp(u);
				}
				var M = (function u(_, T, E, D, O) {
					return Q.resolve().then(function() {
						var A = Z.transless || Z, j = _._createTransaction(T, E, _._dbSchema, D);
						if (j.explicit = !0, A = {
							trans: j,
							transless: A
						}, D) j.idbtrans = D.idbtrans;
						else try {
							j.create(), j.idbtrans._explicit = !0, _._state.PR1398_maxLoop = 3;
						} catch (D) {
							return D.name === xf.InvalidState && _.isOpen() && 0 < --_._state.PR1398_maxLoop ? (console.warn("Dexie: Need to reopen db"), _.close({ disableAutoOpen: !1 }), _.open().then(function() {
								return u(_, T, E, null, O);
							})) : wp(D);
						}
						var M, P = pf(O);
						return P && hp(), A = Q.follow(function() {
							var u;
							(M = O.call(j, j)) && (P ? (u = gp.bind(null, null), M.then(u, u)) : typeof M.next == "function" && typeof M.throw == "function" && (M = lh(M)));
						}, A), (M && typeof M.then == "function" ? Q.resolve(M).then(function(u) {
							return j.active ? u : wp(new J.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
						}) : A.then(function() {
							return M;
						})).then(function(u) {
							return D && j._resolve(), j._completion.then(function() {
								return u;
							});
						}).catch(function(u) {
							return j._reject(u), wp(u);
						});
					});
				}).bind(null, this, O, A, D, T);
				return D ? D._promise(O, M, "lock") : Z.trans ? xp(Z.transless, function() {
					return E._whenReady(M);
				}) : this._whenReady(M);
			}, kh.prototype.table = function(u) {
				if (!P(this._allTables, u)) throw new J.InvalidTable(`Table ${u} does not exist`);
				return this._allTables[u];
			}, kh);
			function kh(u, T) {
				var E = this;
				this._middlewares = {}, this.verno = 0;
				var D = kh.dependencies;
				this._options = T = _({
					addons: kh.addons,
					autoOpen: !0,
					indexedDB: D.indexedDB,
					IDBKeyRange: D.IDBKeyRange,
					cache: "cloned"
				}, T), this._deps = {
					indexedDB: T.indexedDB,
					IDBKeyRange: T.IDBKeyRange
				}, D = T.addons, this._dbSchema = {}, this._versions = [], this._storeNames = [], this._allTables = {}, this.idbdb = null, this._novip = this;
				var O, A, j, M, P, F = {
					dbOpenError: null,
					isBeingOpened: !1,
					onReadyBeingFired: null,
					openComplete: !1,
					dbReadyResolve: Tf,
					dbReadyPromise: null,
					cancelOpen: Tf,
					openCanceller: null,
					autoSchema: !0,
					PR1398_maxLoop: 3,
					autoOpen: T.autoOpen
				};
				F.dbReadyPromise = new Q(function(u) {
					F.dbReadyResolve = u;
				}), F.openCanceller = new Q(function(u, _) {
					F.cancelOpen = _;
				}), this._state = F, this.name = u, this.on = Hp(this, "populate", "blocked", "versionchange", "close", { ready: [Nf, Tf] }), this.once = function(u, _) {
					var T = function() {
						var D = [...arguments];
						E.on(u).unsubscribe(T), _.apply(E, D);
					};
					return E.on(u, T);
				}, this.on.ready.subscribe = H(this.on.ready.subscribe, function(u) {
					return function(_, T) {
						kh.vip(function() {
							var D, O = E._state;
							O.openComplete ? (O.dbOpenError || Q.resolve().then(_), T && u(_)) : O.onReadyBeingFired ? (O.onReadyBeingFired.push(_), T && u(_)) : (u(_), D = E, T || u(function u() {
								D.on.ready.unsubscribe(_), D.on.ready.unsubscribe(u);
							}));
						});
					};
				}), this.Collection = (O = this, Up($p.prototype, function(u, _) {
					this.db = O;
					var T = Np, E = null;
					if (_) try {
						T = _();
					} catch (u) {
						E = u;
					}
					var D = u._ctx, _ = D.table, u = _.hook.reading.fire;
					this._ctx = {
						table: _,
						index: D.index,
						isPrimKey: !D.index || _.schema.primKey.keyPath && D.index === _.schema.primKey.name,
						range: T,
						keysOnly: !1,
						dir: "next",
						unique: "",
						algorithm: null,
						filter: null,
						replayFilter: null,
						justLimit: !0,
						isMatch: null,
						offset: 0,
						limit: Infinity,
						error: E,
						or: D.or,
						valueMapper: u === Ef ? null : u
					};
				})), this.Table = (A = this, Up(Bp.prototype, function(u, _, T) {
					this.db = A, this._tx = T, this.name = u, this.schema = _, this.hook = A._allTables[u] ? A._allTables[u].hook : Hp(null, {
						creating: [kf, Tf],
						reading: [Df, Ef],
						updating: [jf, Tf],
						deleting: [Af, Tf]
					});
				})), this.Transaction = (j = this, Up(gm.prototype, function(u, _, T, E, D) {
					var O = this;
					u !== "readonly" && _.forEach(function(u) {
						u = (u = T[u])?.yProps, u && (_ = _.concat(u.map(function(u) {
							return u.updatesTable;
						})));
					}), this.db = j, this.mode = u, this.storeNames = _, this.schema = T, this.chromeTransactionDurability = E, this.idbtrans = null, this.on = Hp(this, "complete", "error", "abort"), this.parent = D || null, this.active = !0, this._reculock = 0, this._blockedFuncs = [], this._resolve = null, this._reject = null, this._waitingFor = null, this._waitingQueue = null, this._spinCount = 0, this._completion = new Q(function(u, _) {
						O._resolve = u, O._reject = _;
					}), this._completion.then(function() {
						O.active = !1, O.on.complete.fire();
					}, function(u) {
						var _ = O.active;
						return O.active = !1, O.on.error.fire(u), O.parent ? O.parent._reject(u) : _ && O.idbtrans && O.idbtrans.abort(), wp(u);
					});
				})), this.Version = (M = this, Up(Vm.prototype, function(u) {
					this.db = M, this._cfg = {
						version: u,
						storesSource: null,
						dbschema: {},
						tables: {},
						contentUpgrade: null
					};
				})), this.WhereClause = (P = this, Up(lm.prototype, function(u, _, T) {
					if (this.db = P, this._ctx = {
						table: u,
						index: _ === ":id" ? null : _,
						or: T
					}, this._cmp = this._ascending = Ip, this._descending = function(u, _) {
						return Ip(_, u);
					}, this._max = function(u, _) {
						return 0 < Ip(u, _) ? u : _;
					}, this._min = function(u, _) {
						return Ip(u, _) < 0 ? u : _;
					}, this._IDBKeyRange = P._deps.IDBKeyRange, !this._IDBKeyRange) throw new J.MissingAPI();
				})), this.on("versionchange", function(u) {
					0 < u.newVersion ? console.warn(`Another connection wants to upgrade database '${E.name}'. Closing db now to resume the upgrade.`) : console.warn(`Another connection wants to delete database '${E.name}'. Closing db now to resume the delete request.`), E.close({ disableAutoOpen: !1 });
				}), this.on("blocked", function(u) {
					!u.newVersion || u.newVersion < u.oldVersion ? console.warn(`Dexie.delete('${E.name}') was blocked`) : console.warn(`Upgrade '${E.name}' blocked by other connection holding version ${u.oldVersion / 10}`);
				}), this._maxKey = xm(T.IDBKeyRange), this._createTransaction = function(u, _, T, D) {
					return new E.Transaction(u, _, T, E._options.chromeTransactionDurability, D);
				}, this._fireOnBlocked = function(u) {
					E.on("blocked").fire(u), Op.filter(function(u) {
						return u.name === E.name && u !== E && !u._state.vcFired;
					}).map(function(_) {
						return _.on("versionchange").fire(u);
					});
				}, this.use(gh), this.use(Eh), this.use(yh), this.use(dh), this.use(mh);
				var I = new Proxy(this, { get: function(u, _, T) {
					if (_ === "_vip") return !0;
					if (_ === "table") return function(u) {
						return Dh(E.table(u), I);
					};
					var D = Reflect.get(u, _, T);
					return D instanceof Bp ? Dh(D, I) : _ === "tables" ? D.map(function(u) {
						return Dh(u, I);
					}) : _ === "_createTransaction" ? function() {
						return Dh(D.apply(this, arguments), I);
					} : D;
				} });
				this.vip = I, D.forEach(function(u) {
					return u(E);
				});
			}
			var Ah, hf = typeof Symbol < "u" && "observable" in Symbol ? Symbol.observable : "@@observable", jh = (Mh.prototype.subscribe = function(u, _, T) {
				return this._subscribe(u && typeof u != "function" ? u : {
					next: u,
					error: _,
					complete: T
				});
			}, Mh.prototype[hf] = function() {
				return this;
			}, Mh);
			function Mh(u) {
				this._subscribe = u;
			}
			try {
				Ah = {
					indexedDB: E.indexedDB || E.mozIndexedDB || E.webkitIndexedDB || E.msIndexedDB,
					IDBKeyRange: E.IDBKeyRange || E.webkitIDBKeyRange
				};
			} catch {
				Ah = {
					indexedDB: null,
					IDBKeyRange: null
				};
			}
			function Nh(u) {
				var _, T = !1, E = new jh(function(E) {
					var D = pf(u), O, A = !1, j = {}, M = {}, F = {
						get closed() {
							return A;
						},
						unsubscribe: function() {
							A || (A = !0, O && O.abort(), I && hm.storagemutated.unsubscribe(R));
						}
					};
					E.start && E.start(F);
					var I = !1, L = function() {
						return Cp(z);
					}, R = function(u) {
						eh(j, u), th(M, j) && L();
					}, z = function() {
						var F, z, B;
						!A && Ah.indexedDB && (j = {}, F = {}, O && O.abort(), O = new AbortController(), B = function(_) {
							var T = rp();
							try {
								D && hp();
								var E = mp(u, _);
								return E = D ? E.finally(gp) : E;
							} finally {
								T && ip();
							}
						}(z = {
							subscr: F,
							signal: O.signal,
							requery: L,
							querier: u,
							trans: null
						}), Promise.resolve(B).then(function(u) {
							T = !0, _ = u, A || z.signal.aborted || (j = {}, function(u) {
								for (var _ in u) if (P(u, _)) return;
								return 1;
							}(M = F) || I || (hm(pm, R), I = !0), Cp(function() {
								return !A && E.next && E.next(u);
							}));
						}, function(u) {
							T = !1, ["DatabaseClosedError", "AbortError"].includes(u?.name) || A || Cp(function() {
								A || E.error && E.error(u);
							});
						}));
					};
					return setTimeout(L, 0), F;
				});
				return E.hasValue = function() {
					return T;
				}, E.getValue = function() {
					return _;
				}, E;
			}
			var Ph = Oh;
			function Fh(u) {
				var _ = Lh;
				try {
					Lh = !0, hm.storagemutated.fire(u), oh(u, !0);
				} finally {
					Lh = _;
				}
			}
			F(Ph, _(_({}, wf), {
				delete: function(u) {
					return new Ph(u, { addons: [] }).delete();
				},
				exists: function(u) {
					return new Ph(u, { addons: [] }).open().then(function(u) {
						return u.close(), !0;
					}).catch("NoSuchDatabaseError", function() {
						return !1;
					});
				},
				getDatabaseNames: function(u) {
					try {
						return _ = Ph.dependencies, T = _.indexedDB, _ = _.IDBKeyRange, (Wm(T) ? Promise.resolve(T.databases()).then(function(u) {
							return u.map(function(u) {
								return u.name;
							}).filter(function(u) {
								return u !== kp;
							});
						}) : Um(T, _).toCollection().primaryKeys()).then(u);
					} catch {
						return wp(new J.MissingAPI());
					}
					var _, T;
				},
				defineClass: function() {
					return function(u) {
						A(this, u);
					};
				},
				ignoreTransaction: function(u) {
					return Z.trans ? xp(Z.transless, u) : u();
				},
				vip: Gm,
				async: function(u) {
					return function() {
						try {
							var _ = lh(u.apply(this, arguments));
							return _ && typeof _.then == "function" ? _ : Q.resolve(_);
						} catch (u) {
							return wp(u);
						}
					};
				},
				spawn: function(u, _, T) {
					try {
						var E = lh(u.apply(T, _ || []));
						return E && typeof E.then == "function" ? E : Q.resolve(E);
					} catch (u) {
						return wp(u);
					}
				},
				currentTransaction: { get: function() {
					return Z.trans || null;
				} },
				waitFor: function(u, _) {
					return _ = Q.resolve(typeof u == "function" ? Ph.ignoreTransaction(u) : u).timeout(_ || 6e4), Z.trans ? Z.trans.waitFor(_) : _;
				},
				Promise: Q,
				debug: {
					get: function() {
						return Pf;
					},
					set: function(u) {
						Ff(u);
					}
				},
				derive: R,
				extend: A,
				props: F,
				override: H,
				Events: Hp,
				on: hm,
				liveQuery: Nh,
				extendObservabilitySet: eh,
				getByKeyPath: G,
				setByKeyPath: K,
				delByKeyPath: function(u, _) {
					typeof _ == "string" ? K(u, _, void 0) : "length" in _ && [].map.call(_, function(_) {
						K(u, _, void 0);
					});
				},
				shallowClone: Qd,
				deepClone: af,
				getObjectDiff: fh,
				cmp: Ip,
				asap: U,
				minKey: -Infinity,
				addons: [],
				connections: Op,
				errnames: xf,
				dependencies: Ah,
				cache: nh,
				semVer: "4.2.0",
				version: "4.2.0".split(".").map(function(u) {
					return parseInt(u);
				}).reduce(function(u, _, T) {
					return u + _ / 10 ** (2 * T);
				})
			})), Ph.maxKey = xm(Ph.dependencies.IDBKeyRange), typeof dispatchEvent < "u" && typeof addEventListener < "u" && (hm(pm, function(u) {
				Lh ||= (u = new CustomEvent(mm, { detail: u }), Lh = !0, dispatchEvent(u), !1);
			}), addEventListener(mm, function(u) {
				u = u.detail, Lh || Fh(u);
			}));
			var Ih, Lh = !1, Rh = function() {};
			return typeof BroadcastChannel < "u" && ((Rh = function() {
				(Ih = new BroadcastChannel(mm)).onmessage = function(u) {
					return u.data && Fh(u.data);
				};
			})(), typeof Ih.unref == "function" && Ih.unref(), hm(pm, function(u) {
				Lh || Ih.postMessage(u);
			})), typeof addEventListener < "u" && (addEventListener("pagehide", function(u) {
				if (!Oh.disableBfCache && u.persisted) {
					Pf && console.debug("Dexie: handling persisted pagehide"), Ih?.close();
					for (var _ = 0, T = Op; _ < T.length; _++) T[_].close({ disableAutoOpen: !1 });
				}
			}), addEventListener("pageshow", function(u) {
				!Oh.disableBfCache && u.persisted && (Pf && console.debug("Dexie: handling persisted pageshow"), Rh(), Fh({ all: new qm(-Infinity, [[]]) }));
			})), Q.rejectionMapper = function(u, _) {
				return !u || u instanceof _f || u instanceof TypeError || u instanceof SyntaxError || !u.name || !Cf[u.name] ? u : (_ = new Cf[u.name](_ || u.message, u), "stack" in u && L(_, "stack", { get: function() {
					return this.inner.stack;
				} }), _);
			}, Ff(Pf), _(Oh, Object.freeze({
				__proto__: null,
				Dexie: Oh,
				liveQuery: Nh,
				Entity: Fp,
				cmp: Ip,
				PropModification: Zp,
				replacePrefix: function(u, _) {
					return new Zp({ replacePrefix: [u, _] });
				},
				add: function(u) {
					return new Zp({ add: u });
				},
				remove: function(u) {
					return new Zp({ remove: u });
				},
				default: Oh,
				RangeSet: qm,
				mergeRanges: Ym,
				rangesOverlap: Xm
			}), { default: Oh }), Oh;
		});
	}($l)), $l.exports;
}
var ke = /* @__PURE__ */ pu(fu()), yt = Symbol.for("Dexie"), ne = globalThis[yt] || (globalThis[yt] = ke);
if (ke.semVer !== ne.semVer) throw Error(`Two different versions of Dexie loaded in the same app: ${ke.semVer} and ${ne.semVer}`);
var { liveQuery: Tt, mergeRanges: Ru, rangesOverlap: Au, RangeSet: Nu, cmp: Eu, Entity: Fu, PropModification: Mu, replacePrefix: Zu, add: Vu, remove: Uu, DexieYProvider: ku } = ne, Dn = "sclElements", hu = "id, tagName, [id+tagName], &attributes.uuid, &attributes.id, attributes.name, parent.id, parent.tagName, *children.id, *children.tagName";
function vu(u) {
	let { databaseName: _ } = u, T = new ne(_);
	return T.version(1).stores({ [`${Dn}`]: hu }), T;
}
var xu = {
	FunctionCategory: {
		tag: "FunctionCategory",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Category of functions. To be added to Process, Line, Substation, VoltageLevel and Bay SCL elements\n\nCategory of functions. To be added to Process, Line, Substation, VoltageLevel and Bay SCL elements",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"SubCategory",
				"FunctionCatRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SubCategory: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				FunctionCatRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ProcessResources: {
		tag: "ProcessResources",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "List of Process Resources related to a function. to be added to the SCL elements Function, SubFunction, EqFunction and EqSubFunction\n\nList of Process Resources related to a function. to be added to the SCL elements Function, SubFunction, EqFunction and EqSubFunction",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: ["Text", "ProcessResource"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ProcessResource: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueResource",
						kind: "unique",
						paths: [["Resource"]],
						deep: !1,
						attributes: ["resInst"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniquePR",
			kind: "unique",
			paths: [["ProcessResource"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	PowerSystemRelations: {
		tag: "PowerSystemRelations",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Functional relation from a Function/SubFunction to another element of the process\n\nFunctional relation from a Function/SubFunction to another element of the process",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: ["Text", "PowerSystemRelation"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				PowerSystemRelation: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniquePSR",
			kind: "unique",
			paths: [["PowerSystemRelation"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNodeInputs: {
		tag: "LNodeInputs",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "List of specification inputs of the given LNode. To be added at LNode level\n\nList of specification inputs of the given LNode. To be added at LNode level",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: ["Text", "SourceRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SourceRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueSourceRef",
			kind: "unique",
			paths: [["SourceRef"]],
			deep: !1,
			attributes: [
				"input",
				"inputInst",
				"pDA"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNodeOutputs: {
		tag: "LNodeOutputs",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "List of specification outputs of the given LNode. To be added at LNode level\n\nList of specification outputs of the given LNode. To be added at LNode level",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: ["Text", "ControlRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ControlRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueControlRef",
			kind: "unique",
			paths: [["ControlRef"]],
			deep: !1,
			attributes: ["output", "outputInst"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ProcessEcho: {
		tag: "ProcessEcho",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Definition of an echo LNode, mirroring the DO of another LNode\n\nDefinition of an echo LNode, mirroring the DO of another LNode",
		parents: [
			"DAS",
			"DOS",
			"SDS"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"source",
				"sourceDaName",
				"sourceDoName",
				"sourceLNodeUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				source: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceDaName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceDoName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceLNodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNodeSpecNaming: {
		tag: "LNodeSpecNaming",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "LNode user specification. To be added to LNode SCL element\n\nLNode user specification. To be added to LNode SCL element",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"sIedName",
				"sLdInst",
				"sLnClass",
				"sLnInst",
				"sPrefix"
			],
			details: {
				sIedName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"None",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sLdInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sLnClass: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sLnInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sPrefix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DOS: {
		tag: "DOS",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Data Object specification. To be added to LNode SCL element\n\nData Object specification. To be added to LNode SCL element",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"mappedDoName",
				"mappedLnUuid",
				"name"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				mappedDoName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["(([A-Za-z][0-9A-Za-z_]{0,63})/([A-Za-z][0-9A-Za-z_]{0,63})/((LLN0|([A-Za-z][0-9A-Za-z_]{0,10})?[A-Z]{4}[0-9]{1,12}))\\.)?([A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?)"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				mappedLnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 12,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"SDS",
				"DAS",
				"SubscriberLNode",
				"ControllingLNode",
				"ProcessEcho",
				"LogParametersRef",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SDS: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueSDS_DASinSDS",
						kind: "unique",
						paths: [["DAS|.", "SDS"]],
						deep: !1,
						attributes: ["name", "ix"],
						refer: null,
						text: !1
					}]
				},
				DAS: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SubscriberLNode: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ControllingLNode: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ProcessEcho: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				LogParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInDOS",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: [
					"SDS",
					"DAS",
					"SubscriberLNode",
					"ControllingLNode",
					"ProcessEcho",
					"LogParametersRef"
				]
			}]
		},
		constraints: [{
			name: "uniqueSDS_DASinDOS",
			kind: "unique",
			paths: [["DAS|.", "SDS"]],
			deep: !1,
			attributes: ["name", "ix"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionSclRef: {
		tag: "FunctionSclRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to the FSD files used to create a Function. Could be added under Function/SubFunction/EqFunction/EqSubFunction\n\nReference to the FSD files used to create a Function. Could be added under Function/SubFunction/EqFunction/EqSubFunction",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "SclFileReference"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SclFileReference: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	CheckoutID: {
		tag: "CheckoutID",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Element used by an IED to indicates that a file has been imported to give engineering rights on this IED. This is opening a transaction between both projects to lock it on first project until the checkout is given back from current project, which then lock the IED locally\n\nElement used by an IED to indicates that a file has been imported to give engineering rights on this IED. This is opening a transaction between both projects to lock it on first project until the checkout is given back from current project, which then lock the IED locally",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"engRight",
				"fileName",
				"fileType",
				"fileUuid",
				"headerId",
				"revision",
				"version",
				"when"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				engRight: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"full",
							"fix",
							"dataflow"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"SED",
							"SCC",
							"ICD",
							"IID",
							"CID",
							"SSD",
							"SCD"
						],
						pattern: ["\\i\\c*", "[A-Z]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				headerId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				revision: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				version: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				when: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["SubCheckoutID"],
			details: { SubCheckoutID: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tSclFileUUIDCheckoutRestriction",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Variable: {
		tag: "Variable",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "A Variable is a way to define a global variable which can be modified by a user and applied to a list of SCL attributes\n\nA Variable is a way to define a global variable which can be modified by a user and applied to a list of SCL attributes",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"uuid",
				"value"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				value: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "VariableApplyTo"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				VariableApplyTo: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	CommunicationServiceSpecifications: {
		tag: "CommunicationServiceSpecifications",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "The CommunicationServiceSpecifications is containing parameters used to create control blocks during implementation\n\nThe CommunicationServiceSpecifications is containing parameters used to create control blocks during implementation",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"GooseParameters",
				"SMVParameters",
				"ReportParameters"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GooseParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SMVParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ReportParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: [
					"GooseParameters",
					"SMVParameters",
					"ReportParameters"
				]
			}]
		},
		constraints: [{
			name: "commServiceSpecKey",
			kind: "key",
			paths: [["*"]],
			deep: !1,
			attributes: ["id"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ServiceSpecifications: {
		tag: "ServiceSpecifications",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "The ServiceSpecification is containing parameters used to create control blocks or physical interface (LPDI/LPDO) during implementation\n\nThe ServiceSpecification is containing parameters used to create control blocks or physical interface (LPDI/LPDO) during implementation",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"GooseParameters",
				"SMVParameters",
				"ReportParameters",
				"BinaryWiringParameters",
				"AnalogueWiringParameters",
				"LogParameters"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GooseParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SMVParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ReportParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				BinaryWiringParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				AnalogueWiringParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				LogParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: [
					"GooseParameters",
					"SMVParameters",
					"ReportParameters",
					"BinaryWiringParameters",
					"AnalogueWiringParameters",
					"LogParameters"
				]
			}]
		},
		constraints: [{
			name: "serviceSpecKey",
			kind: "key",
			paths: [["*"]],
			deep: !1,
			attributes: ["id"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BayType: {
		tag: "BayType",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Bay type element is keeping value of the type. It's a free string\n\nBay type element is keeping value of the type. It's a free string",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBayType",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	AllocationRole: {
		tag: "AllocationRole",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Definition of an allocation role allowing definition of possible allocation to devices type without using virtual IED\n\nDefinition of an allocation role allowing definition of possible allocation to devices type without using virtual IED",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Application: {
		tag: "Application",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Application definition to be added at Process, Substation, Voltage Level or Bay level\n\nApplication definition to be added at Process, Substation, Voltage Level or Bay level",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionRole",
				"FunctionalVariant",
				"FunctionalVariantGroup",
				"AllocationRoleRef",
				"ApplicationSclRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionRole: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueRoleContent",
						kind: "unique",
						paths: [["FunctionRoleContent"]],
						deep: !1,
						attributes: ["roleInst"],
						refer: null,
						text: !1
					}]
				},
				FunctionalVariant: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				FunctionalVariantGroup: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				AllocationRoleRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				ApplicationSclRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BehaviorDescription: {
		tag: "BehaviorDescription",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Element allowing to describe the behavior its parent (Application, Bay, Function, LN...)\n\nElement allowing to describe the behavior its parent (Application, Bay, Function, LN...)",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"fileReference",
				"format",
				"isSimulation",
				"isSpecification",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileReference: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				format: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"IEC 61131",
							"Textual",
							"Graphic"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				isSimulation: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				isSpecification: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"InputVar",
				"OutputVar",
				"BehaviorReference"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				InputVar: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				OutputVar: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				BehaviorReference: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueChildNameInBehaviorDescription",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["varName"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Project: {
		tag: "Project",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Element allowing to define a project, to identify the project and the process elements defined by this project\n\nElement allowing to define a project, to identify the project and the process elements defined by this project",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "ProjectProcessReference"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ProjectProcessReference: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionTemplate: {
		tag: "FunctionTemplate",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Base element for FSD format, will be used as a template element for Function/SubFunction or EqFunction/EqSubFunction\n\nBase element for FSD format, will be used as a template element for Function/SubFunction or EqFunction/EqSubFunction",
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"LNode",
				"SubFunctionTemplate",
				"GeneralEquipment",
				"ConductingEquipment"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SubFunctionTemplate: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubFunctionTemplate",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInSubFuncTemplate",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipmentOfFunctionTemplate",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGEFuncTemplate",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				ConductingEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInConductingEquipmentOfFunctionTemplate",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInCondEqTemplate",
						kind: "unique",
						paths: [["SubEquipment|.", "EqFunction"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "t6-100LNodeContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SCL: {
		tag: "SCL",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"release",
				"revision",
				"version"
			],
			details: {
				release: {
					required: !0,
					default: "5",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 255,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				revision: {
					required: !0,
					default: "C",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z]", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				version: {
					required: !0,
					default: "2007",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["2[0-2][0-9]{2}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Header",
				"Substation",
				"Communication",
				"IED",
				"DataTypeTemplates",
				"Line",
				"Process"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Header: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueHitem",
						kind: "unique",
						paths: [["History", "Hitem"]],
						deep: !1,
						attributes: ["version", "revision"],
						refer: null,
						text: !1
					}]
				},
				Substation: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Communication: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				IED: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				DataTypeTemplates: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Line: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Process: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [
			{
				name: "SubstationKey",
				kind: "key",
				paths: [[
					"Substation|.",
					"Process|.",
					"Line"
				]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "IEDKey",
				kind: "key",
				paths: [["IED"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "LNodeTypeKey",
				kind: "key",
				paths: [["DataTypeTemplates", "LNodeType"]],
				deep: !1,
				attributes: ["id", "lnClass"],
				refer: null,
				text: !1
			},
			{
				name: "ConnectivityNodeKey",
				kind: "key",
				paths: [["ConnectivityNode"]],
				deep: !0,
				attributes: ["pathName"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueHitem",
				kind: "unique",
				paths: [["History", "Hitem"]],
				deep: !1,
				attributes: ["version", "revision"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueUUID",
				kind: "unique",
				paths: [["*"]],
				deep: !0,
				attributes: ["uuid"],
				refer: null,
				text: !1
			},
			{
				name: "ref2LNodeTypeDomain1",
				kind: "keyref",
				paths: [[
					"IED",
					"AccessPoint",
					"LN"
				]],
				deep: !1,
				attributes: ["lnType", "lnClass"],
				refer: "LNodeTypeKey",
				text: !1
			},
			{
				name: "ref2LNodeTypeDomain2",
				kind: "keyref",
				paths: [[
					"IED",
					"AccessPoint",
					"Server",
					"LDevice",
					"LN"
				]],
				deep: !1,
				attributes: ["lnType", "lnClass"],
				refer: "LNodeTypeKey",
				text: !1
			},
			{
				name: "ref2LNodeTypeLLN0",
				kind: "keyref",
				paths: [[
					"IED",
					"AccessPoint",
					"Server",
					"LDevice",
					"LN0"
				]],
				deep: !1,
				attributes: ["lnType", "lnClass"],
				refer: "LNodeTypeKey",
				text: !1
			},
			{
				name: "refConnectedAP2IED",
				kind: "keyref",
				paths: [[
					"Communication",
					"SubNetwork",
					"ConnectedAP"
				]],
				deep: !1,
				attributes: ["iedName"],
				refer: "IEDKey",
				text: !1
			},
			{
				name: "ref2SubstationFromTerminal",
				kind: "keyref",
				paths: [["Terminal"]],
				deep: !0,
				attributes: ["substationName"],
				refer: "scl:SubstationKey",
				text: !1
			}
		],
		value: {
			type: "tBaseElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Substation: {
		tag: "Substation",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Process", "SCL"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"PowerTransformer",
				"GeneralEquipment",
				"VoltageLevel",
				"Function"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				PowerTransformer: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInPowerTransformer",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInPTR",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGE",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				VoltageLevel: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueChildNameInVoltageLevel",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}, {
						name: "uniqueLNodeInVoltageLevel",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}]
				},
				Function: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFunctionSS",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInSubstationFunc",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueChildNameInSubstation",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}, {
			name: "uniqueLNodeInSubstation",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tEquipmentContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Process: {
		tag: "Process",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Process", "SCL"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"GeneralEquipment",
				"Function",
				"ConductingEquipment",
				"Substation",
				"Line",
				"Process"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipment2",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGE2",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				Function: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFunction",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				ConductingEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Substation: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueChildNameInProcessSubstation",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}, {
						name: "uniqueLNodeInProcessSubstation",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}]
				},
				Line: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Process: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueChildNameInSubProcess",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}, {
						name: "uniqueLNodeInSubProcess",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueChildNameInProcess",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}, {
			name: "uniqueLNodeInProcess",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tGeneralEquipmentContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Line: {
		tag: "Line",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Process", "SCL"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"nomFreq",
				"numPhases",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				nomFreq: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: "0",
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				numPhases: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 255,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"GeneralEquipment",
				"Function",
				"Voltage",
				"ConductingEquipment",
				"ConnectivityNode"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipment2",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGE2",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				Function: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFunction",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				Voltage: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConductingEquipment: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				},
				ConnectivityNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueChildNameInLine",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}, {
			name: "uniqueLNodeInLine",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tGeneralEquipmentContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LN0: {
		tag: "LN0",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LDevice"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"inst",
				"lnClass",
				"lnType",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inst: {
					required: !0,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !0,
					default: "LLN0",
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"DataSet",
				"ReportControl",
				"LogControl",
				"DOI",
				"Inputs",
				"Outputs",
				"Log",
				"Labels",
				"GSEControl",
				"SampledValueControl",
				"SettingControl"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				DataSet: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				ReportControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				LogControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				DOI: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueSDI_DAIinDOI",
						kind: "unique",
						paths: [["DAI|.", "SDI"]],
						deep: !1,
						attributes: ["name", "ix"],
						refer: null,
						text: !1
					}]
				},
				Inputs: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Outputs: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Log: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInLN",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				GSEControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SampledValueControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SettingControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [
			{
				name: "DataSetKeyLN0",
				kind: "key",
				paths: [["DataSet"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueReportControlInLN0",
				kind: "unique",
				paths: [["ReportControl"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueLogControlInLN0",
				kind: "unique",
				paths: [["LogControl"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueGSEControlInLN0",
				kind: "unique",
				paths: [["GSEControl"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueSampledValueControlInLN0",
				kind: "unique",
				paths: [["SampledValueControl"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueDOIinLN0",
				kind: "unique",
				paths: [["DOI"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueLogInLN0",
				kind: "unique",
				paths: [["Log"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "ref2DataSetReportLN0",
				kind: "keyref",
				paths: [["ReportControl"]],
				deep: !1,
				attributes: ["datSet"],
				refer: "DataSetKeyLN0",
				text: !1
			},
			{
				name: "ref2DataSetLogLN0",
				kind: "keyref",
				paths: [["LogControl"]],
				deep: !1,
				attributes: ["datSet"],
				refer: "DataSetKeyLN0",
				text: !1
			},
			{
				name: "ref2DataSetGSELN0",
				kind: "keyref",
				paths: [["GSEControl"]],
				deep: !1,
				attributes: ["datSet"],
				refer: "DataSetKeyLN0",
				text: !1
			},
			{
				name: "ref2DataSetSVLN0",
				kind: "keyref",
				paths: [["SampledValueControl"]],
				deep: !1,
				attributes: ["datSet"],
				refer: "DataSetKeyLN0",
				text: !1
			}
		],
		value: {
			type: "tLN0",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LN: {
		tag: "LN",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["AccessPoint", "LDevice"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"inst",
				"lnClass",
				"lnType",
				"prefix",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"DataSet",
				"ReportControl",
				"LogControl",
				"DOI",
				"Inputs",
				"Outputs",
				"Log",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				DataSet: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				ReportControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				LogControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				DOI: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueSDI_DAIinDOI",
						kind: "unique",
						paths: [["DAI|.", "SDI"]],
						deep: !1,
						attributes: ["name", "ix"],
						refer: null,
						text: !1
					}]
				},
				Inputs: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Outputs: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Log: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInLN",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [
			{
				name: "DataSetKeyInLN",
				kind: "key",
				paths: [["DataSet"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueReportControlInLN",
				kind: "unique",
				paths: [["ReportControl"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueLogControlInLN",
				kind: "unique",
				paths: [["LogControl"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueDOIinLN",
				kind: "unique",
				paths: [["DOI"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueLogInLN",
				kind: "unique",
				paths: [["Log"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "ref2DataSetReport",
				kind: "keyref",
				paths: [["ReportControl"]],
				deep: !1,
				attributes: ["datSet"],
				refer: "DataSetKeyInLN",
				text: !1
			},
			{
				name: "ref2DataSetLog",
				kind: "keyref",
				paths: [["LogControl"]],
				deep: !1,
				attributes: ["datSet"],
				refer: "DataSetKeyInLN",
				text: !1
			}
		],
		value: {
			type: "tAnyLN",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	IED: {
		tag: "IED",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SCL"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"configVersion",
				"desc",
				"engRight",
				"manufacturer",
				"name",
				"originalSclRelease",
				"originalSclRevision",
				"originalSclVersion",
				"owner",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				configVersion: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				engRight: {
					required: !1,
					default: "full",
					namespace: null,
					validation: {
						enumeration: [
							"full",
							"fix",
							"dataflow"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				manufacturer: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originalSclRelease: {
					required: !1,
					default: "1",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 255,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originalSclRevision: {
					required: !1,
					default: "A",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z]", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originalSclVersion: {
					required: !1,
					default: "2003",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["2[0-2][0-9]{2}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				owner: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Services",
				"AccessPoint",
				"KDC",
				"IEDSourceFiles",
				"MinRequestedSCDFiles",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Services: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				AccessPoint: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNInAccessPoint",
						kind: "unique",
						paths: [["LN"]],
						deep: !1,
						attributes: [
							"inst",
							"lnClass",
							"prefix"
						],
						refer: null,
						text: !1
					}]
				},
				KDC: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				IEDSourceFiles: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				MinRequestedSCDFiles: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueProjectInReqSCD",
						kind: "unique",
						paths: [["MinRequestedSCDFile"]],
						deep: !1,
						attributes: ["fileUuid"],
						refer: null,
						text: !1
					}]
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInIED",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [
			{
				name: "LDeviceInIEDKey",
				kind: "key",
				paths: [[
					"AccessPoint",
					"Server",
					"LDevice"
				]],
				deep: !1,
				attributes: ["inst"],
				refer: null,
				text: !1
			},
			{
				name: "AccessPointInIEDKey",
				kind: "key",
				paths: [["AccessPoint"]],
				deep: !1,
				attributes: ["name"],
				refer: null,
				text: !1
			},
			{
				name: "ref2LDeviceInDataSetForFCDAinLN",
				kind: "keyref",
				paths: [[
					"AccessPoint",
					"Server",
					"LDevice",
					"LN",
					"DataSet",
					"FCDA"
				]],
				deep: !1,
				attributes: ["ldInst"],
				refer: "LDeviceInIEDKey",
				text: !1
			},
			{
				name: "ref2LDeviceInDataSetForFCDAinLN0",
				kind: "keyref",
				paths: [[
					"AccessPoint",
					"Server",
					"LDevice",
					"LN0",
					"DataSet",
					"FCDA"
				]],
				deep: !1,
				attributes: ["ldInst"],
				refer: "LDeviceInIEDKey",
				text: !1
			},
			{
				name: "ServerAtRef2AccessPoint",
				kind: "keyref",
				paths: [["AccessPoint", "ServerAt"]],
				deep: !1,
				attributes: ["apName"],
				refer: "AccessPointInIEDKey",
				text: !1
			}
		],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Communication: {
		tag: "Communication",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SCL"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"SubNetwork"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SubNetwork: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueConnectedAP",
						kind: "unique",
						paths: [["ConnectedAP"]],
						deep: !1,
						attributes: ["iedName", "apName"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueSubNetwork",
			kind: "unique",
			paths: [["SubNetwork"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DataTypeTemplates: {
		tag: "DataTypeTemplates",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SCL"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [
				"LNodeType",
				"DOType",
				"DAType",
				"EnumType"
			],
			details: {
				LNodeType: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueDOInLNodeType",
						kind: "unique",
						paths: [["DO"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				DOType: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueDAorSDOInDOType",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				DAType: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueBDAInDAType",
						kind: "unique",
						paths: [["BDA"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}, {
						name: "uniqueProtNs",
						kind: "unique",
						paths: [["ProtNs"]],
						deep: !1,
						attributes: ["type"],
						refer: null,
						text: !1
					}]
				},
				EnumType: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueOrdInEnumType",
						kind: "unique",
						paths: [["EnumVal"]],
						deep: !1,
						attributes: ["ord"],
						refer: null,
						text: !1
					}, {
						name: "uniqueEnumValue",
						kind: "unique",
						paths: [["EnumVal"]],
						deep: !1,
						attributes: [],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [
			{
				name: "DOTypeKey",
				kind: "key",
				paths: [["DOType"]],
				deep: !1,
				attributes: ["id"],
				refer: null,
				text: !1
			},
			{
				name: "EnumTypeDATypeKey",
				kind: "key",
				paths: [["DAType | scl:EnumType"]],
				deep: !1,
				attributes: ["id"],
				refer: null,
				text: !1
			},
			{
				name: "uniqueDTT_ID",
				kind: "unique",
				paths: [["*"]],
				deep: !1,
				attributes: ["id"],
				refer: null,
				text: !1
			},
			{
				name: "ref2DOType",
				kind: "keyref",
				paths: [["LNodeType", "DO"]],
				deep: !1,
				attributes: ["type"],
				refer: "DOTypeKey",
				text: !1
			},
			{
				name: "ref2DOTypeForSDO",
				kind: "keyref",
				paths: [["DOType", "SDO"]],
				deep: !1,
				attributes: ["type"],
				refer: "DOTypeKey",
				text: !1
			},
			{
				name: "ref2EnumTypeDAType",
				kind: "keyref",
				paths: [[
					"DOType",
					"DA | scl:DAType",
					"BDA"
				]],
				deep: !1,
				attributes: ["type"],
				refer: "scl:EnumTypeDATypeKey",
				text: !1
			}
		],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Text: {
		tag: "Text",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: /* @__PURE__ */ "AccessPoint.AllocationRole.AllocationRoleRef.AnalogueWiringParameters.AnalogueWiringParametersRef.Application.ApplicationSclRef.BDA.Bay.BehaviorDescription.BehaviorDescriptionRef.BehaviorReference.BinaryWiringParameters.BinaryWiringParametersRef.Communication.CommunicationServiceSpecifications.ConductingEquipment.ConnectedAP.ConnectivityNode.ControlRef.ControllingLNode.DA.DAI.DAS.DAType.DO.DOI.DOS.DOType.DataSet.EnumType.EqFunction.EqSubFunction.ExtCtrl.ExtRef.Function.FunctionCatRef.FunctionCategory.FunctionCategoryRef.FunctionRef.FunctionRole.FunctionRoleContent.FunctionSclRef.FunctionTemplate.FunctionalSubVariant.FunctionalVariant.FunctionalVariantGroup.FunctionalVariantRef.GOOSESecurity.GSE.GSEControl.GeneralEquipment.GooseParameters.GooseParametersRef.Header.IED.IEDSourceFiles.InputVar.InputVarRef.Inputs.L2CommParameters.L3IPv4CommParameters.L3IPv6CommParameters.LDevice.LN.LN0.LNode.LNodeDataRef.LNodeInputRef.LNodeInputs.LNodeOutputRef.LNodeOutputs.LNodeSpecNaming.LNodeType.Labels.Line.Log.LogControl.LogParameters.LogParametersRef.MinRequestedSCDFiles.NeutralPoint.OutputVar.OutputVarRef.Outputs.PhysConn.PowerSystemRelation.PowerSystemRelationRef.PowerSystemRelations.PowerTransformer.Process.ProcessEcho.ProcessResource.ProcessResourceRef.ProcessResources.Project.ProjectProcessReference.ReportControl.ReportParameters.ReportParametersRef.RptEnabled.SCL.SDI.SDO.SDS.SMV.SMVParameters.SMVParametersRef.SMVSecurity.SampledValueControl.SclFileReference.Server.ServerAt.ServiceSpecifications.SettingControl.SignalRole.SourceFiles.SourceRef.SubCategory.SubEquipment.SubFunction.SubFunctionTemplate.SubNetwork.SubscriberLNode.Substation.TapChanger.Terminal.TransformerWinding.Variable.VariableApplyTo.VariableRef.VoltageLevel".split("."),
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["source"],
			details: { source: {
				required: !1,
				default: null,
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tAnyContentFromOtherNamespace",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SubCategory: {
		tag: "SubCategory",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Recursive definition of function category\n\nRecursive definition of function category",
		parents: ["FunctionCategory", "SubCategory"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"SubCategory",
				"FunctionCatRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SubCategory: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				FunctionCatRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionCatRef: {
		tag: "FunctionCatRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a function which is part of the current category\n\nReference to a function which is part of the current category",
		parents: ["FunctionCategory", "SubCategory"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["function", "functionUuid"],
			details: {
				function: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				functionUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ProcessResource: {
		tag: "ProcessResource",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["ProcessResources"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"cardinality",
				"desc",
				"max",
				"name",
				"originUuid",
				"selector",
				"templateUuid",
				"uuid"
			],
			details: {
				cardinality: {
					required: !1,
					default: "1..1",
					namespace: null,
					validation: {
						enumeration: [
							"0..1",
							"1..1",
							"0..n",
							"1..n"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				max: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 2,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				selector: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Resource"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Resource: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueResource",
			kind: "unique",
			paths: [["Resource"]],
			deep: !1,
			attributes: ["resInst"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	PowerSystemRelation: {
		tag: "PowerSystemRelation",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["PowerSystemRelations"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"relation",
				"relationUuid",
				"selector",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				relation: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				relationUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				selector: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SourceRef: {
		tag: "SourceRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a data in the process\n\nReference to a data in the process",
		parents: ["LNodeInputs"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"extRefAddr",
				"extRefUuid",
				"input",
				"inputInst",
				"originUuid",
				"pDA",
				"pDO",
				"pLN",
				"resourceName",
				"resourceUuid",
				"service",
				"source",
				"sourceDaName",
				"sourceDoName",
				"sourceLNodeUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				extRefAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				extRefUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				input: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inputInst: {
					required: !1,
					default: "1",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 1,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pDA: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pDO: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pLN: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				service: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"Poll",
							"Report",
							"GOOSE",
							"SMV",
							"Wired",
							"Internal"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				source: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceDaName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceDoName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceLNodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"GooseParametersRef",
				"SMVParametersRef",
				"ReportParametersRef",
				"BinaryWiringParametersRef",
				"AnalogueWiringParametersRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GooseParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SMVParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ReportParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				BinaryWiringParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				AnalogueWiringParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: 1,
				options: [
					"GooseParametersRef",
					"SMVParametersRef",
					"ReportParametersRef",
					"BinaryWiringParametersRef",
					"AnalogueWiringParametersRef"
				]
			}]
		},
		constraints: [],
		value: {
			type: "tLinkFCDARef",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ControlRef: {
		tag: "ControlRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a control data in the process\n\nReference to a control data in the process",
		parents: ["LNodeOutputs"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"controlled",
				"controlledDoName",
				"controlledLNodeUuid",
				"desc",
				"extCtrlAddr",
				"extCtrlUuid",
				"originUuid",
				"output",
				"outputInst",
				"pDO",
				"pLN",
				"resourceName",
				"resourceUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				controlled: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				controlledDoName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				controlledLNodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				extCtrlAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				extCtrlUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				output: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outputInst: {
					required: !1,
					default: "1",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 1,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pDO: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pLN: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"BinaryWiringParametersRef",
				"AnalogueWiringParametersRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				BinaryWiringParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				AnalogueWiringParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: 1,
				options: ["BinaryWiringParametersRef", "AnalogueWiringParametersRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tLinkFCDRef",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SDS: {
		tag: "SDS",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of a sub-Data Object\n\nSpecification of a sub-Data Object",
		parents: ["DOS", "SDS"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"ix",
				"mappedDoName",
				"mappedLnUuid",
				"name"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				mappedDoName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["(([A-Za-z][0-9A-Za-z_]{0,63})/([A-Za-z][0-9A-Za-z_]{0,63})/((LLN0|([A-Za-z][0-9A-Za-z_]{0,10})?[A-Z]{4}[0-9]{1,12}))\\.)?([A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?)"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				mappedLnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"SDS",
				"DAS",
				"SubscriberLNode",
				"ControllingLNode",
				"ProcessEcho",
				"LogParametersRef",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SDS: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				DAS: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SubscriberLNode: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ControllingLNode: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ProcessEcho: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				LogParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInSDS",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: [
					"SDS",
					"DAS",
					"SubscriberLNode",
					"ControllingLNode",
					"ProcessEcho",
					"LogParametersRef"
				]
			}]
		},
		constraints: [{
			name: "uniqueSDS_DASinSDS",
			kind: "unique",
			paths: [["DAS|.", "SDS"]],
			deep: !1,
			attributes: ["name", "ix"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DAS: {
		tag: "DAS",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of a Data attribute\n\nSpecification of a Data attribute",
		parents: ["DOS", "SDS"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"ix",
				"mappedDaName",
				"mappedLnUuid",
				"name",
				"valImport",
				"valKind"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				mappedDaName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["(([A-Za-z][0-9A-Za-z_]{0,63})/([A-Za-z][0-9A-Za-z_]{0,63})/((LLN0|([A-Za-z][0-9A-Za-z_]{0,10})?[A-Z]{4}[0-9]{1,12}))\\.)?([A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?)\\.([a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*)"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				mappedLnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valImport: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valKind: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"Spec",
							"Conf",
							"RO",
							"Set"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"SubscriberLNode",
				"ControllingLNode",
				"ProcessEcho",
				"LogParametersRef",
				"Val",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SubscriberLNode: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ControllingLNode: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ProcessEcho: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				LogParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Val: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInDAS",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: [
					"SubscriberLNode",
					"ControllingLNode",
					"ProcessEcho",
					"LogParametersRef",
					"Val",
					"Labels"
				]
			}]
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SubscriberLNode: {
		tag: "SubscriberLNode",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: [
			"DAS",
			"DOS",
			"SDS"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"inputName",
				"pLN",
				"resourceName",
				"resourceUuid",
				"service"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inputName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pLN: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				service: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"Poll",
							"Report",
							"GOOSE",
							"SMV",
							"Wired",
							"Internal"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"GooseParametersRef",
				"SMVParametersRef",
				"ReportParametersRef",
				"BinaryWiringParametersRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GooseParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SMVParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ReportParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				BinaryWiringParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: 1,
				options: [
					"GooseParametersRef",
					"SMVParametersRef",
					"ReportParametersRef",
					"BinaryWiringParametersRef"
				]
			}]
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ControllingLNode: {
		tag: "ControllingLNode",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: [
			"DAS",
			"DOS",
			"SDS"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"outputName",
				"pLN",
				"resourceName",
				"resourceUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outputName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pLN: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resourceUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"BinaryWiringParametersRef",
				"AnalogueWiringParametersRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				BinaryWiringParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				AnalogueWiringParametersRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: 1,
				options: ["BinaryWiringParametersRef", "AnalogueWiringParametersRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LogParametersRef: {
		tag: "LogParametersRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of the Log parameters expected for the current DOS when Log capability is required\n\nSpecification of the Log parameters expected for the current DOS when Log capability is required",
		parents: [
			"DAS",
			"DOS",
			"SDS"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc", "id"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Labels: {
		tag: "Labels",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: /* @__PURE__ */ "AccessPoint.BDA.Bay.ConductingEquipment.ConnectivityNode.DA.DAI.DAS.DAType.DO.DOI.DOS.DOType.EqFunction.EqSubFunction.Function.GOOSESecurity.GeneralEquipment.IED.LDevice.LN.LN0.LNode.LNodeType.Line.PowerTransformer.Process.SDI.SDO.SDS.SMVSecurity.SubEquipment.SubFunction.SubNetwork.Substation.TapChanger.TransformerWinding.VoltageLevel".split("."),
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Label"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Label: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLabel",
			kind: "unique",
			paths: [["Label"]],
			deep: !1,
			attributes: ["id", "lang"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SclFileReference: {
		tag: "SclFileReference",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"ApplicationSclRef",
			"FunctionSclRef",
			"IEDSourceFiles",
			"SourceFiles"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"fileName",
				"fileType",
				"fileUuid",
				"revision",
				"version",
				"when"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"ICD",
							"IID",
							"CID",
							"SSD",
							"SCD",
							"SED"
						],
						pattern: ["\\i\\c*", "[A-Z]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				revision: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				version: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				when: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SubCheckoutID: {
		tag: "SubCheckoutID",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "When an IED is checkedout for a collaborative work by an SCC, it may be required to give right to a subpart of the collaborative project. So a CheckoutID may have an additional SubCheckoutID giving IED to nother project\n\nWhen an IED is checkedout for a collaborative work by an SCC, it may be required to give right to a subpart of the collaborative project. So a CheckoutID may have an additional SubCheckoutID giving IED to nother project",
		parents: ["CheckoutID", "SubCheckoutID"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"engRight",
				"fileName",
				"fileType",
				"fileUuid",
				"headerId",
				"revision",
				"version",
				"when"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				engRight: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"full",
							"fix",
							"dataflow"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"SED",
							"SCC",
							"ICD",
							"IID",
							"CID",
							"SSD",
							"SCD"
						],
						pattern: ["\\i\\c*", "[A-Z]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				headerId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				revision: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				version: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				when: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["SubCheckoutID"],
			details: { SubCheckoutID: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tSclFileUUIDCheckoutRestriction",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	VariableApplyTo: {
		tag: "VariableApplyTo",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["Variable"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"attribute",
				"daName",
				"defaultValue",
				"desc",
				"doName",
				"element",
				"elementUuid",
				"format",
				"sGroup"
			],
			details: {
				attribute: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				daName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				defaultValue: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				doName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				element: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				elementUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				format: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sGroup: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GooseParameters: {
		tag: "GooseParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["CommunicationServiceSpecifications", "ServiceSpecifications"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"cbName",
				"desc",
				"dsName",
				"goId",
				"id",
				"maxTime",
				"minTime",
				"securityEnabled"
			],
			details: {
				cbName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dsName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				goId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxTime: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				minTime: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				securityEnabled: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"L2CommParameters",
				"L3IPv4CommParameters",
				"L3IPv6CommParameters"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				L2CommParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				L3IPv4CommParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				L3IPv6CommParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: 1,
				options: [
					"L2CommParameters",
					"L3IPv4CommParameters",
					"L3IPv6CommParameters"
				]
			}]
		},
		constraints: [],
		value: {
			type: "tControlBlockParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SMVParameters: {
		tag: "SMVParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["CommunicationServiceSpecifications", "ServiceSpecifications"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"cbName",
				"desc",
				"dsName",
				"id",
				"multicast",
				"nofASDU",
				"securityEnabled",
				"smpMod",
				"smpRate",
				"smvId"
			],
			details: {
				cbName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dsName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				multicast: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				nofASDU: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				securityEnabled: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				smpMod: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"SmpPerPeriod",
							"SmpPerSec",
							"SecPerSmp"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				smpRate: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				smvId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"L2CommParameters",
				"L3IPv4CommParameters",
				"L3IPv6CommParameters"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				L2CommParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				L3IPv4CommParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				L3IPv6CommParameters: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: 1,
				options: [
					"L2CommParameters",
					"L3IPv4CommParameters",
					"L3IPv6CommParameters"
				]
			}]
		},
		constraints: [],
		value: {
			type: "tControlBlockParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ReportParameters: {
		tag: "ReportParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["CommunicationServiceSpecifications", "ServiceSpecifications"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"bufTime",
				"buffered",
				"cbName",
				"desc",
				"dsName",
				"id",
				"intgPd"
			],
			details: {
				bufTime: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				buffered: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cbName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dsName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intgPd: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlBlockParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BinaryWiringParameters: {
		tag: "BinaryWiringParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["ServiceSpecifications"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"debTm",
				"desc",
				"fastOutput",
				"id",
				"inpNam",
				"inpRef",
				"outNam",
				"outOffDl",
				"outOnDl",
				"outRef",
				"outTyp",
				"vInOff",
				"vInOn"
			],
			details: {
				debTm: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fastOutput: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inpNam: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inpRef: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outNam: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outOffDl: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outOnDl: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outRef: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outTyp: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"Normally open",
							"Normally closed",
							"Change over"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vInOff: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vInOn: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["(\\+|-)?([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([Ee](\\+|-)?[0-9]+)?|(\\+|-)?INF|NaN"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tWiringParameters",
			validation: {
				enumeration: [
					"Normally open",
					"Normally closed",
					"Change over"
				],
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	AnalogueWiringParameters: {
		tag: "AnalogueWiringParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["ServiceSpecifications"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"dsgInp",
				"fctInp",
				"id",
				"inpNam",
				"inpRef"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dsgInp: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fctInp: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inpNam: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inpRef: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tWiringParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LogParameters: {
		tag: "LogParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["ServiceSpecifications"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"cbName",
				"desc",
				"dsName",
				"id",
				"intgPd",
				"logEna",
				"logLdInst",
				"logLnClass",
				"logLnInst",
				"logName",
				"logPrefix",
				"reasonCode"
			],
			details: {
				cbName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dsName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intgPd: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logEna: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logLdInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logLnClass: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logLnInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logPrefix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				reasonCode: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlBlockParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionRef: {
		tag: "FunctionRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a function definition attached to current allocation role\n\nReference to a function definition attached to current allocation role",
		parents: ["AllocationRole", "FunctionRoleContent"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"function",
				"functionUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				function: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				functionUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionalVariantRef",
				"SignalRole"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SignalRole: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionRole: {
		tag: "FunctionRole",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Role attached to the application type\n\nRole attached to the application type",
		parents: ["Application"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"cardinality",
				"desc",
				"max",
				"name",
				"originUuid",
				"selector",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				cardinality: {
					required: !1,
					default: "1..1",
					namespace: null,
					validation: {
						enumeration: [
							"0..1",
							"1..1",
							"0..n",
							"1..n"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				max: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 2,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				selector: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionalVariantRef",
				"FunctionRoleContent"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				FunctionRoleContent: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}, {
				minOccurrence: 1,
				maxOccurrence: null,
				options: ["FunctionRoleContent"]
			}]
		},
		constraints: [{
			name: "uniqueRoleContent",
			kind: "unique",
			paths: [["FunctionRoleContent"]],
			deep: !1,
			attributes: ["roleInst"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionalVariant: {
		tag: "FunctionalVariant",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Variant attached to the application type\n\nVariant attached to the application type",
		parents: ["Application", "FunctionalVariantGroup"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"isBaseline",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				isBaseline: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionalSubVariant",
				"VariableRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalSubVariant: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				VariableRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalSubVariant", "VariableRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tAbstractFunctionalVariant",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionalVariantGroup: {
		tag: "FunctionalVariantGroup",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Group of variants attached to the application type\n\nGroup of variants attached to the application type",
		parents: ["Application"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariant"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariant: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	AllocationRoleRef: {
		tag: "AllocationRoleRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Allocation role attached to the application type\n\nAllocation role attached to the application type",
		parents: ["Application"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"allocationRole",
				"allocationRoleUuid",
				"desc"
			],
			details: {
				allocationRole: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				allocationRoleUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ApplicationSclRef: {
		tag: "ApplicationSclRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to the ASD files used to create an Application\n\nReference to the ASD files used to create an Application",
		parents: ["Application"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "SclFileReference"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SclFileReference: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	InputVar: {
		tag: "InputVar",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Input variable used in the behavior description\n\nInput variable used in the behavior description",
		parents: ["BehaviorDescription"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"daName",
				"dataName",
				"desc",
				"doName",
				"inputName",
				"inputUuid",
				"lnodeUuid",
				"value",
				"varName"
			],
			details: {
				daName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dataName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				doName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inputName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inputUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				value: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				varName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tLogicVarRef",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	OutputVar: {
		tag: "OutputVar",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Output variable used in the behavior description\n\nOutput variable used in the behavior description",
		parents: ["BehaviorDescription"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"daName",
				"dataName",
				"desc",
				"doName",
				"lnodeUuid",
				"outputName",
				"outputUuid",
				"value",
				"varName"
			],
			details: {
				daName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dataName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				doName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outputName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				outputUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				value: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				varName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tLogicVarRef",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BehaviorReference: {
		tag: "BehaviorReference",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a behavior description when for example a manufacturer wants to indicate its implementation of a user specification described by another behavior description\n\nReference to a behavior description when for example a manufacturer wants to indicate its implementation of a user specification described by another behavior description",
		parents: ["BehaviorDescription"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"behaviorReference",
				"behaviorUuid",
				"desc"
			],
			details: {
				behaviorReference: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				behaviorUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ProjectProcessReference: {
		tag: "ProjectProcessReference",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to the process elements belonging to the current project\n\nReference to the process elements belonging to the current project",
		parents: ["Project"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"processReference",
				"processUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				processReference: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				processUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNode: {
		tag: "LNode",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"Bay",
			"ConductingEquipment",
			"ConnectivityNode",
			"EqFunction",
			"EqSubFunction",
			"Function",
			"FunctionTemplate",
			"GeneralEquipment",
			"Line",
			"PowerTransformer",
			"Process",
			"SubEquipment",
			"SubFunction",
			"SubFunctionTemplate",
			"Substation",
			"TapChanger",
			"TransformerWinding",
			"VoltageLevel"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"iedName",
				"ldInst",
				"lnClass",
				"lnInst",
				"lnType",
				"lnUuid",
				"prefix",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedName: {
					required: !1,
					default: "None",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"None",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 0,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnType: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInLNode",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SubFunctionTemplate: {
		tag: "SubFunctionTemplate",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["FunctionTemplate", "SubFunctionTemplate"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"LNode",
				"GeneralEquipment",
				"ConductingEquipment",
				"SubFunctionTemplate"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipmentOfSubFunctionTemplate",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGESubFuncTemplate",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				ConductingEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInConductingEquipmentOfSubFunctionTemplate",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueSubEquipmentSubFuncTemplate",
						kind: "unique",
						paths: [["SubEquipment"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				SubFunctionTemplate: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubSubFunctionTemplate",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueSubSubFuncTemplate",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInSubFunctionTemplate",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInSubFuncTemplate",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "t6-100LNodeContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GeneralEquipment: {
		tag: "GeneralEquipment",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"Bay",
			"EqFunction",
			"EqSubFunction",
			"Function",
			"FunctionTemplate",
			"Line",
			"Process",
			"SubFunction",
			"SubFunctionTemplate",
			"Substation",
			"VoltageLevel"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid",
				"virtual"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"AXN",
							"BAT",
							"MOT",
							"FAN",
							"FIL",
							"PMP",
							"TNK",
							"VLV"
						],
						pattern: ["\\i\\c*", "E[A-Z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 3,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				virtual: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"EqFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				EqFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFuncForGE",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFuncForGE",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInGeneralEquipment",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInGE",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tEquipment",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConductingEquipment: {
		tag: "ConductingEquipment",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"Bay",
			"Function",
			"FunctionTemplate",
			"Line",
			"Process",
			"SubFunction",
			"SubFunctionTemplate"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid",
				"virtual"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "CBR.DIS.VTR.CTR.GEN.CAP.REA.CON.MOT.EFN.PSH.BAT.BSH.CAB.GIL.LIN.RES.RRC.SAR.TCF.TCR.IFL.FAN.SCR.SMC.PMP".split("."),
						pattern: ["\\i\\c*", "E[A-Z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 3,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				virtual: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"Terminal",
				"SubEquipment",
				"EqFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Terminal: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 2
					},
					constraints: null
				},
				SubEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInACESubEquipment",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				EqFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFuncForCE",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFuncForCE",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tAbstractConductingEquipment",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Private: {
		tag: "Private",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: /* @__PURE__ */ "AccessPoint.BDA.Bay.Communication.ConductingEquipment.ConnectedAP.ConnectivityNode.DA.DAI.DAType.DO.DOI.DOType.DataSet.EnumType.EqFunction.EqSubFunction.ExtCtrl.ExtRef.Function.GOOSESecurity.GSE.GSEControl.GeneralEquipment.IED.IEDSourceFiles.Inputs.LDevice.LN.LN0.LNode.LNodeType.Labels.Line.Log.LogControl.MinRequestedSCDFiles.NeutralPoint.Outputs.PhysConn.PowerTransformer.Process.ReportControl.RptEnabled.SCL.SDI.SDO.SMV.SMVSecurity.SampledValueControl.SclFileReference.Server.ServerAt.SettingControl.SourceFiles.SubEquipment.SubFunction.SubNetwork.Substation.TapChanger.Terminal.TransformerWinding.VoltageLevel".split("."),
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["source", "type"],
			details: {
				source: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tAnyContentFromOtherNamespace",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Header: {
		tag: "Header",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SCL"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"baseUuid",
				"fileType",
				"id",
				"nameStructure",
				"revision",
				"toolID",
				"uuid",
				"version"
			],
			details: {
				baseUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileType: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"ICD",
							"IID",
							"CID",
							"SSD",
							"SCD",
							"SED"
						],
						pattern: ["\\i\\c*", "[A-Z]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				nameStructure: {
					required: !1,
					default: "IEDName",
					namespace: null,
					validation: {
						enumeration: ["IEDName"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				revision: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				toolID: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				version: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [
				"Text",
				"History",
				"SourceFiles"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				History: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SourceFiles: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueHitem",
			kind: "unique",
			paths: [["History", "Hitem"]],
			deep: !1,
			attributes: ["version", "revision"],
			refer: null,
			text: !1
		}],
		value: {
			type: null,
			validation: {
				enumeration: ["IEDName"],
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	PowerTransformer: {
		tag: "PowerTransformer",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"Bay",
			"Substation",
			"VoltageLevel"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid",
				"virtual"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: "PTR",
					namespace: null,
					validation: {
						enumeration: ["PTR"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				virtual: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"TransformerWinding",
				"SubEquipment",
				"EqFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				TransformerWinding: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInTransformerWinding",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInPTW",
						kind: "unique",
						paths: [[
							"SubEquipment|.",
							"TapChanger|.",
							"EqFunction"
						]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				SubEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubEquipmentPTR",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInPTRSubEquipment",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				EqFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFuncForPTR",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFuncForPTR",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInPowerTransformer",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInPTR",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tEquipment",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	VoltageLevel: {
		tag: "VoltageLevel",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Substation"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"nomFreq",
				"numPhases",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				nomFreq: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: "0",
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				numPhases: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 255,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"PowerTransformer",
				"GeneralEquipment",
				"Voltage",
				"Bay",
				"Function"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				PowerTransformer: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInPowerTransformer",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInPTR",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGE",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				Voltage: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Bay: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueChildNameInBay",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}, {
						name: "uniqueLNodeInBay",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}]
				},
				Function: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFunctionVL",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInVoltageLevelFunc",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueChildNameInVoltageLevel",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}, {
			name: "uniqueLNodeInVoltageLevel",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tEquipmentContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Function: {
		tag: "Function",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"Bay",
			"Line",
			"Process",
			"Substation",
			"VoltageLevel"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"SubFunction",
				"GeneralEquipment",
				"ConductingEquipment"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SubFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInSubFunc",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipmentOfFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGEFunc",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				ConductingEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInConductingEquipmentOfFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInCondEq",
						kind: "unique",
						paths: [["SubEquipment|.", "EqFunction"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInFunctionSS",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInSubstationFunc",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tPowerSystemResource",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Voltage: {
		tag: "Voltage",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Line", "VoltageLevel"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["multiplier", "unit"],
			details: {
				multiplier: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: [
							"",
							"m",
							"k",
							"M",
							"mu",
							"y",
							"z",
							"a",
							"f",
							"p",
							"n",
							"c",
							"d",
							"da",
							"h",
							"G",
							"T",
							"P",
							"E",
							"Z",
							"Y"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				unit: {
					required: !0,
					default: "V",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConnectivityNode: {
		tag: "ConnectivityNode",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Bay", "Line"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"pathName",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pathName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+/.+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tLNodeContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DataSet: {
		tag: "DataSet",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN", "LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"FCDA"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				FCDA: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 1,
				maxOccurrence: null,
				options: ["FCDA"]
			}]
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ReportControl: {
		tag: "ReportControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN", "LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"bufTime",
				"buffered",
				"confRev",
				"datSet",
				"desc",
				"indexed",
				"intgPd",
				"name",
				"rptID",
				"templateUuid",
				"uuid"
			],
			details: {
				bufTime: {
					required: !1,
					default: "0",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				buffered: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				confRev: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				indexed: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intgPd: {
					required: !1,
					default: "0",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				rptID: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[ -~]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 129,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"TrgOps",
				"OptFields",
				"RptEnabled"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				TrgOps: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				OptFields: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				RptEnabled: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlWithTriggerOpt",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LogControl: {
		tag: "LogControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN", "LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"bufTime",
				"datSet",
				"desc",
				"intgPd",
				"ldInst",
				"lnClass",
				"lnInst",
				"logEna",
				"logName",
				"name",
				"prefix",
				"reasonCode",
				"templateUuid",
				"uuid"
			],
			details: {
				bufTime: {
					required: !1,
					default: "0",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intgPd: {
					required: !1,
					default: "0",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !1,
					default: "LLN0",
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logEna: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				reasonCode: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"TrgOps"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				TrgOps: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlWithTriggerOpt",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DOI: {
		tag: "DOI",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN", "LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"accessControl",
				"desc",
				"ix",
				"name"
			],
			details: {
				accessControl: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 12,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"SDI",
				"DAI",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SDI: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueSDI_DAIinSDI",
						kind: "unique",
						paths: [["DAI|.", "SDI"]],
						deep: !1,
						attributes: ["name", "ix"],
						refer: null,
						text: !1
					}]
				},
				DAI: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelinDOI",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["SDI", "DAI"]
			}]
		},
		constraints: [{
			name: "uniqueSDI_DAIinDOI",
			kind: "unique",
			paths: [["DAI|.", "SDI"]],
			deep: !1,
			attributes: ["name", "ix"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Inputs: {
		tag: "Inputs",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN", "LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"ExtRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				ExtRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Outputs: {
		tag: "Outputs",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN", "LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc"],
			details: { desc: {
				required: !1,
				default: "",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"ExtCtrl"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				ExtCtrl: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Log: {
		tag: "Log",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN", "LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc", "name"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GSEControl: {
		tag: "GSEControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"appID",
				"confRev",
				"datSet",
				"desc",
				"fixedOffs",
				"name",
				"securityEnable",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				appID: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[ -~]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 129,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				confRev: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fixedOffs: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				securityEnable: {
					required: !1,
					default: "None",
					namespace: null,
					validation: {
						enumeration: [
							"None",
							"Signature",
							"SignatureAndEncryption"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: "GOOSE",
					namespace: null,
					validation: {
						enumeration: ["GSSE", "GOOSE"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"IEDName",
				"Protocol"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				IEDName: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Protocol: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlWithIEDName",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SampledValueControl: {
		tag: "SampledValueControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"confRev",
				"datSet",
				"desc",
				"multicast",
				"name",
				"nofASDU",
				"securityEnable",
				"smpMod",
				"smpRate",
				"smvID",
				"templateUuid",
				"uuid"
			],
			details: {
				confRev: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				multicast: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				nofASDU: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				securityEnable: {
					required: !1,
					default: "None",
					namespace: null,
					validation: {
						enumeration: [
							"None",
							"Signature",
							"SignatureAndEncryption"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				smpMod: {
					required: !1,
					default: "SmpPerPeriod",
					namespace: null,
					validation: {
						enumeration: [
							"SmpPerPeriod",
							"SmpPerSec",
							"SecPerSmp"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				smpRate: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				smvID: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[ -~]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 129,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"IEDName",
				"SmvOpts",
				"Protocol"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				IEDName: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SmvOpts: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Protocol: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlWithIEDName",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SettingControl: {
		tag: "SettingControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LN0"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"actSG",
				"desc",
				"numOfSGs",
				"resvTms"
			],
			details: {
				actSG: {
					required: !1,
					default: "1",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 1,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				numOfSGs: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 1,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resvTms: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 65535,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Services: {
		tag: "Services",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["AccessPoint", "IED"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["nameLength"],
			details: { nameLength: {
				required: !1,
				default: "32",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: [
						"32",
						"64",
						"6[5-9]",
						"[7-9]\\d",
						"[1-9]\\d\\d+"
					],
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: /* @__PURE__ */ "DynAssociation.SettingGroups.GetDirectory.GetDataObjectDefinition.DataObjectDirectory.GetDataSetValue.SetDataSetValue.DataSetDirectory.ConfDataSet.DynDataSet.ReadWrite.TimerActivatedControl.ConfReportControl.GetCBValues.ConfLogControl.ReportSettings.LogSettings.GSESettings.SMVSettings.GSEDir.GOOSE.GSSE.SMVsc.FileHandling.ConfLNs.ClientServices.ConfLdName.SupSubscription.ConfSigRef.ValueHandling.RedProt.TimeSyncProt.CommProt.SCSM.Security.MultiAPPerSubNet".split("."),
			details: {
				DynAssociation: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SettingGroups: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GetDirectory: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GetDataObjectDefinition: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				DataObjectDirectory: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GetDataSetValue: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SetDataSetValue: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				DataSetDirectory: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConfDataSet: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				DynDataSet: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ReadWrite: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				TimerActivatedControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConfReportControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GetCBValues: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConfLogControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ReportSettings: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				LogSettings: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GSESettings: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SMVSettings: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GSEDir: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GOOSE: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GSSE: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SMVsc: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FileHandling: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConfLNs: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ClientServices: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConfLdName: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SupSubscription: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConfSigRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ValueHandling: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				RedProt: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				TimeSyncProt: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				CommProt: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SCSM: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Security: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				MultiAPPerSubNet: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	AccessPoint: {
		tag: "AccessPoint",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["IED"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"clock",
				"desc",
				"kdc",
				"name",
				"router",
				"templateUuid",
				"uuid"
			],
			details: {
				clock: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				kdc: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				router: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Server",
				"LN",
				"ServerAt",
				"Services",
				"GOOSESecurity",
				"SMVSecurity",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Server: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueAssociationInServer",
						kind: "unique",
						paths: [["Association"]],
						deep: !1,
						attributes: ["associationID"],
						refer: null,
						text: !1
					}]
				},
				LN: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				},
				ServerAt: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Services: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GOOSESecurity: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 7
					},
					constraints: null
				},
				SMVSecurity: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 7
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInAP",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: 1,
				options: [
					"Server",
					"LN",
					"ServerAt"
				]
			}]
		},
		constraints: [{
			name: "uniqueLNInAccessPoint",
			kind: "unique",
			paths: [["LN"]],
			deep: !1,
			attributes: [
				"inst",
				"lnClass",
				"prefix"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	KDC: {
		tag: "KDC",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["IED"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"apName",
				"apUuid",
				"iedName"
			],
			details: {
				apName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				apUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	IEDSourceFiles: {
		tag: "IEDSourceFiles",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["IED"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"SclFileReference"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SclFileReference: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	MinRequestedSCDFiles: {
		tag: "MinRequestedSCDFiles",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["IED"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"MinRequestedSCDFile"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				MinRequestedSCDFile: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueProjectInReqSCD",
			kind: "unique",
			paths: [["MinRequestedSCDFile"]],
			deep: !1,
			attributes: ["fileUuid"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tBaseElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SubNetwork: {
		tag: "SubNetwork",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Communication"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: ["8-MMS", "8-XMPP"],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"BitRate",
				"ConnectedAP"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				BitRate: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConnectedAP: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueGSEinConnectedAP",
						kind: "unique",
						paths: [["GSE"]],
						deep: !1,
						attributes: ["cbName", "ldInst"],
						refer: null,
						text: !1
					}, {
						name: "uniqueSMVinConnectedAP",
						kind: "unique",
						paths: [["SMV"]],
						deep: !1,
						attributes: ["cbName", "ldInst"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueConnectedAP",
			kind: "unique",
			paths: [["ConnectedAP"]],
			deep: !1,
			attributes: ["iedName", "apName"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNodeType: {
		tag: "LNodeType",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DataTypeTemplates"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"id",
				"iedType",
				"lnClass"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedType: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"DO",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				DO: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInLNType",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueDOInLNodeType",
			kind: "unique",
			paths: [["DO"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tIDNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DOType: {
		tag: "DOType",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DataTypeTemplates"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"cdc",
				"desc",
				"id",
				"iedType"
			],
			details: {
				cdc: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "SPS.DPS.INS.ENS.ACT.ACD.SEC.BCR.HST.VSS.MV.CMV.SAV.WYE.DEL.SEQ.HMV.HWYE.HDEL.SPC.DPC.INC.ENC.BSC.ISC.APC.BAC.SPG.ING.ENG.ORG.TSG.CUG.VSG.ASG.CURVE.CSG.DPL.LPL.CSD.CST.BTS.UTS.LTS.GTS.MTS.NTS.STS.CTS.OTS.VSD.ORS.TCS".split("."),
						pattern: ["\\i\\c*", "[A-Za-z]+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 5,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedType: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"SDO",
				"DA",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SDO: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				DA: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueProtNsInDA",
						kind: "unique",
						paths: [["ProtNs"]],
						deep: !1,
						attributes: ["type"],
						refer: null,
						text: !1
					}]
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInDOType",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["SDO", "DA"]
			}]
		},
		constraints: [{
			name: "uniqueDAorSDOInDOType",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tIDNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DAType: {
		tag: "DAType",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DataTypeTemplates"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"id",
				"iedType"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedType: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"BDA",
				"ProtNs",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				BDA: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				},
				ProtNs: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: ["[ -~]+:20\\d\\d[A-Z]?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInDAType",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueBDAInDAType",
			kind: "unique",
			paths: [["BDA"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}, {
			name: "uniqueProtNs",
			kind: "unique",
			paths: [["ProtNs"]],
			deep: !1,
			attributes: ["type"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tIDNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	EnumType: {
		tag: "EnumType",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DataTypeTemplates"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc", "id"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"EnumVal"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				EnumVal: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: ["[\\p{IsBasicLatin}\\p{IsLatin-1Supplement}]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 127,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueOrdInEnumType",
			kind: "unique",
			paths: [["EnumVal"]],
			deep: !1,
			attributes: ["ord"],
			refer: null,
			text: !1
		}, {
			name: "uniqueEnumValue",
			kind: "unique",
			paths: [["EnumVal"]],
			deep: !1,
			attributes: [],
			refer: null,
			text: !1
		}],
		value: {
			type: "tIDNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Resource: {
		tag: "Resource",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "resource bound to this element could be multi\n\nresource bound to this element could be multi",
		parents: ["ProcessResource"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"resInst",
				"source",
				"sourceUuid"
			],
			details: {
				resInst: {
					required: !1,
					default: "1",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 1,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				source: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "normalizedString",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GooseParametersRef: {
		tag: "GooseParametersRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of the communication parameters expected for the current SourceRef when ServiceType is GOOSE\n\nSpecification of the communication parameters expected for the current SourceRef when ServiceType is GOOSE",
		parents: ["SourceRef", "SubscriberLNode"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc", "id"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SMVParametersRef: {
		tag: "SMVParametersRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of the communication parameters expected for the current SourceRef when ServiceType is SMV\n\nSpecification of the communication parameters expected for the current SourceRef when ServiceType is SMV",
		parents: ["SourceRef", "SubscriberLNode"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc", "id"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ReportParametersRef: {
		tag: "ReportParametersRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of the communication parameters expected for the current SourceRef when ServiceType is Report\n\nSpecification of the communication parameters expected for the current SourceRef when ServiceType is Report",
		parents: ["SourceRef", "SubscriberLNode"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc", "id"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BinaryWiringParametersRef: {
		tag: "BinaryWiringParametersRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of the binary wiring parameters expected for the current SourceRef when ServiceType is Wired\n\nSpecification of the binary wiring parameters expected for the current SourceRef when ServiceType is Wired",
		parents: [
			"ControlRef",
			"ControllingLNode",
			"SourceRef",
			"SubscriberLNode"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc", "id"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	AnalogueWiringParametersRef: {
		tag: "AnalogueWiringParametersRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Specification of the analogue wiring parameters expected for the current SourceRef when ServiceType is Wired\n\nSpecification of the analogue wiring parameters expected for the current SourceRef when ServiceType is Wired",
		parents: [
			"ControlRef",
			"ControllingLNode",
			"SourceRef"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc", "id"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				id: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElementWithDesc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Val: {
		tag: "Val",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"BDA",
			"DA",
			"DAI",
			"DAS"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["sGroup"],
			details: { sGroup: {
				required: !1,
				default: null,
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: 0,
					maxInclusive: 4294967295,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "normalizedString",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Label: {
		tag: "Label",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Labels"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["id", "lang"],
			details: {
				id: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\S+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lang: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "normalizedString",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	L2CommParameters: {
		tag: "L2CommParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["GooseParameters", "SMVParameters"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"appId",
				"desc",
				"macAddr",
				"vlanId",
				"vlanPriority"
			],
			details: {
				appId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-F]{4}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				macAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2}\\-[0-9A-F]{2}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vlanId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-F]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vlanPriority: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-7]"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tCommParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	L3IPv4CommParameters: {
		tag: "L3IPv4CommParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["GooseParameters", "SMVParameters"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"IPv4",
				"IPv4-IGMPv3Src",
				"appId",
				"desc",
				"vlanId",
				"vlanPriority"
			],
			details: {
				IPv4: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				"IPv4-IGMPv3Src": {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				appId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-F]{4}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vlanId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-F]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vlanPriority: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-7]"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tCommParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	L3IPv6CommParameters: {
		tag: "L3IPv6CommParameters",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: null,
		parents: ["GooseParameters", "SMVParameters"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"IPv6",
				"IPv6-IGMPv3Src",
				"appId",
				"desc",
				"vlanId",
				"vlanPriority"
			],
			details: {
				IPv6: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				"IPv6-IGMPv3Src": {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				appId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-F]{4}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vlanId: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-F]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				vlanPriority: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-7]"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tCommParameters",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionalVariantRef: {
		tag: "FunctionalVariantRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Ref to a functional variant of the Application\n\nRef to a functional variant of the Application",
		parents: [
			"AllocationRoleRef",
			"BehaviorDescriptionRef",
			"FunctionCategoryRef",
			"FunctionRef",
			"FunctionRole",
			"InputVarRef",
			"LNodeDataRef",
			"LNodeInputRef",
			"LNodeOutputRef",
			"OutputVarRef",
			"PowerSystemRelationRef",
			"ProcessResourceRef",
			"SignalRole",
			"VariableRef"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"functionalVariant",
				"functionalVariantUuid",
				"update"
			],
			details: {
				functionalVariant: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				functionalVariantUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				update: {
					required: !1,
					default: "add",
					namespace: null,
					validation: {
						enumeration: ["add", "remove"],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text"],
			details: { Text: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElement",
			validation: {
				enumeration: ["add", "remove"],
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SignalRole: {
		tag: "SignalRole",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Signal list attached to the referenced function in the context of the cureent Role definition\n\nSignal list attached to the referenced function in the context of the cureent Role definition",
		parents: ["FunctionRef"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionalVariantRef",
				"LNodeInputRef",
				"LNodeOutputRef",
				"LNodeDataRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				LNodeInputRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				LNodeOutputRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				LNodeDataRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionRoleContent: {
		tag: "FunctionRoleContent",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "an instance of the current role. In case of application type definition, instance 1 is the default instance\n\nan instance of the current role. In case of application type definition, instance 1 is the default instance",
		parents: ["FunctionRole"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["roleInst"],
			details: { roleInst: {
				required: !1,
				default: "1",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: 1,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionRef",
				"BehaviorDescriptionRef",
				"ProcessResourceRef",
				"VariableRef",
				"FunctionCategoryRef",
				"PowerSystemRelationRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				BehaviorDescriptionRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				ProcessResourceRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				VariableRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionCategoryRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				PowerSystemRelationRef: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: [
					"FunctionRef",
					"BehaviorDescriptionRef",
					"ProcessResourceRef",
					"VariableRef",
					"FunctionCategoryRef",
					"PowerSystemRelationRef"
				]
			}]
		},
		constraints: [],
		value: {
			type: "tBaseExtensionElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionalSubVariant: {
		tag: "FunctionalSubVariant",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Sub variant of the current variant\n\nSub variant of the current variant",
		parents: ["FunctionalSubVariant", "FunctionalVariant"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"isBaseline",
				"name",
				"originUuid",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				isBaseline: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				originUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionalSubVariant",
				"VariableRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalSubVariant: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				VariableRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalSubVariant", "VariableRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tAbstractFunctionalVariant",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	VariableRef: {
		tag: "VariableRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a variable attached to current variant, to parameterize the instance with the value defined in the reference\n\nReference to a variable attached to current variant, to parameterize the instance with the value defined in the reference",
		parents: [
			"FunctionRoleContent",
			"FunctionalSubVariant",
			"FunctionalVariant"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"value",
				"variable",
				"variableUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				value: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				variable: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				variableUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tVariableRef",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	EqFunction: {
		tag: "EqFunction",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"ConductingEquipment",
			"GeneralEquipment",
			"PowerTransformer",
			"SubEquipment",
			"TapChanger",
			"TransformerWinding"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"GeneralEquipment",
				"EqSubFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipmentOfFuncForEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGEFuncForEquipment",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				EqSubFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubFuncForEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueSubFuncForEquipment",
						kind: "unique",
						paths: [["EqSubFunction"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInFuncForGE",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInFuncForGE",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tAbstractEqFuncSubFunc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Terminal: {
		tag: "Terminal",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ConductingEquipment", "TransformerWinding"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"bayName",
				"cNodeName",
				"cNodeUuid",
				"connectivityNode",
				"desc",
				"lineName",
				"name",
				"processName",
				"substationName",
				"voltageLevelName"
			],
			details: {
				bayName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cNodeName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cNodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				connectivityNode: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+/.+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lineName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				processName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				substationName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				voltageLevelName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SubEquipment: {
		tag: "SubEquipment",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"ConductingEquipment",
			"PowerTransformer",
			"TapChanger",
			"TransformerWinding"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"phase",
				"templateUuid",
				"uuid",
				"virtual"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				phase: {
					required: !1,
					default: "none",
					namespace: null,
					validation: {
						enumeration: [
							"A",
							"B",
							"C",
							"N",
							"all",
							"none",
							"AB",
							"BC",
							"CA"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				virtual: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"EqFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				EqFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFuncForSubEq",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFuncForSubEq",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInSubEquipment",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInACESubEquipment",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tPowerSystemResource",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	History: {
		tag: "History",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Header"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: ["Hitem"],
			details: { Hitem: {
				required: !0,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 1,
					maxOccurrence: null
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SourceFiles: {
		tag: "SourceFiles",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Header", "Hitem"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"SclFileReference"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SclFileReference: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tBaseElement",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	TransformerWinding: {
		tag: "TransformerWinding",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["PowerTransformer"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid",
				"virtual"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: "PTW",
					namespace: null,
					validation: {
						enumeration: ["PTW"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				virtual: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"Terminal",
				"SubEquipment",
				"TapChanger",
				"NeutralPoint",
				"EqFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Terminal: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 2
					},
					constraints: null
				},
				SubEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInACESubEquipment",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				TapChanger: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLNodeInTapChanger",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInLTC",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				NeutralPoint: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				EqFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFuncForPTW",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFuncForPTW",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInTransformerWinding",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInPTW",
			kind: "unique",
			paths: [[
				"SubEquipment|.",
				"TapChanger|.",
				"EqFunction"
			]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tAbstractConductingEquipment",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Bay: {
		tag: "Bay",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["VoltageLevel"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"PowerTransformer",
				"GeneralEquipment",
				"ConductingEquipment",
				"ConnectivityNode",
				"Function"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				PowerTransformer: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInPowerTransformer",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInPTR",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGE",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				ConductingEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInConductingEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInCE",
						kind: "unique",
						paths: [["SubEquipment|.", "EqFunction"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				ConnectivityNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInConnectivityNode",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}]
				},
				Function: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFunctionB",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInBayFunc",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueChildNameInBay",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}, {
			name: "uniqueLNodeInBay",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tEquipmentContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SubFunction: {
		tag: "SubFunction",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Function", "SubFunction"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"GeneralEquipment",
				"ConductingEquipment",
				"SubFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipmentOfSubFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGESubFunc",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				ConductingEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInConductingEquipmentOfSubFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueSubEquipmentSubFunc",
						kind: "unique",
						paths: [["SubEquipment"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				SubFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubSubFunction",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueSubSubFunc",
						kind: "unique",
						paths: [["SubFunction"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInSubFunction",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInSubFunc",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tPowerSystemResource",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FCDA: {
		tag: "FCDA",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DataSet"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"daName",
				"doName",
				"fc",
				"ix",
				"ldInst",
				"lnClass",
				"lnInst",
				"lnUuid",
				"prefix"
			],
			details: {
				daName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				doName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fc: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"ST",
							"MX",
							"CO",
							"SP",
							"SG",
							"SE",
							"SV",
							"CF",
							"DC",
							"EX",
							"SR",
							"BL",
							"OR"
						],
						pattern: ["\\i\\c*", "[A-Z]+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 2,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	TrgOps: {
		tag: "TrgOps",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LogControl", "ReportControl"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"dchg",
				"dupd",
				"gi",
				"period",
				"qchg"
			],
			details: {
				dchg: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dupd: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				gi: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				period: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				qchg: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	OptFields: {
		tag: "OptFields",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ReportControl"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"bufOvfl",
				"configRef",
				"dataRef",
				"dataSet",
				"entryID",
				"reasonCode",
				"seqNum",
				"timeStamp"
			],
			details: {
				bufOvfl: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				configRef: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dataRef: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dataSet: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				entryID: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				reasonCode: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				seqNum: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				timeStamp: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	RptEnabled: {
		tag: "RptEnabled",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ReportControl"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc", "max"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				max: {
					required: !1,
					default: "1",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"ClientLN"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				ClientLN: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SDI: {
		tag: "SDI",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DOI", "SDI"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"ix",
				"name",
				"sAddr"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"SDI",
				"DAI",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SDI: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				DAI: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelinSDI",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["SDI", "DAI"]
			}]
		},
		constraints: [{
			name: "uniqueSDI_DAIinSDI",
			kind: "unique",
			paths: [["DAI|.", "SDI"]],
			deep: !1,
			attributes: ["name", "ix"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DAI: {
		tag: "DAI",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DOI", "SDI"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"ix",
				"name",
				"sAddr",
				"valImport",
				"valKind"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valImport: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valKind: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"Spec",
							"Conf",
							"RO",
							"Set"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Val",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Val: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelinDAI",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ExtRef: {
		tag: "ExtRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Inputs"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"daName",
				"desc",
				"doName",
				"iedName",
				"intAddr",
				"ldInst",
				"lnClass",
				"lnInst",
				"lnUuid",
				"pDA",
				"pDO",
				"pLN",
				"pServT",
				"prefix",
				"serviceType",
				"srcCBName",
				"srcCBUuid",
				"srcLDInst",
				"srcLNClass",
				"srcLNInst",
				"srcPrefix",
				"templateUuid",
				"uuid"
			],
			details: {
				daName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				doName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"@",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pDA: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pDO: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pLN: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pServT: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"Poll",
							"Report",
							"GOOSE",
							"SMV"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				serviceType: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"Poll",
							"Report",
							"GOOSE",
							"SMV"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				srcCBName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				srcCBUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				srcLDInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				srcLNClass: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				srcLNInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				srcPrefix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tDORef",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ExtCtrl: {
		tag: "ExtCtrl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Outputs"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"apRef",
				"checkInterlock",
				"checkSynchrocheck",
				"desc",
				"doName",
				"iedName",
				"intAddr",
				"ldInst",
				"lnClass",
				"lnInst",
				"lnUuid",
				"pDO",
				"pLN",
				"prefix",
				"templateUuid",
				"uuid"
			],
			details: {
				apRef: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				checkInterlock: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: [
							"true",
							"false",
							"conserve"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				checkSynchrocheck: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: [
							"true",
							"false",
							"conserve"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				doName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"@",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pDO: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pLN: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tDORef",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	IEDName: {
		tag: "IEDName",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["GSEControl", "SampledValueControl"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"apRef",
				"apUuid",
				"ldInst",
				"ldUuid",
				"lnClass",
				"lnInst",
				"lnUuid",
				"prefix"
			],
			details: {
				apRef: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				apUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tIEDName",
			validation: {
				enumeration: null,
				pattern: [
					"[A-Za-z][0-9A-Za-z_]{0,2}",
					"[A-Za-z][0-9A-Za-z_]{4,63}",
					"[A-MO-Za-z][0-9A-Za-z_]{3}",
					"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
					"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
					"Non[0-9A-Za-df-z_]",
					"[A-Za-z][0-9A-Za-z_]*",
					"\\i\\c*"
				],
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: 64,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Protocol: {
		tag: "Protocol",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["GSEControl", "SampledValueControl"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["mustUnderstand"],
			details: { mustUnderstand: {
				required: !0,
				default: "true",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "normalizedString",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SmvOpts: {
		tag: "SmvOpts",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SampledValueControl"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"dataSet",
				"refreshTime",
				"sampleMode",
				"sampleRate",
				"sampleSynchronized",
				"security",
				"synchSourceId",
				"timestamp"
			],
			details: {
				dataSet: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				refreshTime: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sampleMode: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sampleRate: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sampleSynchronized: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				security: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				synchSourceId: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				timestamp: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DynAssociation: {
		tag: "DynAssociation",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["max"],
			details: { max: {
				required: !1,
				default: null,
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: 0,
					maxInclusive: 4294967295,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SettingGroups: {
		tag: "SettingGroups",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: ["SGEdit", "ConfSG"],
			details: {
				SGEdit: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				ConfSG: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GetDirectory: {
		tag: "GetDirectory",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GetDataObjectDefinition: {
		tag: "GetDataObjectDefinition",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DataObjectDirectory: {
		tag: "DataObjectDirectory",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GetDataSetValue: {
		tag: "GetDataSetValue",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SetDataSetValue: {
		tag: "SetDataSetValue",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DataSetDirectory: {
		tag: "DataSetDirectory",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConfDataSet: {
		tag: "ConfDataSet",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"max",
				"maxAttributes",
				"modify"
			],
			details: {
				max: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxAttributes: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				modify: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceWithMaxAndMaxAttributes",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DynDataSet: {
		tag: "DynDataSet",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["max", "maxAttributes"],
			details: {
				max: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxAttributes: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceWithMax",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ReadWrite: {
		tag: "ReadWrite",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	TimerActivatedControl: {
		tag: "TimerActivatedControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConfReportControl: {
		tag: "ConfReportControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"bufConf",
				"bufMode",
				"max",
				"maxBuf"
			],
			details: {
				bufConf: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				bufMode: {
					required: !1,
					default: "both",
					namespace: null,
					validation: {
						enumeration: [
							"unbuffered",
							"buffered",
							"both"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				max: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxBuf: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceWithMax",
			validation: {
				enumeration: [
					"unbuffered",
					"buffered",
					"both"
				],
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GetCBValues: {
		tag: "GetCBValues",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConfLogControl: {
		tag: "ConfLogControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["max"],
			details: { max: {
				required: !0,
				default: null,
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: 0,
					maxInclusive: 4294967295,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ReportSettings: {
		tag: "ReportSettings",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"bufTime",
				"cbName",
				"datSet",
				"intgPd",
				"optFields",
				"owner",
				"resvTms",
				"rptID",
				"trgOps"
			],
			details: {
				bufTime: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cbName: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: ["Conf", "Fix"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intgPd: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				optFields: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				owner: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				resvTms: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				rptID: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				trgOps: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceSettings",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LogSettings: {
		tag: "LogSettings",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"cbName",
				"datSet",
				"intgPd",
				"logEna",
				"trgOps"
			],
			details: {
				cbName: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: ["Conf", "Fix"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				intgPd: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				logEna: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				trgOps: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceSettings",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GSESettings: {
		tag: "GSESettings",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"appID",
				"cbName",
				"datSet",
				"dataLabel",
				"kdaParticipant"
			],
			details: {
				appID: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cbName: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: ["Conf", "Fix"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dataLabel: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				kdaParticipant: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: ["McSecurity"],
			details: { McSecurity: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceSettings",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SMVSettings: {
		tag: "SMVSettings",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"cbName",
				"datSet",
				"kdaParticipant",
				"nofASDU",
				"optFields",
				"pdcTimeStamp",
				"samplesPerSec",
				"smpRate",
				"svID",
				"synchSrcId"
			],
			details: {
				cbName: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: ["Conf", "Fix"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				datSet: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				kdaParticipant: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				nofASDU: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: ["Conf", "Fix"],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				optFields: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				pdcTimeStamp: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				samplesPerSec: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				smpRate: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				svID: {
					required: !1,
					default: "Fix",
					namespace: null,
					validation: {
						enumeration: [
							"Dyn",
							"Conf",
							"Fix"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				synchSrcId: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [
				"SmpRate",
				"SamplesPerSec",
				"SecPerSamples",
				"McSecurity"
			],
			details: {
				SmpRate: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SamplesPerSec: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				SecPerSamples: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				McSecurity: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 1,
				maxOccurrence: null,
				options: [
					"SmpRate",
					"SamplesPerSec",
					"SecPerSamples"
				]
			}]
		},
		constraints: [],
		value: {
			type: "tServiceSettings",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GSEDir: {
		tag: "GSEDir",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GOOSE: {
		tag: "GOOSE",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"fixedOffs",
				"goose",
				"max",
				"rGOOSE"
			],
			details: {
				fixedOffs: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				goose: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				max: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				rGOOSE: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceWithMax",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GSSE: {
		tag: "GSSE",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["max"],
			details: { max: {
				required: !0,
				default: null,
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: 0,
					maxInclusive: 4294967295,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SMVsc: {
		tag: "SMVsc",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"delivery",
				"deliveryConf",
				"max",
				"rSV",
				"sv"
			],
			details: {
				delivery: {
					required: !1,
					default: "multicast",
					namespace: null,
					validation: {
						enumeration: [
							"unicast",
							"multicast",
							"both"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				deliveryConf: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				max: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				rSV: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sv: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceWithMax",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FileHandling: {
		tag: "FileHandling",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"ftp",
				"ftps",
				"mms"
			],
			details: {
				ftp: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ftps: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				mms: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceYesNo",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConfLNs: {
		tag: "ConfLNs",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["fixLnInst", "fixPrefix"],
			details: {
				fixLnInst: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fixPrefix: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ClientServices: {
		tag: "ClientServices",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"acceptServerInitiatedAssociation",
				"bufReport",
				"goose",
				"gsse",
				"maxAttributes",
				"maxGOOSE",
				"maxReports",
				"maxSMV",
				"noIctBinding",
				"rGOOSE",
				"rSV",
				"readLog",
				"supportsLdName",
				"sv",
				"unbufReport"
			],
			details: {
				acceptServerInitiatedAssociation: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				bufReport: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				goose: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				gsse: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxAttributes: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxGOOSE: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxReports: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxSMV: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				noIctBinding: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				rGOOSE: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				rSV: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				readLog: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				supportsLdName: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sv: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				unbufReport: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [
				"TimeSyncProt",
				"GOOSEMcSecurity",
				"SVMcSecurity",
				"Security"
			],
			details: {
				TimeSyncProt: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GOOSEMcSecurity: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				SVMcSecurity: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Security: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConfLdName: {
		tag: "ConfLdName",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SupSubscription: {
		tag: "SupSubscription",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["maxGo", "maxSv"],
			details: {
				maxGo: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				maxSv: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConfSigRef: {
		tag: "ConfSigRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["max"],
			details: { max: {
				required: !0,
				default: null,
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: 0,
					maxInclusive: 4294967295,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ValueHandling: {
		tag: "ValueHandling",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["setToRO"],
			details: { setToRO: {
				required: !1,
				default: "false",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	RedProt: {
		tag: "RedProt",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"hsr",
				"prp",
				"rstp"
			],
			details: {
				hsr: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prp: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				rstp: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	TimeSyncProt: {
		tag: "TimeSyncProt",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ClientServices", "Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"c37_238",
				"iec61850_9_3",
				"other",
				"sntp"
			],
			details: {
				c37_238: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iec61850_9_3: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				other: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sntp: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceYesNo",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	CommProt: {
		tag: "CommProt",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["ipv6"],
			details: { ipv6: {
				required: !1,
				default: "false",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceYesNo",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SCSM: {
		tag: "SCSM",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"iec61850_8_1",
				"iec61850_8_2",
				"serverAssociationInitiation"
			],
			details: {
				iec61850_8_1: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iec61850_8_2: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				serverAssociationInitiation: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceYesNo",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Security: {
		tag: "Security",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ClientServices", "Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["ACSEAuthentication", "E2ESecurity"],
			details: {
				ACSEAuthentication: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				E2ESecurity: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	MultiAPPerSubNet: {
		tag: "MultiAPPerSubNet",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Services"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Server: {
		tag: "Server",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["AccessPoint"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc", "timeout"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				timeout: {
					required: !1,
					default: "30",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Authentication",
				"LDevice",
				"Association"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Authentication: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				LDevice: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNInLDevice",
						kind: "unique",
						paths: [["LN"]],
						deep: !1,
						attributes: [
							"inst",
							"lnClass",
							"prefix"
						],
						refer: null,
						text: !1
					}]
				},
				Association: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueAssociationInServer",
			kind: "unique",
			paths: [["Association"]],
			deep: !1,
			attributes: ["associationID"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ServerAt: {
		tag: "ServerAt",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["AccessPoint"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"apName",
				"apUuid",
				"desc"
			],
			details: {
				apName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				apUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GOOSESecurity: {
		tag: "GOOSESecurity",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["AccessPoint"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"serialNumber",
				"templateUuid",
				"uuid",
				"xferNumber"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				serialNumber: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				xferNumber: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"Subject",
				"IssuerName"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				Subject: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				IssuerName: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SMVSecurity: {
		tag: "SMVSecurity",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["AccessPoint"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"serialNumber",
				"templateUuid",
				"uuid",
				"xferNumber"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				serialNumber: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				xferNumber: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"Subject",
				"IssuerName"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				Subject: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				IssuerName: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	MinRequestedSCDFile: {
		tag: "MinRequestedSCDFile",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["MinRequestedSCDFiles"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"fileName",
				"fileType",
				"fileUuid",
				"revision",
				"version",
				"when"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"SCD",
							"ICD",
							"IID",
							"CID",
							"SSD",
							"SED"
						],
						pattern: ["\\i\\c*", "[A-Z]{3}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fileUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				revision: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				version: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				when: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tSclFileUUIDReference",
			validation: {
				enumeration: ["SCD"],
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BitRate: {
		tag: "BitRate",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SubNetwork"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["multiplier", "unit"],
			details: {
				multiplier: {
					required: !1,
					default: "M",
					namespace: null,
					validation: {
						enumeration: [
							"",
							"m",
							"k",
							"M",
							"mu",
							"y",
							"z",
							"a",
							"f",
							"p",
							"n",
							"c",
							"d",
							"da",
							"h",
							"G",
							"T",
							"P",
							"E",
							"Z",
							"Y"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				unit: {
					required: !1,
					default: "b/s",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "decimal",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConnectedAP: {
		tag: "ConnectedAP",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SubNetwork"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"apName",
				"apUuid",
				"desc",
				"iedName",
				"redProt"
			],
			details: {
				apName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				apUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				redProt: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"none",
							"hsr",
							"prp",
							"rstp"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Address",
				"GSE",
				"SMV",
				"PhysConn"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Address: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				GSE: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SMV: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				PhysConn: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniquePTypeInPhysConn",
						kind: "unique",
						paths: [["P"]],
						deep: !1,
						attributes: ["type"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueGSEinConnectedAP",
			kind: "unique",
			paths: [["GSE"]],
			deep: !1,
			attributes: ["cbName", "ldInst"],
			refer: null,
			text: !1
		}, {
			name: "uniqueSMVinConnectedAP",
			kind: "unique",
			paths: [["SMV"]],
			deep: !1,
			attributes: ["cbName", "ldInst"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DO: {
		tag: "DO",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LNodeType"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"accessControl",
				"desc",
				"name",
				"transient",
				"type"
			],
			details: {
				accessControl: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 12,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				transient: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInDO",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SDO: {
		tag: "SDO",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DOType"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"count",
				"desc",
				"name",
				"type"
			],
			details: {
				count: {
					required: !1,
					default: "0",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-z][0-9A-Za-z]*", "\\i\\c*"],
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-z][0-9A-Za-z]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInSDO",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	DA: {
		tag: "DA",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DOType"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"bType",
				"count",
				"dchg",
				"desc",
				"dupd",
				"fc",
				"name",
				"qchg",
				"sAddr",
				"type",
				"valImport",
				"valKind"
			],
			details: {
				bType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "BOOLEAN.INT8.INT16.INT24.INT32.INT64.INT128.INT8U.INT16U.INT24U.INT32U.FLOAT32.FLOAT64.Enum.Dbpos.Tcmd.Quality.Timestamp.VisString32.VisString64.VisString65.VisString129.VisString255.Octet64.Unicode255.Struct.EntryTime.Check.ObjRef.Currency.PhyComAddr.TrgOps.OptFlds.SvOptFlds.LogOptFlds.EntryID.Octet6.Octet16".split("."),
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				count: {
					required: !1,
					default: "0",
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dchg: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				dupd: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				fc: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"ST",
							"MX",
							"CO",
							"SP",
							"SG",
							"SE",
							"SV",
							"CF",
							"DC",
							"EX",
							"SR",
							"BL",
							"OR"
						],
						pattern: ["\\i\\c*", "[A-Z]+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: 2,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				qchg: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valImport: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valKind: {
					required: !1,
					default: "Set",
					namespace: null,
					validation: {
						enumeration: [
							"Spec",
							"Conf",
							"RO",
							"Set"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Val",
				"Labels",
				"ProtNs"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Val: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInDA",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				ProtNs: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: ["[ -~]+:20\\d\\d[A-Z]?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueProtNsInDA",
			kind: "unique",
			paths: [["ProtNs"]],
			deep: !1,
			attributes: ["type"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tAbstractDataAttribute",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BDA: {
		tag: "BDA",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DAType"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"bType",
				"count",
				"desc",
				"name",
				"sAddr",
				"type",
				"valImport",
				"valKind"
			],
			details: {
				bType: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "BOOLEAN.INT8.INT16.INT24.INT32.INT64.INT128.INT8U.INT16U.INT24U.INT32U.FLOAT32.FLOAT64.Enum.Dbpos.Tcmd.Quality.Timestamp.VisString32.VisString64.VisString65.VisString129.VisString255.Octet64.Unicode255.Struct.EntryTime.Check.ObjRef.Currency.PhyComAddr.TrgOps.OptFlds.SvOptFlds.LogOptFlds.EntryID.Octet6.Octet16".split("."),
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				count: {
					required: !1,
					default: "0",
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: 0,
						maxInclusive: 4294967295,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: [
							"T",
							"Test",
							"Check",
							"SIUnit",
							"Oper",
							"SBO",
							"SBOw",
							"Cancel",
							"Addr",
							"PRIORITY",
							"VID",
							"APPID",
							"TransportInUse",
							"IPClassOfTraffic",
							"IPv6FlowLabel",
							"IPAddressLength",
							"IPAddress"
						],
						pattern: ["\\i\\c*", "[a-z][0-9A-Za-z]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 60,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sAddr: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 255,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valImport: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				valKind: {
					required: !1,
					default: "Set",
					namespace: null,
					validation: {
						enumeration: [
							"Spec",
							"Conf",
							"RO",
							"Set"
						],
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Val",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Val: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInDA",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tAbstractDataAttribute",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ProtNs: {
		tag: "ProtNs",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["DA", "DAType"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["type"],
			details: { type: {
				required: !1,
				default: "8-MMS",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: 1,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tNamespaceName",
			validation: {
				enumeration: null,
				pattern: ["[ -~]+:20\\d\\d[A-Z]?"],
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	EnumVal: {
		tag: "EnumVal",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["EnumType"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["desc", "ord"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ord: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: -2147483648,
						maxInclusive: 2147483647,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tEnumStringValue",
			validation: {
				enumeration: null,
				pattern: ["[\\p{IsBasicLatin}\\p{IsLatin-1Supplement}]*"],
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: 127,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNodeInputRef: {
		tag: "LNodeInputRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to SourceRefs belonging to current role\n\nReference to SourceRefs belonging to current role",
		parents: ["SignalRole"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"sourceRef",
				"sourceRefUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceRef: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				sourceRefUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNodeOutputRef: {
		tag: "LNodeOutputRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to ControlRefs belonging to current role\n\nReference to ControlRefs belonging to current role",
		parents: ["SignalRole"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"controlRef",
				"controlRefUuid",
				"desc"
			],
			details: {
				controlRef: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				controlRefUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LNodeDataRef: {
		tag: "LNodeDataRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to Data belonging to current role\n\nReference to Data belonging to current role",
		parents: ["SignalRole"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"daName",
				"data",
				"desc",
				"doName",
				"lnodeUuid"
			],
			details: {
				daName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?(\\.[a-zA-Z][a-zA-Z0-9]*(\\([0-9]+\\))?)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				data: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				doName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Z][0-9A-Za-z]{0,11}(\\.[a-z][0-9A-Za-z]*(\\([0-9]+\\))?)?"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	BehaviorDescriptionRef: {
		tag: "BehaviorDescriptionRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a behavior description attached to current role\n\nReference to a behavior description attached to current role",
		parents: ["FunctionRoleContent"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"behaviorDescription",
				"behaviorDescriptionUuid",
				"desc"
			],
			details: {
				behaviorDescription: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				behaviorDescriptionUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"FunctionalVariantRef",
				"InputVarRef",
				"OutputVarRef"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				InputVarRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				OutputVarRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}, {
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["InputVarRef", "OutputVarRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ProcessResourceRef: {
		tag: "ProcessResourceRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a process resource attached to current role\n\nReference to a process resource attached to current role",
		parents: ["FunctionRoleContent"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"processResource",
				"processResourceUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				processResource: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				processResourceUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	FunctionCategoryRef: {
		tag: "FunctionCategoryRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a function category attached to current role\n\nReference to a function category attached to current role",
		parents: ["FunctionRoleContent"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"functionCategory",
				"functionCategoryUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				functionCategory: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				functionCategoryUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	PowerSystemRelationRef: {
		tag: "PowerSystemRelationRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to a power system relation attached to current role\n\nReference to a power system relation attached to current role",
		parents: ["FunctionRoleContent"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"powerSystemRelation",
				"powerSystemRelationUuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				powerSystemRelation: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				powerSystemRelationUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	EqSubFunction: {
		tag: "EqSubFunction",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["EqFunction", "EqSubFunction"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"GeneralEquipment",
				"EqSubFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				GeneralEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInGeneralEquipmentOfFuncForEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInGEFuncForEquipment",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				EqSubFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubFuncForEquipment",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueSubFuncForEquipment",
						kind: "unique",
						paths: [["EqSubFunction"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInSubFuncForEquipment",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueSubFuncForEquipment",
			kind: "unique",
			paths: [["EqSubFunction"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tAbstractEqFuncSubFunc",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Hitem: {
		tag: "Hitem",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["History"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"revision",
				"version",
				"what",
				"when",
				"who",
				"why"
			],
			details: {
				revision: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				version: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				what: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				when: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				who: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				why: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["SourceFiles"],
			details: { SourceFiles: {
				required: !1,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: null,
					assertions: null,
					minOccurrence: 0,
					maxOccurrence: 1
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: "tAnyContentFromOtherNamespace",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	TapChanger: {
		tag: "TapChanger",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["TransformerWinding"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"name",
				"templateUuid",
				"type",
				"uuid",
				"virtual"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: "LTC",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				virtual: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Labels",
				"LNode",
				"SubEquipment",
				"EqFunction"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabel",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				},
				LNode: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				SubEquipment: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInSubEquipmentLTC",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInLTCSubEquipment",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				},
				EqFunction: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: [{
						name: "uniqueLNodeInFuncForLTC",
						kind: "unique",
						paths: [["LNode"]],
						deep: !1,
						attributes: [
							"lnInst",
							"lnClass",
							"iedName",
							"ldInst",
							"prefix"
						],
						refer: null,
						text: !1
					}, {
						name: "uniqueChildNameInFuncForLTC",
						kind: "unique",
						paths: [["*"]],
						deep: !1,
						attributes: ["name"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNodeInTapChanger",
			kind: "unique",
			paths: [["LNode"]],
			deep: !1,
			attributes: [
				"lnInst",
				"lnClass",
				"iedName",
				"ldInst",
				"prefix"
			],
			refer: null,
			text: !1
		}, {
			name: "uniqueChildNameInLTC",
			kind: "unique",
			paths: [["*"]],
			deep: !1,
			attributes: ["name"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tPowerSystemResource",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	NeutralPoint: {
		tag: "NeutralPoint",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["TransformerWinding"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"bayName",
				"cNodeName",
				"cNodeUuid",
				"connectivityNode",
				"desc",
				"lineName",
				"name",
				"processName",
				"substationName",
				"voltageLevelName"
			],
			details: {
				bayName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cNodeName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cNodeUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				connectivityNode: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+/.+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lineName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				name: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				processName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				substationName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				voltageLevelName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "Private"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ClientLN: {
		tag: "ClientLN",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["RptEnabled"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"apRef",
				"desc",
				"iedName",
				"ldInst",
				"lnClass",
				"lnInst",
				"lnUuid",
				"prefix"
			],
			details: {
				apRef: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 0,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SGEdit: {
		tag: "SGEdit",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SettingGroups"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["resvTms"],
			details: { resvTms: {
				required: !1,
				default: "false",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceYesNo",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	ConfSG: {
		tag: "ConfSG",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SettingGroups"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["resvTms"],
			details: { resvTms: {
				required: !1,
				default: "false",
				namespace: null,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "collapse",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tServiceYesNo",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	McSecurity: {
		tag: "McSecurity",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["GSESettings", "SMVSettings"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["encryption", "signature"],
			details: {
				encryption: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				signature: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SmpRate: {
		tag: "SmpRate",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SMVSettings"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: 0,
				maxInclusive: 4294967295,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SamplesPerSec: {
		tag: "SamplesPerSec",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SMVSettings"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: 0,
				maxInclusive: 4294967295,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SecPerSamples: {
		tag: "SecPerSamples",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["SMVSettings"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: 0,
				maxInclusive: 4294967295,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GOOSEMcSecurity: {
		tag: "GOOSEMcSecurity",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ClientServices"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["encryption", "signature"],
			details: {
				encryption: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				signature: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SVMcSecurity: {
		tag: "SVMcSecurity",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ClientServices"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["encryption", "signature"],
			details: {
				encryption: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				signature: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Authentication: {
		tag: "Authentication",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Server"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"certificate",
				"none",
				"password",
				"strong",
				"weak"
			],
			details: {
				certificate: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				none: {
					required: !1,
					default: "true",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				password: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				strong: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				weak: {
					required: !1,
					default: "false",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	LDevice: {
		tag: "LDevice",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Server"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"desc",
				"inst",
				"ldName",
				"templateUuid",
				"uuid"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				inst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldName: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				templateUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				uuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"LN0",
				"LN",
				"AccessControl",
				"Labels"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				LN0: {
					required: !0,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 1,
						maxOccurrence: 1
					},
					constraints: null
				},
				LN: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				AccessControl: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Labels: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: [{
						name: "uniqueLabelInLD",
						kind: "unique",
						paths: [["Label"]],
						deep: !1,
						attributes: ["id", "lang"],
						refer: null,
						text: !1
					}]
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniqueLNInLDevice",
			kind: "unique",
			paths: [["LN"]],
			deep: !1,
			attributes: [
				"inst",
				"lnClass",
				"prefix"
			],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Association: {
		tag: "Association",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Server"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"apRef",
				"associationID",
				"desc",
				"iedName",
				"initiator",
				"kind",
				"ldInst",
				"lnClass",
				"lnInst",
				"lnUuid",
				"prefix"
			],
			details: {
				apRef: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				associationID: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9A-Za-z]+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				iedName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [
							"[A-Za-z][0-9A-Za-z_]{0,2}",
							"[A-Za-z][0-9A-Za-z_]{4,63}",
							"[A-MO-Za-z][0-9A-Za-z_]{3}",
							"N[0-9A-Za-np-z_][0-9A-Za-z_]{2}",
							"No[0-9A-Za-mo-z_][0-9A-Za-z_]",
							"Non[0-9A-Za-df-z_]",
							"[A-Za-z][0-9A-Za-z_]*",
							"\\i\\c*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				initiator: {
					required: !1,
					default: "client",
					namespace: null,
					validation: {
						enumeration: ["client", "server"],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				kind: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: ["pre-established", "predefined"],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnClass: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: /* @__PURE__ */ "LLN0.LPHD.LCCH.LGOS.LSVS.LTIM.LTMS.LTRK.ANCR.ARCO.ARIS.ATCC.AVCO.CALH.CCGR.CILO.CPOW.CSWI.CSYN.FCNT.FCSD.FFIL.FLIM.FPID.FRMP.FSPT.FXOT.FXUT.GAPC.GGIO.GLOG.GSAL.IARC.IHMI.ISAF.ITCI.ITMI.ITPC.KFAN.KFIL.KPMP.KTNK.KVLV.MDIF.MENV.MFLK.MHAI.MHAN.MHYD.MMDC.MMET.MMTN.MMTR.MMXN.MMXU.MSQI.MSTA.PDIF.PDIR.PDIS.PDOP.PDUP.PFRC.PHAR.PHIZ.PIOC.PMRI.PMSS.POPF.PPAM.PRTR.PSCH.PSDE.PTEF.PTHF.PTOC.PTOF.PTOV.PTRC.PTTR.PTUC.PTUF.PTUV.PUPF.PVOC.PVPH.PZSU.QFVR.QITR.QIUB.QVTR.QVUB.QVVR.RADR.RBDR.RBRF.RDIR.RDRE.RDRS.RFLO.RMXU.RPSB.RREC.RSYN.SARC.SCBR.SIMG.SIML.SLTC.SOPM.SPDC.SPTR.SSWI.STMP.SVBR.TANG.TAXD.TCTR.TDST.TFLW.TFRQ.TGSN.THUM.TLVL.TMGF.TMVM.TPOS.TPRS.TRTN.TSND.TTMP.TTNS.TVBR.TVTR.TWPH.XCBR.XSWI.YEFN.YLTC.YPSH.YPTR.ZAXN.ZBAT.ZBSH.ZCAB.ZCAP.ZCON.ZGEN.ZGIL.ZLIN.ZMOT.ZREA.ZRES.ZRRC.ZSAR.ZSCR.ZSMC.ZTCF.ZTCR".split("."),
						pattern: [
							"[A-Z]+",
							"L[A-Z]*",
							"LLN0",
							"\\i\\c*",
							"A[A-Z]*",
							"C[A-Z]*",
							"F[A-Z]*",
							"G[A-Z]*",
							"I[A-Z]*",
							"K[A-Z]*",
							"M[A-Z]*",
							"P[A-Z]*",
							"Q[A-Z]*",
							"R[A-Z]*",
							"S[A-Z]*",
							"T[A-Z]*",
							"X[A-Z]*",
							"Y[A-Z]*",
							"Z[A-Z]*"
						],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnInst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9]{1,12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 0,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				lnUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				prefix: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 11,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Subject: {
		tag: "Subject",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["GOOSESecurity", "SMVSecurity"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["commonName", "idHierarchy"],
			details: {
				commonName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["none", "CN=.+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 4,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				idHierarchy: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	IssuerName: {
		tag: "IssuerName",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["GOOSESecurity", "SMVSecurity"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["commonName", "idHierarchy"],
			details: {
				commonName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["none", "CN=.+"],
						minInclusive: null,
						maxInclusive: null,
						minLength: 4,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				idHierarchy: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	Address: {
		tag: "Address",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: [
			"ConnectedAP",
			"GSE",
			"SMV"
		],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !1,
			sequence: ["P"],
			details: { P: {
				required: !0,
				validation: {
					enumeration: null,
					pattern: null,
					minInclusive: null,
					maxInclusive: null,
					minLength: 1,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: 1,
					maxOccurrence: null
				},
				constraints: null
			} },
			choices: []
		},
		constraints: [],
		value: {
			type: null,
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	GSE: {
		tag: "GSE",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ConnectedAP"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"cbName",
				"cbUuid",
				"desc",
				"ldInst"
			],
			details: {
				cbName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cbUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Address",
				"MinTime",
				"MaxTime"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Address: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				MinTime: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				MaxTime: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlBlock",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	SMV: {
		tag: "SMV",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ConnectedAP"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [
				"cbName",
				"cbUuid",
				"desc",
				"ldInst"
			],
			details: {
				cbName: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z][0-9A-Za-z_]*", "\\i\\c*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 32,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				cbUuid: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "preserve",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				ldInst: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: ["[A-Za-z0-9][0-9A-Za-z_]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: 64,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"Address"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				Address: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [],
		value: {
			type: "tControlBlock",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	PhysConn: {
		tag: "PhysConn",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["ConnectedAP"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: ["desc", "type"],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				type: {
					required: !0,
					default: null,
					namespace: null,
					validation: {
						enumeration: ["Connection", "RedConn"],
						pattern: ["[A-Z][0-9A-Za-z\\-]*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: [
				"Text",
				"Private",
				"P"
			],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				Private: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				},
				P: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: 1,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: []
		},
		constraints: [{
			name: "uniquePTypeInPhysConn",
			kind: "unique",
			paths: [["P"]],
			deep: !1,
			attributes: ["type"],
			refer: null,
			text: !1
		}],
		value: {
			type: "tUnNaming",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	InputVarRef: {
		tag: "InputVarRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to InputVar belonging to current behavior description\n\nReference to InputVar belonging to current behavior description",
		parents: ["BehaviorDescriptionRef"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"value",
				"variable"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				value: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				variable: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	OutputVarRef: {
		tag: "OutputVarRef",
		namespace: {
			uri: "http://www.iec.ch/61850/2019/SCL/6-100",
			prefix: "eIEC61850-6-100"
		},
		documentation: "Reference to OutputVar belonging to current behavior description\n\nReference to OutputVar belonging to current behavior description",
		parents: ["BehaviorDescriptionRef"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: [
				"desc",
				"value",
				"variable"
			],
			details: {
				desc: {
					required: !1,
					default: "",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				value: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				variable: {
					required: !1,
					default: null,
					namespace: null,
					validation: {
						enumeration: null,
						pattern: [".+(/.+)*"],
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !0,
			sequence: ["Text", "FunctionalVariantRef"],
			details: {
				Text: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: 1
					},
					constraints: null
				},
				FunctionalVariantRef: {
					required: !1,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: null,
						assertions: null,
						minOccurrence: 0,
						maxOccurrence: null
					},
					constraints: null
				}
			},
			choices: [{
				minOccurrence: 0,
				maxOccurrence: null,
				options: ["FunctionalVariantRef"]
			}]
		},
		constraints: [],
		value: {
			type: "tFunctionalVariantRefContainer",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	AccessControl: {
		tag: "AccessControl",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["LDevice"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !0,
			sequence: [],
			details: {}
		},
		subElements: {
			any: !0,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tAnyContentFromOtherNamespace",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: null,
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	P: {
		tag: "P",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["Address", "PhysConn"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["type"],
			details: { type: {
				required: !0,
				default: null,
				namespace: null,
				validation: {
					enumeration: /* @__PURE__ */ "IP.IP-SUBNET.IP-GATEWAY.OSI-NSAP.OSI-TSEL.OSI-SSEL.OSI-PSEL.OSI-AP-Title.OSI-AP-Invoke.OSI-AE-Qualifier.OSI-AE-Invoke.MAC-Address.APPID.VLAN-PRIORITY.VLAN-ID.SNTP-Port.MMS-Port.DNSName.IPv6FlowLabel.IPv6ClassOfTraffic.C37-118-IP-Port.IP-UDP-PORT.IP-TCP-PORT.IPv6.IPv6-SUBNET.IPv6-GATEWAY.IPv6-IGMPv3Src.IP-IGMPv3Src.IP-ClassOfTraffic".split("."),
					pattern: ["\\i\\c*", "[A-Z][0-9A-Za-z\\-]*"],
					minInclusive: null,
					maxInclusive: null,
					minLength: null,
					maxLength: null,
					fractionDigits: null,
					totalDigits: null,
					whitespace: "replace",
					assertions: null,
					minOccurrence: null,
					maxOccurrence: null
				}
			} }
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "tPAddr",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: 1,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "replace",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	MinTime: {
		tag: "MinTime",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["GSE"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["multiplier", "unit"],
			details: {
				multiplier: {
					required: !1,
					default: "m",
					namespace: null,
					validation: {
						enumeration: [
							"",
							"m",
							"k",
							"M",
							"mu",
							"y",
							"z",
							"a",
							"f",
							"p",
							"n",
							"c",
							"d",
							"da",
							"h",
							"G",
							"T",
							"P",
							"E",
							"Z",
							"Y"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				unit: {
					required: !1,
					default: "s",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "decimal",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	},
	MaxTime: {
		tag: "MaxTime",
		namespace: {
			uri: "http://www.iec.ch/61850/2003/SCL",
			prefix: "scl"
		},
		documentation: null,
		parents: ["GSE"],
		validation: {
			enumeration: null,
			pattern: null,
			minInclusive: null,
			maxInclusive: null,
			minLength: null,
			maxLength: null,
			fractionDigits: null,
			totalDigits: null,
			whitespace: null,
			assertions: null,
			minOccurrence: null,
			maxOccurrence: null
		},
		attributes: {
			any: !1,
			sequence: ["multiplier", "unit"],
			details: {
				multiplier: {
					required: !1,
					default: "m",
					namespace: null,
					validation: {
						enumeration: [
							"",
							"m",
							"k",
							"M",
							"mu",
							"y",
							"z",
							"a",
							"f",
							"p",
							"n",
							"c",
							"d",
							"da",
							"h",
							"G",
							"T",
							"P",
							"E",
							"Z",
							"Y"
						],
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "replace",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				},
				unit: {
					required: !1,
					default: "s",
					namespace: null,
					validation: {
						enumeration: null,
						pattern: null,
						minInclusive: null,
						maxInclusive: null,
						minLength: null,
						maxLength: null,
						fractionDigits: null,
						totalDigits: null,
						whitespace: "collapse",
						assertions: null,
						minOccurrence: null,
						maxOccurrence: null
					}
				}
			}
		},
		subElements: {
			any: !1,
			sequence: [],
			details: {},
			choices: []
		},
		constraints: [],
		value: {
			type: "decimal",
			validation: {
				enumeration: null,
				pattern: null,
				minInclusive: null,
				maxInclusive: null,
				minLength: null,
				maxLength: null,
				fractionDigits: null,
				totalDigits: null,
				whitespace: "collapse",
				assertions: null,
				minOccurrence: null,
				maxOccurrence: null
			}
		}
	}
}, Lu = /* @__PURE__ */ "AccessControl.AccessPoint.Address.AllocationRole.AllocationRoleRef.AnalogueWiringParameters.AnalogueWiringParametersRef.Application.ApplicationSclRef.Association.Authentication.BDA.Bay.BayType.BehaviorDescription.BehaviorDescriptionRef.BehaviorReference.BinaryWiringParameters.BinaryWiringParametersRef.BitRate.CheckoutID.ClientLN.ClientServices.CommProt.Communication.CommunicationServiceSpecifications.ConductingEquipment.ConfDataSet.ConfLNs.ConfLdName.ConfLogControl.ConfReportControl.ConfSG.ConfSigRef.ConnectedAP.ConnectivityNode.ControlRef.ControllingLNode.DA.DAI.DAS.DAType.DO.DOI.DOS.DOType.DataObjectDirectory.DataSet.DataSetDirectory.DataTypeTemplates.DynAssociation.DynDataSet.EnumType.EnumVal.EqFunction.EqSubFunction.ExtCtrl.ExtRef.FCDA.FileHandling.Function.FunctionCatRef.FunctionCategory.FunctionCategoryRef.FunctionRef.FunctionRole.FunctionRoleContent.FunctionSclRef.FunctionTemplate.FunctionalSubVariant.FunctionalVariant.FunctionalVariantGroup.FunctionalVariantRef.GOOSE.GOOSEMcSecurity.GOOSESecurity.GSE.GSEControl.GSEDir.GSESettings.GSSE.GeneralEquipment.GetCBValues.GetDataObjectDefinition.GetDataSetValue.GetDirectory.GooseParameters.GooseParametersRef.Header.History.Hitem.IED.IEDName.IEDSourceFiles.InputVar.InputVarRef.Inputs.IssuerName.KDC.L2CommParameters.L3IPv4CommParameters.L3IPv6CommParameters.LDevice.LN.LN0.LNode.LNodeDataRef.LNodeInputRef.LNodeInputs.LNodeOutputRef.LNodeOutputs.LNodeSpecNaming.LNodeType.Label.Labels.Line.Log.LogControl.LogParameters.LogParametersRef.LogSettings.MaxTime.McSecurity.MinRequestedSCDFile.MinRequestedSCDFiles.MinTime.MultiAPPerSubNet.NeutralPoint.OptFields.OutputVar.OutputVarRef.Outputs.P.PhysConn.PowerSystemRelation.PowerSystemRelationRef.PowerSystemRelations.PowerTransformer.Private.Process.ProcessEcho.ProcessResource.ProcessResourceRef.ProcessResources.Project.ProjectProcessReference.ProtNs.Protocol.ReadWrite.RedProt.ReportControl.ReportParameters.ReportParametersRef.ReportSettings.Resource.RptEnabled.SCL.SCSM.SDI.SDO.SDS.SGEdit.SMV.SMVParameters.SMVParametersRef.SMVSecurity.SMVSettings.SMVsc.SVMcSecurity.SampledValueControl.SamplesPerSec.SclFileReference.SecPerSamples.Security.Server.ServerAt.ServiceSpecifications.Services.SetDataSetValue.SettingControl.SettingGroups.SignalRole.SmpRate.SmvOpts.SourceFiles.SourceRef.SubCategory.SubCheckoutID.SubEquipment.SubFunction.SubFunctionTemplate.SubNetwork.Subject.SubscriberLNode.Substation.SupSubscription.TapChanger.Terminal.Text.TimeSyncProt.TimerActivatedControl.TransformerWinding.TrgOps.Val.ValueHandling.Variable.VariableApplyTo.VariableRef.Voltage.VoltageLevel".split("."), Iu = {
	AccessControl: [],
	AccessPoint: ["name"],
	Address: [],
	AllocationRole: ["name"],
	AllocationRoleRef: [],
	AnalogueWiringParameters: ["id"],
	AnalogueWiringParametersRef: ["id"],
	Application: ["name"],
	ApplicationSclRef: [],
	Association: [
		"apRef",
		"iedName",
		"kind",
		"ldInst",
		"lnClass",
		"lnInst"
	],
	Authentication: [],
	BDA: ["bType", "name"],
	Bay: ["name"],
	BayType: [],
	BehaviorDescription: ["name"],
	BehaviorDescriptionRef: [],
	BehaviorReference: [],
	BinaryWiringParameters: ["id"],
	BinaryWiringParametersRef: ["id"],
	BitRate: [],
	CheckoutID: [
		"fileType",
		"revision",
		"version"
	],
	ClientLN: [
		"apRef",
		"iedName",
		"ldInst",
		"lnClass",
		"lnInst"
	],
	ClientServices: [],
	CommProt: [],
	Communication: [],
	CommunicationServiceSpecifications: [],
	ConductingEquipment: ["name", "type"],
	ConfDataSet: ["max"],
	ConfLNs: [],
	ConfLdName: [],
	ConfLogControl: ["max"],
	ConfReportControl: ["max"],
	ConfSG: [],
	ConfSigRef: ["max"],
	ConnectedAP: ["apName", "iedName"],
	ConnectivityNode: ["name", "pathName"],
	ControlRef: ["output"],
	ControllingLNode: ["outputName"],
	DA: [
		"bType",
		"fc",
		"name"
	],
	DAI: ["name"],
	DAS: ["name"],
	DAType: ["id"],
	DO: ["name", "type"],
	DOI: ["name"],
	DOS: ["name"],
	DOType: ["cdc", "id"],
	DataObjectDirectory: [],
	DataSet: ["name"],
	DataSetDirectory: [],
	DataTypeTemplates: [],
	DynAssociation: [],
	DynDataSet: ["max"],
	EnumType: ["id"],
	EnumVal: ["ord"],
	EqFunction: ["name"],
	EqSubFunction: ["name"],
	ExtCtrl: [],
	ExtRef: [],
	FCDA: ["fc"],
	FileHandling: [],
	Function: ["name"],
	FunctionCatRef: [],
	FunctionCategory: ["name"],
	FunctionCategoryRef: [],
	FunctionRef: [],
	FunctionRole: ["name"],
	FunctionRoleContent: [],
	FunctionSclRef: [],
	FunctionTemplate: ["name"],
	FunctionalSubVariant: ["name"],
	FunctionalVariant: ["name"],
	FunctionalVariantGroup: ["name"],
	FunctionalVariantRef: [],
	GOOSE: ["max"],
	GOOSEMcSecurity: [],
	GOOSESecurity: ["name", "serialNumber"],
	GSE: ["cbName", "ldInst"],
	GSEControl: ["appID", "name"],
	GSEDir: [],
	GSESettings: [],
	GSSE: ["max"],
	GeneralEquipment: ["name", "type"],
	GetCBValues: [],
	GetDataObjectDefinition: [],
	GetDataSetValue: [],
	GetDirectory: [],
	GooseParameters: ["id"],
	GooseParametersRef: ["id"],
	Header: ["id", "uuid"],
	History: [],
	Hitem: [
		"revision",
		"version",
		"when"
	],
	IED: ["name"],
	IEDName: ["apRef"],
	IEDSourceFiles: [],
	InputVar: ["varName"],
	InputVarRef: [],
	Inputs: [],
	IssuerName: ["commonName", "idHierarchy"],
	KDC: ["apName", "iedName"],
	L2CommParameters: [],
	L3IPv4CommParameters: [],
	L3IPv6CommParameters: [],
	LDevice: ["inst"],
	LN: [
		"inst",
		"lnClass",
		"lnType"
	],
	LN0: [
		"inst",
		"lnClass",
		"lnType"
	],
	LNode: ["lnClass"],
	LNodeDataRef: [],
	LNodeInputRef: [],
	LNodeInputs: [],
	LNodeOutputRef: [],
	LNodeOutputs: [],
	LNodeSpecNaming: [],
	LNodeType: ["id", "lnClass"],
	Label: ["lang"],
	Labels: [],
	Line: ["name"],
	Log: [],
	LogControl: ["logName", "name"],
	LogParameters: ["id"],
	LogParametersRef: ["id"],
	LogSettings: [],
	MaxTime: [],
	McSecurity: [],
	MinRequestedSCDFile: [
		"fileType",
		"revision",
		"version"
	],
	MinRequestedSCDFiles: [],
	MinTime: [],
	MultiAPPerSubNet: [],
	NeutralPoint: ["cNodeName", "connectivityNode"],
	OptFields: [],
	OutputVar: ["varName"],
	OutputVarRef: [],
	Outputs: [],
	P: ["type"],
	PhysConn: ["type"],
	PowerSystemRelation: ["name"],
	PowerSystemRelationRef: [],
	PowerSystemRelations: [],
	PowerTransformer: ["name", "type"],
	Private: ["type"],
	Process: ["name"],
	ProcessEcho: [],
	ProcessResource: ["name"],
	ProcessResourceRef: [],
	ProcessResources: [],
	Project: ["name"],
	ProjectProcessReference: [],
	ProtNs: [],
	Protocol: ["mustUnderstand"],
	ReadWrite: [],
	RedProt: [],
	ReportControl: ["confRev", "name"],
	ReportParameters: ["id"],
	ReportParametersRef: ["id"],
	ReportSettings: [],
	Resource: [],
	RptEnabled: [],
	SCL: [
		"release",
		"revision",
		"version"
	],
	SCSM: [],
	SDI: ["name"],
	SDO: ["name", "type"],
	SDS: ["name"],
	SGEdit: [],
	SMV: ["cbName", "ldInst"],
	SMVParameters: ["id"],
	SMVParametersRef: ["id"],
	SMVSecurity: ["name", "serialNumber"],
	SMVSettings: [],
	SMVsc: ["max"],
	SVMcSecurity: [],
	SampledValueControl: [
		"name",
		"nofASDU",
		"smpRate",
		"smvID"
	],
	SamplesPerSec: [],
	SclFileReference: [
		"fileType",
		"revision",
		"version"
	],
	SecPerSamples: [],
	Security: [],
	Server: [],
	ServerAt: ["apName"],
	ServiceSpecifications: [],
	Services: [],
	SetDataSetValue: [],
	SettingControl: ["numOfSGs"],
	SettingGroups: [],
	SignalRole: ["name"],
	SmpRate: [],
	SmvOpts: [],
	SourceFiles: [],
	SourceRef: ["input"],
	SubCategory: ["name"],
	SubCheckoutID: [
		"fileType",
		"revision",
		"version"
	],
	SubEquipment: ["name"],
	SubFunction: ["name"],
	SubFunctionTemplate: ["name"],
	SubNetwork: ["name"],
	Subject: ["commonName", "idHierarchy"],
	SubscriberLNode: ["inputName"],
	Substation: ["name"],
	SupSubscription: ["maxGo", "maxSv"],
	TapChanger: ["name", "type"],
	Terminal: ["cNodeName", "connectivityNode"],
	Text: [],
	TimeSyncProt: [],
	TimerActivatedControl: [],
	TransformerWinding: ["name", "type"],
	TrgOps: [],
	Val: [],
	ValueHandling: [],
	Variable: ["name"],
	VariableApplyTo: [],
	VariableRef: [],
	Voltage: ["unit"],
	VoltageLevel: ["name"]
}, Jl = { v2019C1: /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
	__proto__: null,
	ATTRIBUTES: {
		AccessControl: {},
		AccessPoint: {
			clock: "",
			desc: "",
			kdc: "",
			name: "",
			router: "",
			templateUuid: "",
			uuid: ""
		},
		Address: {},
		AllocationRole: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		AllocationRoleRef: {
			allocationRole: "",
			allocationRoleUuid: "",
			desc: ""
		},
		AnalogueWiringParameters: {
			desc: "",
			dsgInp: "",
			fctInp: "",
			id: "",
			inpNam: "",
			inpRef: ""
		},
		AnalogueWiringParametersRef: {
			desc: "",
			id: ""
		},
		Application: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		ApplicationSclRef: {},
		Association: {
			apRef: "",
			associationID: "",
			desc: "",
			iedName: "",
			initiator: "",
			kind: "",
			ldInst: "",
			lnClass: "",
			lnInst: "",
			lnUuid: "",
			prefix: ""
		},
		Authentication: {
			certificate: "",
			none: "",
			password: "",
			strong: "",
			weak: ""
		},
		BDA: {
			bType: "",
			count: "",
			desc: "",
			name: "",
			sAddr: "",
			type: "",
			valImport: "",
			valKind: ""
		},
		Bay: {
			desc: "",
			name: "",
			templateUuid: "",
			uuid: ""
		},
		BayType: {},
		BehaviorDescription: {
			desc: "",
			fileReference: "",
			format: "",
			isSimulation: "",
			isSpecification: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		BehaviorDescriptionRef: {
			behaviorDescription: "",
			behaviorDescriptionUuid: "",
			desc: ""
		},
		BehaviorReference: {
			behaviorReference: "",
			behaviorUuid: "",
			desc: ""
		},
		BinaryWiringParameters: {
			debTm: "",
			desc: "",
			fastOutput: "",
			id: "",
			inpNam: "",
			inpRef: "",
			outNam: "",
			outOffDl: "",
			outOnDl: "",
			outRef: "",
			outTyp: "",
			vInOff: "",
			vInOn: ""
		},
		BinaryWiringParametersRef: {
			desc: "",
			id: ""
		},
		BitRate: {
			multiplier: "",
			unit: ""
		},
		CheckoutID: {
			desc: "",
			engRight: "",
			fileName: "",
			fileType: "",
			fileUuid: "",
			headerId: "",
			revision: "",
			version: "",
			when: ""
		},
		ClientLN: {
			apRef: "",
			desc: "",
			iedName: "",
			ldInst: "",
			lnClass: "",
			lnInst: "",
			lnUuid: "",
			prefix: ""
		},
		ClientServices: {
			acceptServerInitiatedAssociation: "",
			bufReport: "",
			goose: "",
			gsse: "",
			maxAttributes: "",
			maxGOOSE: "",
			maxReports: "",
			maxSMV: "",
			noIctBinding: "",
			rGOOSE: "",
			rSV: "",
			readLog: "",
			supportsLdName: "",
			sv: "",
			unbufReport: ""
		},
		CommProt: { ipv6: "" },
		Communication: { desc: "" },
		CommunicationServiceSpecifications: { desc: "" },
		ConductingEquipment: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: "",
			virtual: ""
		},
		ConfDataSet: {
			max: "",
			maxAttributes: "",
			modify: ""
		},
		ConfLNs: {
			fixLnInst: "",
			fixPrefix: ""
		},
		ConfLdName: {},
		ConfLogControl: { max: "" },
		ConfReportControl: {
			bufConf: "",
			bufMode: "",
			max: "",
			maxBuf: ""
		},
		ConfSG: { resvTms: "" },
		ConfSigRef: { max: "" },
		ConnectedAP: {
			apName: "",
			apUuid: "",
			desc: "",
			iedName: "",
			redProt: ""
		},
		ConnectivityNode: {
			desc: "",
			name: "",
			pathName: "",
			templateUuid: "",
			uuid: ""
		},
		ControlRef: {
			controlled: "",
			controlledDoName: "",
			controlledLNodeUuid: "",
			desc: "",
			extCtrlAddr: "",
			extCtrlUuid: "",
			originUuid: "",
			output: "",
			outputInst: "",
			pDO: "",
			pLN: "",
			resourceName: "",
			resourceUuid: "",
			templateUuid: "",
			uuid: ""
		},
		ControllingLNode: {
			desc: "",
			outputName: "",
			pLN: "",
			resourceName: "",
			resourceUuid: ""
		},
		DA: {
			bType: "",
			count: "",
			dchg: "",
			desc: "",
			dupd: "",
			fc: "",
			name: "",
			qchg: "",
			sAddr: "",
			type: "",
			valImport: "",
			valKind: ""
		},
		DAI: {
			desc: "",
			ix: "",
			name: "",
			sAddr: "",
			valImport: "",
			valKind: ""
		},
		DAS: {
			desc: "",
			ix: "",
			mappedDaName: "",
			mappedLnUuid: "",
			name: "",
			valImport: "",
			valKind: ""
		},
		DAType: {
			desc: "",
			id: "",
			iedType: ""
		},
		DO: {
			accessControl: "",
			desc: "",
			name: "",
			transient: "",
			type: ""
		},
		DOI: {
			accessControl: "",
			desc: "",
			ix: "",
			name: ""
		},
		DOS: {
			desc: "",
			mappedDoName: "",
			mappedLnUuid: "",
			name: ""
		},
		DOType: {
			cdc: "",
			desc: "",
			id: "",
			iedType: ""
		},
		DataObjectDirectory: {},
		DataSet: {
			desc: "",
			name: "",
			templateUuid: "",
			uuid: ""
		},
		DataSetDirectory: {},
		DataTypeTemplates: {},
		DynAssociation: { max: "" },
		DynDataSet: {
			max: "",
			maxAttributes: ""
		},
		EnumType: {
			desc: "",
			id: ""
		},
		EnumVal: {
			desc: "",
			ord: ""
		},
		EqFunction: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		EqSubFunction: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		ExtCtrl: {
			apRef: "",
			checkInterlock: "",
			checkSynchrocheck: "",
			desc: "",
			doName: "",
			iedName: "",
			intAddr: "",
			ldInst: "",
			lnClass: "",
			lnInst: "",
			lnUuid: "",
			pDO: "",
			pLN: "",
			prefix: "",
			templateUuid: "",
			uuid: ""
		},
		ExtRef: {
			daName: "",
			desc: "",
			doName: "",
			iedName: "",
			intAddr: "",
			ldInst: "",
			lnClass: "",
			lnInst: "",
			lnUuid: "",
			pDA: "",
			pDO: "",
			pLN: "",
			pServT: "",
			prefix: "",
			serviceType: "",
			srcCBName: "",
			srcCBUuid: "",
			srcLDInst: "",
			srcLNClass: "",
			srcLNInst: "",
			srcPrefix: "",
			templateUuid: "",
			uuid: ""
		},
		FCDA: {
			daName: "",
			doName: "",
			fc: "",
			ix: "",
			ldInst: "",
			lnClass: "",
			lnInst: "",
			lnUuid: "",
			prefix: ""
		},
		FileHandling: {
			ftp: "",
			ftps: "",
			mms: ""
		},
		Function: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		FunctionCatRef: {
			function: "",
			functionUuid: ""
		},
		FunctionCategory: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		FunctionCategoryRef: {
			desc: "",
			functionCategory: "",
			functionCategoryUuid: ""
		},
		FunctionRef: {
			desc: "",
			function: "",
			functionUuid: ""
		},
		FunctionRole: {
			cardinality: "",
			desc: "",
			max: "",
			name: "",
			originUuid: "",
			selector: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		FunctionRoleContent: { roleInst: "" },
		FunctionSclRef: {},
		FunctionTemplate: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		FunctionalSubVariant: {
			desc: "",
			isBaseline: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		FunctionalVariant: {
			desc: "",
			isBaseline: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		FunctionalVariantGroup: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		FunctionalVariantRef: {
			functionalVariant: "",
			functionalVariantUuid: "",
			update: ""
		},
		GOOSE: {
			fixedOffs: "",
			goose: "",
			max: "",
			rGOOSE: ""
		},
		GOOSEMcSecurity: {
			encryption: "",
			signature: ""
		},
		GOOSESecurity: {
			desc: "",
			name: "",
			serialNumber: "",
			templateUuid: "",
			uuid: "",
			xferNumber: ""
		},
		GSE: {
			cbName: "",
			cbUuid: "",
			desc: "",
			ldInst: ""
		},
		GSEControl: {
			appID: "",
			confRev: "",
			datSet: "",
			desc: "",
			fixedOffs: "",
			name: "",
			securityEnable: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		GSEDir: {},
		GSESettings: {
			appID: "",
			cbName: "",
			datSet: "",
			dataLabel: "",
			kdaParticipant: ""
		},
		GSSE: { max: "" },
		GeneralEquipment: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: "",
			virtual: ""
		},
		GetCBValues: {},
		GetDataObjectDefinition: {},
		GetDataSetValue: {},
		GetDirectory: {},
		GooseParameters: {
			cbName: "",
			desc: "",
			dsName: "",
			goId: "",
			id: "",
			maxTime: "",
			minTime: "",
			securityEnabled: ""
		},
		GooseParametersRef: {
			desc: "",
			id: ""
		},
		Header: {
			baseUuid: "",
			fileType: "",
			id: "",
			nameStructure: "",
			revision: "",
			toolID: "",
			uuid: "",
			version: ""
		},
		History: {},
		Hitem: {
			revision: "",
			version: "",
			what: "",
			when: "",
			who: "",
			why: ""
		},
		IED: {
			configVersion: "",
			desc: "",
			engRight: "",
			manufacturer: "",
			name: "",
			originalSclRelease: "",
			originalSclRevision: "",
			originalSclVersion: "",
			owner: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		IEDName: {
			apRef: "",
			apUuid: "",
			ldInst: "",
			ldUuid: "",
			lnClass: "",
			lnInst: "",
			lnUuid: "",
			prefix: ""
		},
		IEDSourceFiles: {},
		InputVar: {
			daName: "",
			dataName: "",
			desc: "",
			doName: "",
			inputName: "",
			inputUuid: "",
			lnodeUuid: "",
			value: "",
			varName: ""
		},
		InputVarRef: {
			desc: "",
			value: "",
			variable: ""
		},
		Inputs: { desc: "" },
		IssuerName: {
			commonName: "",
			idHierarchy: ""
		},
		KDC: {
			apName: "",
			apUuid: "",
			iedName: ""
		},
		L2CommParameters: {
			appId: "",
			desc: "",
			macAddr: "",
			vlanId: "",
			vlanPriority: ""
		},
		L3IPv4CommParameters: {
			IPv4: "",
			"IPv4-IGMPv3Src": "",
			appId: "",
			desc: "",
			vlanId: "",
			vlanPriority: ""
		},
		L3IPv6CommParameters: {
			IPv6: "",
			"IPv6-IGMPv3Src": "",
			appId: "",
			desc: "",
			vlanId: "",
			vlanPriority: ""
		},
		LDevice: {
			desc: "",
			inst: "",
			ldName: "",
			templateUuid: "",
			uuid: ""
		},
		LN: {
			desc: "",
			inst: "",
			lnClass: "",
			lnType: "",
			prefix: "",
			templateUuid: "",
			uuid: ""
		},
		LN0: {
			desc: "",
			inst: "",
			lnClass: "",
			lnType: "",
			templateUuid: "",
			uuid: ""
		},
		LNode: {
			desc: "",
			iedName: "",
			ldInst: "",
			lnClass: "",
			lnInst: "",
			lnType: "",
			lnUuid: "",
			prefix: "",
			templateUuid: "",
			uuid: ""
		},
		LNodeDataRef: {
			daName: "",
			data: "",
			desc: "",
			doName: "",
			lnodeUuid: ""
		},
		LNodeInputRef: {
			desc: "",
			sourceRef: "",
			sourceRefUuid: ""
		},
		LNodeInputs: { desc: "" },
		LNodeOutputRef: {
			controlRef: "",
			controlRefUuid: "",
			desc: ""
		},
		LNodeOutputs: { desc: "" },
		LNodeSpecNaming: {
			sIedName: "",
			sLdInst: "",
			sLnClass: "",
			sLnInst: "",
			sPrefix: ""
		},
		LNodeType: {
			desc: "",
			id: "",
			iedType: "",
			lnClass: ""
		},
		Label: {
			id: "",
			lang: ""
		},
		Labels: { desc: "" },
		Line: {
			desc: "",
			name: "",
			nomFreq: "",
			numPhases: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		Log: {
			desc: "",
			name: ""
		},
		LogControl: {
			bufTime: "",
			datSet: "",
			desc: "",
			intgPd: "",
			ldInst: "",
			lnClass: "",
			lnInst: "",
			logEna: "",
			logName: "",
			name: "",
			prefix: "",
			reasonCode: "",
			templateUuid: "",
			uuid: ""
		},
		LogParameters: {
			cbName: "",
			desc: "",
			dsName: "",
			id: "",
			intgPd: "",
			logEna: "",
			logLdInst: "",
			logLnClass: "",
			logLnInst: "",
			logName: "",
			logPrefix: "",
			reasonCode: ""
		},
		LogParametersRef: {
			desc: "",
			id: ""
		},
		LogSettings: {
			cbName: "",
			datSet: "",
			intgPd: "",
			logEna: "",
			trgOps: ""
		},
		MaxTime: {
			multiplier: "",
			unit: ""
		},
		McSecurity: {
			encryption: "",
			signature: ""
		},
		MinRequestedSCDFile: {
			desc: "",
			fileName: "",
			fileType: "",
			fileUuid: "",
			revision: "",
			version: "",
			when: ""
		},
		MinRequestedSCDFiles: {},
		MinTime: {
			multiplier: "",
			unit: ""
		},
		MultiAPPerSubNet: {},
		NeutralPoint: {
			bayName: "",
			cNodeName: "",
			cNodeUuid: "",
			connectivityNode: "",
			desc: "",
			lineName: "",
			name: "",
			processName: "",
			substationName: "",
			voltageLevelName: ""
		},
		OptFields: {
			bufOvfl: "",
			configRef: "",
			dataRef: "",
			dataSet: "",
			entryID: "",
			reasonCode: "",
			seqNum: "",
			timeStamp: ""
		},
		OutputVar: {
			daName: "",
			dataName: "",
			desc: "",
			doName: "",
			lnodeUuid: "",
			outputName: "",
			outputUuid: "",
			value: "",
			varName: ""
		},
		OutputVarRef: {
			desc: "",
			value: "",
			variable: ""
		},
		Outputs: { desc: "" },
		P: { type: "" },
		PhysConn: {
			desc: "",
			type: ""
		},
		PowerSystemRelation: {
			desc: "",
			name: "",
			originUuid: "",
			relation: "",
			relationUuid: "",
			selector: "",
			templateUuid: "",
			uuid: ""
		},
		PowerSystemRelationRef: {
			desc: "",
			powerSystemRelation: "",
			powerSystemRelationUuid: ""
		},
		PowerSystemRelations: { desc: "" },
		PowerTransformer: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: "",
			virtual: ""
		},
		Private: {
			source: "",
			type: ""
		},
		Process: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		ProcessEcho: {
			desc: "",
			source: "",
			sourceDaName: "",
			sourceDoName: "",
			sourceLNodeUuid: ""
		},
		ProcessResource: {
			cardinality: "",
			desc: "",
			max: "",
			name: "",
			originUuid: "",
			selector: "",
			templateUuid: "",
			uuid: ""
		},
		ProcessResourceRef: {
			desc: "",
			processResource: "",
			processResourceUuid: ""
		},
		ProcessResources: { desc: "" },
		Project: {
			desc: "",
			name: "",
			uuid: ""
		},
		ProjectProcessReference: {
			desc: "",
			processReference: "",
			processUuid: ""
		},
		ProtNs: { type: "" },
		Protocol: { mustUnderstand: "" },
		ReadWrite: {},
		RedProt: {
			hsr: "",
			prp: "",
			rstp: ""
		},
		ReportControl: {
			bufTime: "",
			buffered: "",
			confRev: "",
			datSet: "",
			desc: "",
			indexed: "",
			intgPd: "",
			name: "",
			rptID: "",
			templateUuid: "",
			uuid: ""
		},
		ReportParameters: {
			bufTime: "",
			buffered: "",
			cbName: "",
			desc: "",
			dsName: "",
			id: "",
			intgPd: ""
		},
		ReportParametersRef: {
			desc: "",
			id: ""
		},
		ReportSettings: {
			bufTime: "",
			cbName: "",
			datSet: "",
			intgPd: "",
			optFields: "",
			owner: "",
			resvTms: "",
			rptID: "",
			trgOps: ""
		},
		Resource: {
			resInst: "",
			source: "",
			sourceUuid: ""
		},
		RptEnabled: {
			desc: "",
			max: ""
		},
		SCL: {
			release: "",
			revision: "",
			version: ""
		},
		SCSM: {
			iec61850_8_1: "",
			iec61850_8_2: "",
			serverAssociationInitiation: ""
		},
		SDI: {
			desc: "",
			ix: "",
			name: "",
			sAddr: ""
		},
		SDO: {
			count: "",
			desc: "",
			name: "",
			type: ""
		},
		SDS: {
			desc: "",
			ix: "",
			mappedDoName: "",
			mappedLnUuid: "",
			name: ""
		},
		SGEdit: { resvTms: "" },
		SMV: {
			cbName: "",
			cbUuid: "",
			desc: "",
			ldInst: ""
		},
		SMVParameters: {
			cbName: "",
			desc: "",
			dsName: "",
			id: "",
			multicast: "",
			nofASDU: "",
			securityEnabled: "",
			smpMod: "",
			smpRate: "",
			smvId: ""
		},
		SMVParametersRef: {
			desc: "",
			id: ""
		},
		SMVSecurity: {
			desc: "",
			name: "",
			serialNumber: "",
			templateUuid: "",
			uuid: "",
			xferNumber: ""
		},
		SMVSettings: {
			cbName: "",
			datSet: "",
			kdaParticipant: "",
			nofASDU: "",
			optFields: "",
			pdcTimeStamp: "",
			samplesPerSec: "",
			smpRate: "",
			svID: "",
			synchSrcId: ""
		},
		SMVsc: {
			delivery: "",
			deliveryConf: "",
			max: "",
			rSV: "",
			sv: ""
		},
		SVMcSecurity: {
			encryption: "",
			signature: ""
		},
		SampledValueControl: {
			confRev: "",
			datSet: "",
			desc: "",
			multicast: "",
			name: "",
			nofASDU: "",
			securityEnable: "",
			smpMod: "",
			smpRate: "",
			smvID: "",
			templateUuid: "",
			uuid: ""
		},
		SamplesPerSec: {},
		SclFileReference: {
			desc: "",
			fileName: "",
			fileType: "",
			fileUuid: "",
			revision: "",
			version: "",
			when: ""
		},
		SecPerSamples: {},
		Security: {
			ACSEAuthentication: "",
			E2ESecurity: ""
		},
		Server: {
			desc: "",
			timeout: ""
		},
		ServerAt: {
			apName: "",
			apUuid: "",
			desc: ""
		},
		ServiceSpecifications: { desc: "" },
		Services: { nameLength: "" },
		SetDataSetValue: {},
		SettingControl: {
			actSG: "",
			desc: "",
			numOfSGs: "",
			resvTms: ""
		},
		SettingGroups: {},
		SignalRole: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		SmpRate: {},
		SmvOpts: {
			dataSet: "",
			refreshTime: "",
			sampleMode: "",
			sampleRate: "",
			sampleSynchronized: "",
			security: "",
			synchSourceId: "",
			timestamp: ""
		},
		SourceFiles: {},
		SourceRef: {
			desc: "",
			extRefAddr: "",
			extRefUuid: "",
			input: "",
			inputInst: "",
			originUuid: "",
			pDA: "",
			pDO: "",
			pLN: "",
			resourceName: "",
			resourceUuid: "",
			service: "",
			source: "",
			sourceDaName: "",
			sourceDoName: "",
			sourceLNodeUuid: "",
			templateUuid: "",
			uuid: ""
		},
		SubCategory: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: ""
		},
		SubCheckoutID: {
			desc: "",
			engRight: "",
			fileName: "",
			fileType: "",
			fileUuid: "",
			headerId: "",
			revision: "",
			version: "",
			when: ""
		},
		SubEquipment: {
			desc: "",
			name: "",
			phase: "",
			templateUuid: "",
			uuid: "",
			virtual: ""
		},
		SubFunction: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		SubFunctionTemplate: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		SubNetwork: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: ""
		},
		Subject: {
			commonName: "",
			idHierarchy: ""
		},
		SubscriberLNode: {
			desc: "",
			inputName: "",
			pLN: "",
			resourceName: "",
			resourceUuid: "",
			service: ""
		},
		Substation: {
			desc: "",
			name: "",
			templateUuid: "",
			uuid: ""
		},
		SupSubscription: {
			maxGo: "",
			maxSv: ""
		},
		TapChanger: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: "",
			virtual: ""
		},
		Terminal: {
			bayName: "",
			cNodeName: "",
			cNodeUuid: "",
			connectivityNode: "",
			desc: "",
			lineName: "",
			name: "",
			processName: "",
			substationName: "",
			voltageLevelName: ""
		},
		Text: { source: "" },
		TimeSyncProt: {
			c37_238: "",
			iec61850_9_3: "",
			other: "",
			sntp: ""
		},
		TimerActivatedControl: {},
		TransformerWinding: {
			desc: "",
			name: "",
			templateUuid: "",
			type: "",
			uuid: "",
			virtual: ""
		},
		TrgOps: {
			dchg: "",
			dupd: "",
			gi: "",
			period: "",
			qchg: ""
		},
		Val: { sGroup: "" },
		ValueHandling: { setToRO: "" },
		Variable: {
			desc: "",
			name: "",
			originUuid: "",
			templateUuid: "",
			uuid: "",
			value: ""
		},
		VariableApplyTo: {
			attribute: "",
			daName: "",
			defaultValue: "",
			desc: "",
			doName: "",
			element: "",
			elementUuid: "",
			format: "",
			sGroup: ""
		},
		VariableRef: {
			desc: "",
			value: "",
			variable: "",
			variableUuid: ""
		},
		Voltage: {
			multiplier: "",
			unit: ""
		},
		VoltageLevel: {
			desc: "",
			name: "",
			nomFreq: "",
			numPhases: "",
			templateUuid: "",
			uuid: ""
		}
	},
	CHILDREN: {
		AccessControl: [],
		AccessPoint: [
			"Text",
			"Private",
			"Server",
			"LN",
			"ServerAt",
			"Services",
			"GOOSESecurity",
			"SMVSecurity",
			"Labels"
		],
		Address: ["P"],
		AllocationRole: ["Text", "FunctionRef"],
		AllocationRoleRef: ["Text", "FunctionalVariantRef"],
		AnalogueWiringParameters: ["Text"],
		AnalogueWiringParametersRef: ["Text"],
		Application: [
			"Text",
			"FunctionRole",
			"FunctionalVariant",
			"FunctionalVariantGroup",
			"AllocationRoleRef",
			"ApplicationSclRef"
		],
		ApplicationSclRef: ["Text", "SclFileReference"],
		Association: [],
		Authentication: [],
		BDA: [
			"Text",
			"Private",
			"Val",
			"Labels"
		],
		Bay: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"PowerTransformer",
			"GeneralEquipment",
			"ConductingEquipment",
			"ConnectivityNode",
			"Function"
		],
		BayType: [],
		BehaviorDescription: [
			"Text",
			"InputVar",
			"OutputVar",
			"BehaviorReference"
		],
		BehaviorDescriptionRef: [
			"Text",
			"FunctionalVariantRef",
			"InputVarRef",
			"OutputVarRef"
		],
		BehaviorReference: ["Text"],
		BinaryWiringParameters: ["Text"],
		BinaryWiringParametersRef: ["Text"],
		BitRate: [],
		CheckoutID: ["SubCheckoutID"],
		ClientLN: [],
		ClientServices: [
			"TimeSyncProt",
			"GOOSEMcSecurity",
			"SVMcSecurity",
			"Security"
		],
		CommProt: [],
		Communication: [
			"Text",
			"Private",
			"SubNetwork"
		],
		CommunicationServiceSpecifications: [
			"Text",
			"GooseParameters",
			"SMVParameters",
			"ReportParameters"
		],
		ConductingEquipment: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"Terminal",
			"SubEquipment",
			"EqFunction"
		],
		ConfDataSet: [],
		ConfLNs: [],
		ConfLdName: [],
		ConfLogControl: [],
		ConfReportControl: [],
		ConfSG: [],
		ConfSigRef: [],
		ConnectedAP: [
			"Text",
			"Private",
			"Address",
			"GSE",
			"SMV",
			"PhysConn"
		],
		ConnectivityNode: [
			"Text",
			"Private",
			"Labels",
			"LNode"
		],
		ControlRef: [
			"Text",
			"BinaryWiringParametersRef",
			"AnalogueWiringParametersRef"
		],
		ControllingLNode: [
			"Text",
			"BinaryWiringParametersRef",
			"AnalogueWiringParametersRef"
		],
		DA: [
			"Text",
			"Private",
			"Val",
			"Labels",
			"ProtNs"
		],
		DAI: [
			"Text",
			"Private",
			"Val",
			"Labels"
		],
		DAS: [
			"Text",
			"SubscriberLNode",
			"ControllingLNode",
			"ProcessEcho",
			"LogParametersRef",
			"Val",
			"Labels"
		],
		DAType: [
			"Text",
			"Private",
			"BDA",
			"ProtNs",
			"Labels"
		],
		DO: [
			"Text",
			"Private",
			"Labels"
		],
		DOI: [
			"Text",
			"Private",
			"SDI",
			"DAI",
			"Labels"
		],
		DOS: [
			"Text",
			"SDS",
			"DAS",
			"SubscriberLNode",
			"ControllingLNode",
			"ProcessEcho",
			"LogParametersRef",
			"Labels"
		],
		DOType: [
			"Text",
			"Private",
			"SDO",
			"DA",
			"Labels"
		],
		DataObjectDirectory: [],
		DataSet: [
			"Text",
			"Private",
			"FCDA"
		],
		DataSetDirectory: [],
		DataTypeTemplates: [
			"LNodeType",
			"DOType",
			"DAType",
			"EnumType"
		],
		DynAssociation: [],
		DynDataSet: [],
		EnumType: [
			"Text",
			"Private",
			"EnumVal"
		],
		EnumVal: [],
		EqFunction: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"GeneralEquipment",
			"EqSubFunction"
		],
		EqSubFunction: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"GeneralEquipment",
			"EqSubFunction"
		],
		ExtCtrl: ["Text", "Private"],
		ExtRef: ["Text", "Private"],
		FCDA: [],
		FileHandling: [],
		Function: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"SubFunction",
			"GeneralEquipment",
			"ConductingEquipment"
		],
		FunctionCatRef: ["Text"],
		FunctionCategory: [
			"Text",
			"SubCategory",
			"FunctionCatRef"
		],
		FunctionCategoryRef: ["Text", "FunctionalVariantRef"],
		FunctionRef: [
			"Text",
			"FunctionalVariantRef",
			"SignalRole"
		],
		FunctionRole: [
			"Text",
			"FunctionalVariantRef",
			"FunctionRoleContent"
		],
		FunctionRoleContent: [
			"Text",
			"FunctionRef",
			"BehaviorDescriptionRef",
			"ProcessResourceRef",
			"VariableRef",
			"FunctionCategoryRef",
			"PowerSystemRelationRef"
		],
		FunctionSclRef: ["Text", "SclFileReference"],
		FunctionTemplate: [
			"Text",
			"LNode",
			"SubFunctionTemplate",
			"GeneralEquipment",
			"ConductingEquipment"
		],
		FunctionalSubVariant: [
			"Text",
			"FunctionalSubVariant",
			"VariableRef"
		],
		FunctionalVariant: [
			"Text",
			"FunctionalSubVariant",
			"VariableRef"
		],
		FunctionalVariantGroup: ["Text", "FunctionalVariant"],
		FunctionalVariantRef: ["Text"],
		GOOSE: [],
		GOOSEMcSecurity: [],
		GOOSESecurity: [
			"Text",
			"Private",
			"Labels",
			"Subject",
			"IssuerName"
		],
		GSE: [
			"Text",
			"Private",
			"Address",
			"MinTime",
			"MaxTime"
		],
		GSEControl: [
			"Text",
			"Private",
			"IEDName",
			"Protocol"
		],
		GSEDir: [],
		GSESettings: ["McSecurity"],
		GSSE: [],
		GeneralEquipment: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"EqFunction"
		],
		GetCBValues: [],
		GetDataObjectDefinition: [],
		GetDataSetValue: [],
		GetDirectory: [],
		GooseParameters: [
			"Text",
			"L2CommParameters",
			"L3IPv4CommParameters",
			"L3IPv6CommParameters"
		],
		GooseParametersRef: ["Text"],
		Header: [
			"Text",
			"History",
			"SourceFiles"
		],
		History: ["Hitem"],
		Hitem: ["SourceFiles"],
		IED: [
			"Text",
			"Private",
			"Services",
			"AccessPoint",
			"KDC",
			"IEDSourceFiles",
			"MinRequestedSCDFiles",
			"Labels"
		],
		IEDName: [],
		IEDSourceFiles: [
			"Text",
			"Private",
			"SclFileReference"
		],
		InputVar: ["Text"],
		InputVarRef: ["Text", "FunctionalVariantRef"],
		Inputs: [
			"Text",
			"Private",
			"ExtRef"
		],
		IssuerName: [],
		KDC: [],
		L2CommParameters: ["Text"],
		L3IPv4CommParameters: ["Text"],
		L3IPv6CommParameters: ["Text"],
		LDevice: [
			"Text",
			"Private",
			"LN0",
			"LN",
			"AccessControl",
			"Labels"
		],
		LN: [
			"Text",
			"Private",
			"DataSet",
			"ReportControl",
			"LogControl",
			"DOI",
			"Inputs",
			"Outputs",
			"Log",
			"Labels"
		],
		LN0: [
			"Text",
			"Private",
			"DataSet",
			"ReportControl",
			"LogControl",
			"DOI",
			"Inputs",
			"Outputs",
			"Log",
			"Labels",
			"GSEControl",
			"SampledValueControl",
			"SettingControl"
		],
		LNode: [
			"Text",
			"Private",
			"Labels"
		],
		LNodeDataRef: ["Text", "FunctionalVariantRef"],
		LNodeInputRef: ["Text", "FunctionalVariantRef"],
		LNodeInputs: ["Text", "SourceRef"],
		LNodeOutputRef: ["Text", "FunctionalVariantRef"],
		LNodeOutputs: ["Text", "ControlRef"],
		LNodeSpecNaming: ["Text"],
		LNodeType: [
			"Text",
			"Private",
			"DO",
			"Labels"
		],
		Label: [],
		Labels: [
			"Text",
			"Private",
			"Label"
		],
		Line: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"GeneralEquipment",
			"Function",
			"Voltage",
			"ConductingEquipment",
			"ConnectivityNode"
		],
		Log: ["Text", "Private"],
		LogControl: [
			"Text",
			"Private",
			"TrgOps"
		],
		LogParameters: ["Text"],
		LogParametersRef: ["Text"],
		LogSettings: [],
		MaxTime: [],
		McSecurity: [],
		MinRequestedSCDFile: [],
		MinRequestedSCDFiles: [
			"Text",
			"Private",
			"MinRequestedSCDFile"
		],
		MinTime: [],
		MultiAPPerSubNet: [],
		NeutralPoint: ["Text", "Private"],
		OptFields: [],
		OutputVar: ["Text"],
		OutputVarRef: ["Text", "FunctionalVariantRef"],
		Outputs: [
			"Text",
			"Private",
			"ExtCtrl"
		],
		P: [],
		PhysConn: [
			"Text",
			"Private",
			"P"
		],
		PowerSystemRelation: ["Text"],
		PowerSystemRelationRef: ["Text", "FunctionalVariantRef"],
		PowerSystemRelations: ["Text", "PowerSystemRelation"],
		PowerTransformer: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"TransformerWinding",
			"SubEquipment",
			"EqFunction"
		],
		Private: [],
		Process: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"GeneralEquipment",
			"Function",
			"ConductingEquipment",
			"Substation",
			"Line",
			"Process"
		],
		ProcessEcho: ["Text"],
		ProcessResource: ["Text", "Resource"],
		ProcessResourceRef: ["Text", "FunctionalVariantRef"],
		ProcessResources: ["Text", "ProcessResource"],
		Project: ["Text", "ProjectProcessReference"],
		ProjectProcessReference: ["Text"],
		ProtNs: [],
		Protocol: [],
		ReadWrite: [],
		RedProt: [],
		ReportControl: [
			"Text",
			"Private",
			"TrgOps",
			"OptFields",
			"RptEnabled"
		],
		ReportParameters: ["Text"],
		ReportParametersRef: ["Text"],
		ReportSettings: [],
		Resource: [],
		RptEnabled: [
			"Text",
			"Private",
			"ClientLN"
		],
		SCL: [
			"Text",
			"Private",
			"Header",
			"Substation",
			"Communication",
			"IED",
			"DataTypeTemplates",
			"Line",
			"Process"
		],
		SCSM: [],
		SDI: [
			"Text",
			"Private",
			"SDI",
			"DAI",
			"Labels"
		],
		SDO: [
			"Text",
			"Private",
			"Labels"
		],
		SDS: [
			"Text",
			"SDS",
			"DAS",
			"SubscriberLNode",
			"ControllingLNode",
			"ProcessEcho",
			"LogParametersRef",
			"Labels"
		],
		SGEdit: [],
		SMV: [
			"Text",
			"Private",
			"Address"
		],
		SMVParameters: [
			"Text",
			"L2CommParameters",
			"L3IPv4CommParameters",
			"L3IPv6CommParameters"
		],
		SMVParametersRef: ["Text"],
		SMVSecurity: [
			"Text",
			"Private",
			"Labels",
			"Subject",
			"IssuerName"
		],
		SMVSettings: [
			"SmpRate",
			"SamplesPerSec",
			"SecPerSamples",
			"McSecurity"
		],
		SMVsc: [],
		SVMcSecurity: [],
		SampledValueControl: [
			"Text",
			"Private",
			"IEDName",
			"SmvOpts",
			"Protocol"
		],
		SamplesPerSec: [],
		SclFileReference: ["Text", "Private"],
		SecPerSamples: [],
		Security: [],
		Server: [
			"Text",
			"Private",
			"Authentication",
			"LDevice",
			"Association"
		],
		ServerAt: ["Text", "Private"],
		ServiceSpecifications: [
			"Text",
			"GooseParameters",
			"SMVParameters",
			"ReportParameters",
			"BinaryWiringParameters",
			"AnalogueWiringParameters",
			"LogParameters"
		],
		Services: /* @__PURE__ */ "DynAssociation.SettingGroups.GetDirectory.GetDataObjectDefinition.DataObjectDirectory.GetDataSetValue.SetDataSetValue.DataSetDirectory.ConfDataSet.DynDataSet.ReadWrite.TimerActivatedControl.ConfReportControl.GetCBValues.ConfLogControl.ReportSettings.LogSettings.GSESettings.SMVSettings.GSEDir.GOOSE.GSSE.SMVsc.FileHandling.ConfLNs.ClientServices.ConfLdName.SupSubscription.ConfSigRef.ValueHandling.RedProt.TimeSyncProt.CommProt.SCSM.Security.MultiAPPerSubNet".split("."),
		SetDataSetValue: [],
		SettingControl: ["Text", "Private"],
		SettingGroups: ["SGEdit", "ConfSG"],
		SignalRole: [
			"Text",
			"FunctionalVariantRef",
			"LNodeInputRef",
			"LNodeOutputRef",
			"LNodeDataRef"
		],
		SmpRate: [],
		SmvOpts: [],
		SourceFiles: [
			"Text",
			"Private",
			"SclFileReference"
		],
		SourceRef: [
			"Text",
			"GooseParametersRef",
			"SMVParametersRef",
			"ReportParametersRef",
			"BinaryWiringParametersRef",
			"AnalogueWiringParametersRef"
		],
		SubCategory: [
			"Text",
			"SubCategory",
			"FunctionCatRef"
		],
		SubCheckoutID: ["SubCheckoutID"],
		SubEquipment: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"EqFunction"
		],
		SubFunction: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"GeneralEquipment",
			"ConductingEquipment",
			"SubFunction"
		],
		SubFunctionTemplate: [
			"Text",
			"LNode",
			"GeneralEquipment",
			"ConductingEquipment",
			"SubFunctionTemplate"
		],
		SubNetwork: [
			"Text",
			"Private",
			"Labels",
			"BitRate",
			"ConnectedAP"
		],
		Subject: [],
		SubscriberLNode: [
			"Text",
			"GooseParametersRef",
			"SMVParametersRef",
			"ReportParametersRef",
			"BinaryWiringParametersRef"
		],
		Substation: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"PowerTransformer",
			"GeneralEquipment",
			"VoltageLevel",
			"Function"
		],
		SupSubscription: [],
		TapChanger: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"SubEquipment",
			"EqFunction"
		],
		Terminal: ["Text", "Private"],
		Text: [],
		TimeSyncProt: [],
		TimerActivatedControl: [],
		TransformerWinding: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"Terminal",
			"SubEquipment",
			"TapChanger",
			"NeutralPoint",
			"EqFunction"
		],
		TrgOps: [],
		Val: [],
		ValueHandling: [],
		Variable: ["Text", "VariableApplyTo"],
		VariableApplyTo: ["Text"],
		VariableRef: ["Text", "FunctionalVariantRef"],
		Voltage: [],
		VoltageLevel: [
			"Text",
			"Private",
			"Labels",
			"LNode",
			"PowerTransformer",
			"GeneralEquipment",
			"Voltage",
			"Bay",
			"Function"
		]
	},
	DEFINITION: xu,
	ELEMENT_NAMES: Lu,
	PARENTS: {
		AccessControl: ["LDevice"],
		AccessPoint: ["IED"],
		Address: [
			"ConnectedAP",
			"GSE",
			"SMV"
		],
		AllocationRole: [],
		AllocationRoleRef: ["Application"],
		AnalogueWiringParameters: ["ServiceSpecifications"],
		AnalogueWiringParametersRef: [
			"ControlRef",
			"ControllingLNode",
			"SourceRef"
		],
		Application: [],
		ApplicationSclRef: ["Application"],
		Association: ["Server"],
		Authentication: ["Server"],
		BDA: ["DAType"],
		Bay: ["VoltageLevel"],
		BayType: [],
		BehaviorDescription: [],
		BehaviorDescriptionRef: ["FunctionRoleContent"],
		BehaviorReference: ["BehaviorDescription"],
		BinaryWiringParameters: ["ServiceSpecifications"],
		BinaryWiringParametersRef: [
			"ControlRef",
			"ControllingLNode",
			"SourceRef",
			"SubscriberLNode"
		],
		BitRate: ["SubNetwork"],
		CheckoutID: [],
		ClientLN: ["RptEnabled"],
		ClientServices: ["Services"],
		CommProt: ["Services"],
		Communication: ["SCL"],
		CommunicationServiceSpecifications: [],
		ConductingEquipment: [
			"Bay",
			"Function",
			"FunctionTemplate",
			"Line",
			"Process",
			"SubFunction",
			"SubFunctionTemplate"
		],
		ConfDataSet: ["Services"],
		ConfLNs: ["Services"],
		ConfLdName: ["Services"],
		ConfLogControl: ["Services"],
		ConfReportControl: ["Services"],
		ConfSG: ["SettingGroups"],
		ConfSigRef: ["Services"],
		ConnectedAP: ["SubNetwork"],
		ConnectivityNode: ["Bay", "Line"],
		ControlRef: ["LNodeOutputs"],
		ControllingLNode: [
			"DAS",
			"DOS",
			"SDS"
		],
		DA: ["DOType"],
		DAI: ["DOI", "SDI"],
		DAS: ["DOS", "SDS"],
		DAType: ["DataTypeTemplates"],
		DO: ["LNodeType"],
		DOI: ["LN", "LN0"],
		DOS: [],
		DOType: ["DataTypeTemplates"],
		DataObjectDirectory: ["Services"],
		DataSet: ["LN", "LN0"],
		DataSetDirectory: ["Services"],
		DataTypeTemplates: ["SCL"],
		DynAssociation: ["Services"],
		DynDataSet: ["Services"],
		EnumType: ["DataTypeTemplates"],
		EnumVal: ["EnumType"],
		EqFunction: [
			"ConductingEquipment",
			"GeneralEquipment",
			"PowerTransformer",
			"SubEquipment",
			"TapChanger",
			"TransformerWinding"
		],
		EqSubFunction: ["EqFunction", "EqSubFunction"],
		ExtCtrl: ["Outputs"],
		ExtRef: ["Inputs"],
		FCDA: ["DataSet"],
		FileHandling: ["Services"],
		Function: [
			"Bay",
			"Line",
			"Process",
			"Substation",
			"VoltageLevel"
		],
		FunctionCatRef: ["FunctionCategory", "SubCategory"],
		FunctionCategory: [],
		FunctionCategoryRef: ["FunctionRoleContent"],
		FunctionRef: ["AllocationRole", "FunctionRoleContent"],
		FunctionRole: ["Application"],
		FunctionRoleContent: ["FunctionRole"],
		FunctionSclRef: [],
		FunctionTemplate: [],
		FunctionalSubVariant: ["FunctionalSubVariant", "FunctionalVariant"],
		FunctionalVariant: ["Application", "FunctionalVariantGroup"],
		FunctionalVariantGroup: ["Application"],
		FunctionalVariantRef: [
			"AllocationRoleRef",
			"BehaviorDescriptionRef",
			"FunctionCategoryRef",
			"FunctionRef",
			"FunctionRole",
			"InputVarRef",
			"LNodeDataRef",
			"LNodeInputRef",
			"LNodeOutputRef",
			"OutputVarRef",
			"PowerSystemRelationRef",
			"ProcessResourceRef",
			"SignalRole",
			"VariableRef"
		],
		GOOSE: ["Services"],
		GOOSEMcSecurity: ["ClientServices"],
		GOOSESecurity: ["AccessPoint"],
		GSE: ["ConnectedAP"],
		GSEControl: ["LN0"],
		GSEDir: ["Services"],
		GSESettings: ["Services"],
		GSSE: ["Services"],
		GeneralEquipment: [
			"Bay",
			"EqFunction",
			"EqSubFunction",
			"Function",
			"FunctionTemplate",
			"Line",
			"Process",
			"SubFunction",
			"SubFunctionTemplate",
			"Substation",
			"VoltageLevel"
		],
		GetCBValues: ["Services"],
		GetDataObjectDefinition: ["Services"],
		GetDataSetValue: ["Services"],
		GetDirectory: ["Services"],
		GooseParameters: ["CommunicationServiceSpecifications", "ServiceSpecifications"],
		GooseParametersRef: ["SourceRef", "SubscriberLNode"],
		Header: ["SCL"],
		History: ["Header"],
		Hitem: ["History"],
		IED: ["SCL"],
		IEDName: ["GSEControl", "SampledValueControl"],
		IEDSourceFiles: ["IED"],
		InputVar: ["BehaviorDescription"],
		InputVarRef: ["BehaviorDescriptionRef"],
		Inputs: ["LN", "LN0"],
		IssuerName: ["GOOSESecurity", "SMVSecurity"],
		KDC: ["IED"],
		L2CommParameters: ["GooseParameters", "SMVParameters"],
		L3IPv4CommParameters: ["GooseParameters", "SMVParameters"],
		L3IPv6CommParameters: ["GooseParameters", "SMVParameters"],
		LDevice: ["Server"],
		LN: ["AccessPoint", "LDevice"],
		LN0: ["LDevice"],
		LNode: [
			"Bay",
			"ConductingEquipment",
			"ConnectivityNode",
			"EqFunction",
			"EqSubFunction",
			"Function",
			"FunctionTemplate",
			"GeneralEquipment",
			"Line",
			"PowerTransformer",
			"Process",
			"SubEquipment",
			"SubFunction",
			"SubFunctionTemplate",
			"Substation",
			"TapChanger",
			"TransformerWinding",
			"VoltageLevel"
		],
		LNodeDataRef: ["SignalRole"],
		LNodeInputRef: ["SignalRole"],
		LNodeInputs: [],
		LNodeOutputRef: ["SignalRole"],
		LNodeOutputs: [],
		LNodeSpecNaming: [],
		LNodeType: ["DataTypeTemplates"],
		Label: ["Labels"],
		Labels: /* @__PURE__ */ "AccessPoint.BDA.Bay.ConductingEquipment.ConnectivityNode.DA.DAI.DAS.DAType.DO.DOI.DOS.DOType.EqFunction.EqSubFunction.Function.GOOSESecurity.GeneralEquipment.IED.LDevice.LN.LN0.LNode.LNodeType.Line.PowerTransformer.Process.SDI.SDO.SDS.SMVSecurity.SubEquipment.SubFunction.SubNetwork.Substation.TapChanger.TransformerWinding.VoltageLevel".split("."),
		Line: ["Process", "SCL"],
		Log: ["LN", "LN0"],
		LogControl: ["LN", "LN0"],
		LogParameters: ["ServiceSpecifications"],
		LogParametersRef: [
			"DAS",
			"DOS",
			"SDS"
		],
		LogSettings: ["Services"],
		MaxTime: ["GSE"],
		McSecurity: ["GSESettings", "SMVSettings"],
		MinRequestedSCDFile: ["MinRequestedSCDFiles"],
		MinRequestedSCDFiles: ["IED"],
		MinTime: ["GSE"],
		MultiAPPerSubNet: ["Services"],
		NeutralPoint: ["TransformerWinding"],
		OptFields: ["ReportControl"],
		OutputVar: ["BehaviorDescription"],
		OutputVarRef: ["BehaviorDescriptionRef"],
		Outputs: ["LN", "LN0"],
		P: ["Address", "PhysConn"],
		PhysConn: ["ConnectedAP"],
		PowerSystemRelation: ["PowerSystemRelations"],
		PowerSystemRelationRef: ["FunctionRoleContent"],
		PowerSystemRelations: [],
		PowerTransformer: [
			"Bay",
			"Substation",
			"VoltageLevel"
		],
		Private: /* @__PURE__ */ "AccessPoint.BDA.Bay.Communication.ConductingEquipment.ConnectedAP.ConnectivityNode.DA.DAI.DAType.DO.DOI.DOType.DataSet.EnumType.EqFunction.EqSubFunction.ExtCtrl.ExtRef.Function.GOOSESecurity.GSE.GSEControl.GeneralEquipment.IED.IEDSourceFiles.Inputs.LDevice.LN.LN0.LNode.LNodeType.Labels.Line.Log.LogControl.MinRequestedSCDFiles.NeutralPoint.Outputs.PhysConn.PowerTransformer.Process.ReportControl.RptEnabled.SCL.SDI.SDO.SMV.SMVSecurity.SampledValueControl.SclFileReference.Server.ServerAt.SettingControl.SourceFiles.SubEquipment.SubFunction.SubNetwork.Substation.TapChanger.Terminal.TransformerWinding.VoltageLevel".split("."),
		Process: ["Process", "SCL"],
		ProcessEcho: [
			"DAS",
			"DOS",
			"SDS"
		],
		ProcessResource: ["ProcessResources"],
		ProcessResourceRef: ["FunctionRoleContent"],
		ProcessResources: [],
		Project: [],
		ProjectProcessReference: ["Project"],
		ProtNs: ["DA", "DAType"],
		Protocol: ["GSEControl", "SampledValueControl"],
		ReadWrite: ["Services"],
		RedProt: ["Services"],
		ReportControl: ["LN", "LN0"],
		ReportParameters: ["CommunicationServiceSpecifications", "ServiceSpecifications"],
		ReportParametersRef: ["SourceRef", "SubscriberLNode"],
		ReportSettings: ["Services"],
		Resource: ["ProcessResource"],
		RptEnabled: ["ReportControl"],
		SCL: [],
		SCSM: ["Services"],
		SDI: ["DOI", "SDI"],
		SDO: ["DOType"],
		SDS: ["DOS", "SDS"],
		SGEdit: ["SettingGroups"],
		SMV: ["ConnectedAP"],
		SMVParameters: ["CommunicationServiceSpecifications", "ServiceSpecifications"],
		SMVParametersRef: ["SourceRef", "SubscriberLNode"],
		SMVSecurity: ["AccessPoint"],
		SMVSettings: ["Services"],
		SMVsc: ["Services"],
		SVMcSecurity: ["ClientServices"],
		SampledValueControl: ["LN0"],
		SamplesPerSec: ["SMVSettings"],
		SclFileReference: [
			"ApplicationSclRef",
			"FunctionSclRef",
			"IEDSourceFiles",
			"SourceFiles"
		],
		SecPerSamples: ["SMVSettings"],
		Security: ["ClientServices", "Services"],
		Server: ["AccessPoint"],
		ServerAt: ["AccessPoint"],
		ServiceSpecifications: [],
		Services: ["AccessPoint", "IED"],
		SetDataSetValue: ["Services"],
		SettingControl: ["LN0"],
		SettingGroups: ["Services"],
		SignalRole: ["FunctionRef"],
		SmpRate: ["SMVSettings"],
		SmvOpts: ["SampledValueControl"],
		SourceFiles: ["Header", "Hitem"],
		SourceRef: ["LNodeInputs"],
		SubCategory: ["FunctionCategory", "SubCategory"],
		SubCheckoutID: ["CheckoutID", "SubCheckoutID"],
		SubEquipment: [
			"ConductingEquipment",
			"PowerTransformer",
			"TapChanger",
			"TransformerWinding"
		],
		SubFunction: ["Function", "SubFunction"],
		SubFunctionTemplate: ["FunctionTemplate", "SubFunctionTemplate"],
		SubNetwork: ["Communication"],
		Subject: ["GOOSESecurity", "SMVSecurity"],
		SubscriberLNode: [
			"DAS",
			"DOS",
			"SDS"
		],
		Substation: ["Process", "SCL"],
		SupSubscription: ["Services"],
		TapChanger: ["TransformerWinding"],
		Terminal: ["ConductingEquipment", "TransformerWinding"],
		Text: /* @__PURE__ */ "AccessPoint.AllocationRole.AllocationRoleRef.AnalogueWiringParameters.AnalogueWiringParametersRef.Application.ApplicationSclRef.BDA.Bay.BehaviorDescription.BehaviorDescriptionRef.BehaviorReference.BinaryWiringParameters.BinaryWiringParametersRef.Communication.CommunicationServiceSpecifications.ConductingEquipment.ConnectedAP.ConnectivityNode.ControlRef.ControllingLNode.DA.DAI.DAS.DAType.DO.DOI.DOS.DOType.DataSet.EnumType.EqFunction.EqSubFunction.ExtCtrl.ExtRef.Function.FunctionCatRef.FunctionCategory.FunctionCategoryRef.FunctionRef.FunctionRole.FunctionRoleContent.FunctionSclRef.FunctionTemplate.FunctionalSubVariant.FunctionalVariant.FunctionalVariantGroup.FunctionalVariantRef.GOOSESecurity.GSE.GSEControl.GeneralEquipment.GooseParameters.GooseParametersRef.Header.IED.IEDSourceFiles.InputVar.InputVarRef.Inputs.L2CommParameters.L3IPv4CommParameters.L3IPv6CommParameters.LDevice.LN.LN0.LNode.LNodeDataRef.LNodeInputRef.LNodeInputs.LNodeOutputRef.LNodeOutputs.LNodeSpecNaming.LNodeType.Labels.Line.Log.LogControl.LogParameters.LogParametersRef.MinRequestedSCDFiles.NeutralPoint.OutputVar.OutputVarRef.Outputs.PhysConn.PowerSystemRelation.PowerSystemRelationRef.PowerSystemRelations.PowerTransformer.Process.ProcessEcho.ProcessResource.ProcessResourceRef.ProcessResources.Project.ProjectProcessReference.ReportControl.ReportParameters.ReportParametersRef.RptEnabled.SCL.SDI.SDO.SDS.SMV.SMVParameters.SMVParametersRef.SMVSecurity.SampledValueControl.SclFileReference.Server.ServerAt.ServiceSpecifications.SettingControl.SignalRole.SourceFiles.SourceRef.SubCategory.SubEquipment.SubFunction.SubFunctionTemplate.SubNetwork.SubscriberLNode.Substation.TapChanger.Terminal.TransformerWinding.Variable.VariableApplyTo.VariableRef.VoltageLevel".split("."),
		TimeSyncProt: ["ClientServices", "Services"],
		TimerActivatedControl: ["Services"],
		TransformerWinding: ["PowerTransformer"],
		TrgOps: ["LogControl", "ReportControl"],
		Val: [
			"BDA",
			"DA",
			"DAI",
			"DAS"
		],
		ValueHandling: ["Services"],
		Variable: [],
		VariableApplyTo: ["Variable"],
		VariableRef: [
			"FunctionRoleContent",
			"FunctionalSubVariant",
			"FunctionalVariant"
		],
		Voltage: ["Line", "VoltageLevel"],
		VoltageLevel: ["Substation"]
	},
	REQUIRED: Iu
}, Symbol.toStringTag, { value: "Module" })) }, bt = { default: {
	prefix: "",
	uri: "http://www.iec.ch/61850/2003/SCL"
} };
function qu(u) {
	let _ = /* @__PURE__ */ new Map();
	for (let T of u) _.has(T.record.id) || _.set(T.record.id, T);
	return _;
}
function Ct(u, _) {
	return _.get(u)?.type || "unchanged";
}
async function Pt(u) {
	let { context: _, options: T } = u, { depth: E, filter: D, includeStatus: O = !1 } = T || {}, A = O ? qu(_.stagedOperations) : null, j = (u) => D ? D.pick ? D.pick.includes(u) : D.exclude ? !D.exclude.includes(u) : !0 : !0, M = async (u, T) => {
		let D = (await Promise.all(u.children.map(async (u) => {
			let T = [..._.stagedOperations].reverse().find((_) => _.record.id === u.id);
			return T ? T.record : _.databaseInstance[Dn].get({
				id: u.id,
				tagName: u.tagName
			});
		}))).filter((u) => !!u);
		if (E !== void 0 && T >= E && u.tagName !== "Private") {
			let _ = {
				...u,
				treeChildren: [],
				isTreeChildrenRealParent: !1
			};
			return O && A ? {
				..._,
				status: Ct(u.id, A)
			} : _;
		}
		let P = await Promise.all(D.map((u) => M(u, T + 1))), F = [];
		for (let u of P) {
			let _ = u.tagName;
			_ === "Private" ? F.push(...u.treeChildren) : j(_) && F.push(u);
		}
		let I = {
			...u,
			treeChildren: F,
			isTreeChildrenRealParent: F.every((_) => _.parent?.id === u.id)
		};
		return O && A ? {
			...I,
			status: Ct(u.id, A)
		} : I;
	}, P = [..._.stagedOperations].reverse().find((u) => (u.type === "update" || u.type === "create") && u.record.id === _.entrypoint.id);
	return await M(P ? P.record : _.entrypoint, 0);
}
function yu(u) {
	let { childRecord: _, parentRecord: T, stagedOperations: E } = u, D = T.children.find((u) => u.tagName === "Private");
	if (D) {
		let u = [...E].reverse().find((u) => (u.type === "create" || u.type === "update") && u.record.id === D.id && u.record.tagName === "Private")?.record;
		if (u?.attributes.some((u) => u.name === "type" && u.value === _.namespace.prefix) && u) return {
			childRecord: {
				..._,
				parent: {
					id: u.id,
					tagName: "Private"
				}
			},
			privateRecord: {
				...u,
				children: [...u.children, {
					id: _.id,
					tagName: _.tagName
				}]
			},
			updatedParentRecord: T,
			isNewPrivateElement: !1
		};
	}
	let O = {
		id: crypto.randomUUID(),
		tagName: "Private",
		namespace: {
			prefix: bt.default.prefix,
			uri: bt.default.uri
		},
		attributes: [{
			name: "type",
			value: _.namespace.prefix
		}],
		value: "",
		parent: {
			id: T.id,
			tagName: T.tagName
		},
		children: [{
			id: _.id,
			tagName: _.tagName
		}]
	};
	return {
		childRecord: {
			..._,
			parent: {
				id: O.id,
				tagName: "Private"
			}
		},
		privateRecord: O,
		updatedParentRecord: {
			...T,
			children: [...T.children, {
				id: O.id,
				tagName: "Private"
			}]
		},
		isNewPrivateElement: !0
	};
}
function rl(u) {
	return {
		update: T,
		addChild: E,
		goToParent: D,
		getObservable: O,
		getChildren: M,
		getSnapshot: A,
		getContext: j,
		commit: P
	};
	function _(u, _, T) {
		u.stagedOperations.push({
			type: _,
			record: T
		});
	}
	function T(T) {
		return rl(u.then(async (u) => {
			let { attributes: E, value: D } = T, O = [...u.currentFocus.attributes];
			if (E) for (let u of E) {
				let _ = O.findIndex((_) => _.name === u.name), T = {
					name: u.name,
					value: String(u.value),
					...u.namespace && { namespace: u.namespace }
				};
				_ >= 0 ? O[_] = T : O.push(T);
			}
			let A = Jl[u.version].DEFINITION[u.currentFocus.tagName].namespace, j = u.currentFocus.namespace?.prefix === A.prefix, M = {
				...u.currentFocus,
				...E && { attributes: O },
				...D && { value: D },
				...A && !j && { namespace: A }
			};
			return _(u, "update", M), {
				...u,
				currentFocus: M
			};
		}));
	}
	function E(T) {
		let { tagName: E, attributes: D, value: O, setFocus: A } = T;
		return rl(u.then((u) => {
			let T = Jl[u.version].DEFINITION[E].namespace, j = Jl[u.version].DEFINITION[E].attributes.details, M = Object.entries(D).map(([u, _]) => {
				let T = u;
				return {
					name: T,
					value: String(_),
					namespace: j[T]?.namespace
				};
			}), P = {
				id: crypto.randomUUID(),
				tagName: E,
				namespace: T,
				attributes: M,
				value: O ?? "",
				parent: {
					id: u.currentFocus.id,
					tagName: u.currentFocus.tagName
				},
				children: []
			};
			if (P.namespace.prefix !== "scl") {
				let { childRecord: T, privateRecord: E, updatedParentRecord: D, isNewPrivateElement: O } = yu({
					childRecord: P,
					parentRecord: u.currentFocus,
					stagedOperations: u.stagedOperations
				});
				return O && _(u, "create", E), _(u, "create", T), O || _(u, "update", E), _(u, "update", D), A ? {
					...u,
					currentFocus: T
				} : {
					...u,
					currentFocus: D
				};
			} else {
				_(u, "create", P);
				let T = {
					...u.currentFocus,
					children: [...u.currentFocus.children, {
						id: P.id,
						tagName: P.tagName
					}]
				};
				return _(u, "update", T), A ? {
					...u,
					currentFocus: P
				} : {
					...u,
					currentFocus: T
				};
			}
		}));
	}
	function D() {
		return rl(u.then(async (u) => {
			let _ = u.currentFocus.parent;
			if (!_) throw Error("No parent found");
			let T = [...u.stagedOperations].reverse().find((u) => (u.type === "update" || u.type === "create") && u.record.id === _.id), E;
			if (T) E = T.record;
			else {
				let T = await u.databaseInstance[Dn].get({
					id: _.id,
					tagName: _.tagName
				});
				if (!T) throw Error("Parent record not found in database");
				E = T;
			}
			return {
				...u,
				currentFocus: E
			};
		}));
	}
	async function O() {
		let _ = await u;
		return Tt(() => _.databaseInstance[Dn].get(_.currentFocus.id));
	}
	async function A() {
		return await Pt({
			context: await u,
			options: { includeStatus: !0 }
		});
	}
	async function j() {
		return await u;
	}
	async function M(_) {
		let { depth: T, filter: E } = _ || {};
		return await Pt({
			context: await u,
			options: {
				depth: T,
				filter: E
			}
		});
	}
	async function P() {
		let _ = await u;
		try {
			await _.databaseInstance.transaction("rw", _.databaseInstance.tables, async () => {
				for (let u of _.stagedOperations) u.type === "create" ? await _.databaseInstance[Dn].add(u.record) : u.type === "update" ? await _.databaseInstance[Dn].put(u.record) : u.type === "delete" && await _.databaseInstance[Dn].delete(u.record.id);
			});
		} catch (u) {
			throw Error("Transaction failed", { cause: u });
		}
	}
}
async function bu(u) {
	let { databaseInstance: _, tagName: T } = u;
	return Tt(() => _[Dn].where({ tagName: T }).toArray());
}
function Cu(u) {
	let { version: _, databaseInstance: T, tagName: E, id: D } = u;
	return rl(Promise.resolve().then(async () => {
		let u = await T[Dn].get({
			id: D,
			tagName: E
		});
		if (!u) throw Error(`No element ${E} with id ${D} found in database`);
		if (u.tagName !== E) throw Error("Element tagName mismatch");
		return {
			version: _,
			databaseInstance: T,
			entrypoint: u,
			currentFocus: u,
			stagedOperations: []
		};
	}));
}
function Pu(u) {
	let { version: _, databaseInstance: T } = u;
	return rl(Promise.resolve().then(async () => {
		let u = await T[Dn].where({ tagName: "SCL" }).count();
		if (u === 0) throw Error("No root SCL element found in database");
		if (u > 1) throw Error("Multiple root SCL elements found in database, database is corrupted");
		let E = await T[Dn].get({ tagName: "SCL" });
		if (!E) throw Error("No root SCL element found in database");
		return {
			version: _,
			databaseInstance: T,
			entrypoint: E,
			currentFocus: E,
			stagedOperations: []
		};
	}));
}
function Tu(u) {
	let { version: _, databaseInstance: T } = u;
	return {
		fromRoot: () => Pu({
			version: _,
			databaseInstance: T
		}),
		fromElement: (u) => Cu({
			version: _,
			databaseInstance: T,
			...u
		}),
		getObservable: async (u) => await bu({
			databaseInstance: T,
			...u
		})
	};
}
function Gu(u) {
	let { databaseName: _, version: T } = u, E = vu({ databaseName: _ });
	return {
		api: Tu({
			version: T,
			databaseInstance: E
		}),
		database: E,
		standard: Jl[T]
	};
}
const useGlobalStore = defineStore("outline/global", () => {
	let u = ref(""), _ = computed(() => u.value ? Gu({
		databaseName: u.value,
		version: "v2019C1"
	}) : null);
	async function T(_) {
		u.value = _;
	}
	return {
		activeFilename: u,
		sdkInstance: _,
		initApp: T
	};
});
var isClient$1 = typeof window < "u" && typeof document < "u";
typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
var noop$1 = () => {};
function computedAsync(u, _, T) {
	let E;
	E = isRef(T) ? { evaluating: T } : T || {};
	let { lazy: D = !1, flush: O = "pre", evaluating: A = void 0, shallow: j = !0, onError: M = globalThis.reportError ?? noop$1 } = E, P = shallowRef(!D), F = j ? shallowRef(_) : ref(_), I = 0;
	return watchEffect(async (_) => {
		if (!P.value) return;
		I++;
		let T = I, E = !1;
		A && Promise.resolve().then(() => {
			A.value = !0;
		});
		try {
			let D = await u((u) => {
				_(() => {
					A && (A.value = !1), E || u();
				});
			});
			T === I && (F.value = D);
		} catch (u) {
			M(u);
		} finally {
			A && T === I && (A.value = !1), E = !0;
		}
	}, { flush: O }), D ? computed(() => (P.value = !0, F.value)) : F;
}
isClient$1 && window.document, isClient$1 && window.navigator, isClient$1 && window.location;
function serialize(u) {
	return typeof u == "string" ? `'${u}'` : new c$8().serialize(u);
}
var c$8 = /* @__PURE__ */ function() {
	class u {
		#t = /* @__PURE__ */ new Map();
		compare(u, _) {
			let T = typeof u, E = typeof _;
			return T === "string" && E === "string" ? u.localeCompare(_) : T === "number" && E === "number" ? u - _ : String.prototype.localeCompare.call(this.serialize(u, !0), this.serialize(_, !0));
		}
		serialize(u, _) {
			if (u === null) return "null";
			switch (typeof u) {
				case "string": return _ ? u : `'${u}'`;
				case "bigint": return `${u}n`;
				case "object": return this.$object(u);
				case "function": return this.$function(u);
			}
			return String(u);
		}
		serializeObject(u) {
			let _ = Object.prototype.toString.call(u);
			if (_ !== "[object Object]") return this.serializeBuiltInType(_.length < 10 ? `unknown:${_}` : _.slice(8, -1), u);
			let T = u.constructor, E = T === Object || T === void 0 ? "" : T.name;
			if (E !== "" && globalThis[E] === T) return this.serializeBuiltInType(E, u);
			if (typeof u.toJSON == "function") {
				let _ = u.toJSON();
				return E + (typeof _ == "object" && _ ? this.$object(_) : `(${this.serialize(_)})`);
			}
			return this.serializeObjectEntries(E, Object.entries(u));
		}
		serializeBuiltInType(u, _) {
			let T = this["$" + u];
			if (T) return T.call(this, _);
			if (typeof _?.entries == "function") return this.serializeObjectEntries(u, _.entries());
			throw Error(`Cannot serialize ${u}`);
		}
		serializeObjectEntries(u, _) {
			let T = Array.from(_).sort((u, _) => this.compare(u[0], _[0])), E = `${u}{`;
			for (let u = 0; u < T.length; u++) {
				let [_, D] = T[u];
				E += `${this.serialize(_, !0)}:${this.serialize(D)}`, u < T.length - 1 && (E += ",");
			}
			return E + "}";
		}
		$object(u) {
			let _ = this.#t.get(u);
			return _ === void 0 && (this.#t.set(u, `#${this.#t.size}`), _ = this.serializeObject(u), this.#t.set(u, _)), _;
		}
		$function(u) {
			let _ = Function.prototype.toString.call(u);
			return _.slice(-15) === "[native code] }" ? `${u.name || ""}()[native]` : `${u.name}(${u.length})${_.replace(/\s*\n\s*/g, "")}`;
		}
		$Array(u) {
			let _ = "[";
			for (let T = 0; T < u.length; T++) _ += this.serialize(u[T]), T < u.length - 1 && (_ += ",");
			return _ + "]";
		}
		$Date(u) {
			try {
				return `Date(${u.toISOString()})`;
			} catch {
				return "Date(null)";
			}
		}
		$ArrayBuffer(u) {
			return `ArrayBuffer[${new Uint8Array(u).join(",")}]`;
		}
		$Set(u) {
			return `Set${this.$Array(Array.from(u).sort((u, _) => this.compare(u, _)))}`;
		}
		$Map(u) {
			return this.serializeObjectEntries("Map", u.entries());
		}
	}
	for (let _ of [
		"Error",
		"RegExp",
		"URL"
	]) u.prototype["$" + _] = function(u) {
		return `${_}(${u})`;
	};
	for (let _ of [
		"Int8Array",
		"Uint8Array",
		"Uint8ClampedArray",
		"Int16Array",
		"Uint16Array",
		"Int32Array",
		"Uint32Array",
		"Float32Array",
		"Float64Array"
	]) u.prototype["$" + _] = function(u) {
		return `${_}[${u.join(",")}]`;
	};
	for (let _ of ["BigInt64Array", "BigUint64Array"]) u.prototype["$" + _] = function(u) {
		return `${_}[${u.join("n,")}${u.length > 0 ? "n" : ""}]`;
	};
	return u;
}();
function isEqual(u, _) {
	return u === _ || serialize(u) === serialize(_);
}
function findValuesBetween(u, _, T) {
	let E = u.findIndex((u) => isEqual(u, _)), D = u.findIndex((u) => isEqual(u, T));
	if (E === -1 || D === -1) return [];
	let [O, A] = [E, D].sort((u, _) => u - _);
	return u.slice(O, A + 1);
}
function createContext(u, _) {
	let T = typeof u == "string" && !_ ? `${u}Context` : _, E = Symbol(T);
	return [(_) => {
		let T = inject(E, _);
		if (T || T === null) return T;
		throw Error(`Injection \`${E.toString()}\` not found. Component must be used within ${Array.isArray(u) ? `one of the following components: ${u.join(", ")}` : `\`${u}\``}`);
	}, (u) => (provide(E, u), u)];
}
function getActiveElement() {
	let u = document.activeElement;
	if (u == null) return null;
	for (; u != null && u.shadowRoot != null && u.shadowRoot.activeElement != null;) u = u.shadowRoot.activeElement;
	return u;
}
function handleAndDispatchCustomEvent(u, _, T) {
	let E = T.originalEvent.target, D = new CustomEvent(u, {
		bubbles: !1,
		cancelable: !0,
		detail: T
	});
	_ && E.addEventListener(u, _, { once: !0 }), E.dispatchEvent(D);
}
function renderSlotFragments(u) {
	return u ? u.flatMap((u) => u.type === Fragment ? renderSlotFragments(u.children) : [u]) : [];
}
var [injectConfigProviderContext, provideConfigProviderContext] = createContext("ConfigProvider");
function tryOnScopeDispose(u) {
	return getCurrentScope() ? (onScopeDispose(u), !0) : !1;
}
function createEventHook() {
	let u = /* @__PURE__ */ new Set(), _ = (_) => {
		u.delete(_);
	};
	return {
		on: (T) => {
			u.add(T);
			let E = () => _(T);
			return tryOnScopeDispose(E), { off: E };
		},
		off: _,
		trigger: (..._) => Promise.all(Array.from(u).map((u) => u(..._))),
		clear: () => {
			u.clear();
		}
	};
}
var isClient = typeof window < "u" && typeof document < "u";
typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
var isDef = (u) => u !== void 0;
function refAutoReset(u, _ = 1e4) {
	return customRef((T, E) => {
		let D = toValue(u), O, A = () => setTimeout(() => {
			D = toValue(u), E();
		}, toValue(_));
		return tryOnScopeDispose(() => {
			clearTimeout(O);
		}), {
			get() {
				return T(), D;
			},
			set(u) {
				D = u, E(), clearTimeout(O), O = A();
			}
		};
	});
}
isClient && window.document, isClient && window.navigator, isClient && window.location;
function unrefElement(u) {
	let _ = toValue(u);
	return _?.$el ?? _;
}
function cloneFnJSON(u) {
	return JSON.parse(JSON.stringify(u));
}
function useVModel(u, _, T, E = {}) {
	let { clone: D = !1, passive: O = !1, eventName: A, deep: j = !1, defaultValue: M, shouldEmit: P } = E, F = getCurrentInstance(), I = T || F?.emit || (F?.$emit)?.bind(F) || (F?.proxy?.$emit)?.bind(F?.proxy), L = A;
	_ ||= "modelValue", L ||= `update:${_.toString()}`;
	let R = (u) => D ? typeof D == "function" ? D(u) : cloneFnJSON(u) : u, z = () => isDef(u[_]) ? R(u[_]) : M, B = (u) => {
		P ? P(u) && I(L, u) : I(L, u);
	};
	if (O) {
		let T = ref(z()), E = !1;
		return watch(() => u[_], (u) => {
			E || (E = !0, T.value = R(u), nextTick(() => E = !1));
		}), watch(T, (T) => {
			!E && (T !== u[_] || j) && B(T);
		}, { deep: j }), T;
	} else return computed({
		get() {
			return z();
		},
		set(u) {
			B(u);
		}
	});
}
function useDirection(u) {
	let _ = injectConfigProviderContext({ dir: ref("ltr") });
	return computed(() => u?.value || _.dir?.value || "ltr");
}
var count = 0;
function useId(u, _ = "reka") {
	if (u) return u;
	if ("useId" in vue_runtime_esm_bundler_exports) return `${_}-${useId$1?.()}`;
	let T = injectConfigProviderContext({ useId: void 0 });
	return T.useId ? `${_}-${T.useId()}` : `${_}-${++count}`;
}
function useSelectionBehavior(u, _) {
	let T = ref(), E = (E, D) => {
		if (_.multiple && Array.isArray(u.value)) if (_.selectionBehavior === "replace") u.value = [E], T.value = E;
		else {
			let _ = u.value.findIndex((u) => D(u));
			_ === -1 ? u.value = [...u.value, E] : u.value = u.value.filter((u, T) => T !== _);
		}
		else _.selectionBehavior === "replace" ? u.value = { ...E } : !Array.isArray(u.value) && D(u.value) ? u.value = void 0 : u.value = { ...E };
		return u.value;
	};
	function D(E, D, O, A) {
		if (!T?.value || !_.multiple || !Array.isArray(u.value)) return;
		let j = O().filter((u) => u.ref.dataset.disabled !== "").find((u) => u.ref === D)?.value;
		if (!j) return;
		let M = null;
		switch (E) {
			case "prev":
			case "next":
				M = findValuesBetween(A, T.value, j);
				break;
			case "first":
				M = findValuesBetween(A, T.value, A?.[0]);
				break;
			case "last":
				M = findValuesBetween(A, T.value, A?.[A.length - 1]);
				break;
		}
		u.value = M;
	}
	return {
		firstValue: T,
		onSelectItem: E,
		handleMultipleReplace: D
	};
}
function useTypeahead(u) {
	let _ = refAutoReset("", 1e3);
	return {
		search: _,
		handleTypeaheadSearch: (T, E) => {
			if (_.value += T, u) u(T);
			else {
				let u = getActiveElement(), T = E.map((u) => ({
					...u,
					textValue: u.value?.textValue ?? u.ref.textContent?.trim() ?? ""
				})), D = T.find((_) => _.ref === u), O = getNextMatch(T.map((u) => u.textValue), _.value, D?.textValue), A = T.find((u) => u.textValue === O);
				return A && A.ref.focus(), A?.ref;
			}
		},
		resetTypeahead: () => {
			_.value = "";
		}
	};
}
function wrapArray$1(u, _) {
	return u.map((T, E) => u[(_ + E) % u.length]);
}
function getNextMatch(u, _, T) {
	let E = _.length > 1 && Array.from(_).every((u) => u === _[0]) ? _[0] : _, D = T ? u.indexOf(T) : -1, O = wrapArray$1(u, Math.max(D, 0));
	E.length === 1 && (O = O.filter((u) => u !== T));
	let A = O.find((u) => u.toLowerCase().startsWith(E.toLowerCase()));
	return A === T ? void 0 : A;
}
var Slot = /* @__PURE__ */ defineComponent({
	name: "PrimitiveSlot",
	inheritAttrs: !1,
	setup(u, { attrs: _, slots: T }) {
		return () => {
			if (!T.default) return null;
			let u = renderSlotFragments(T.default()), E = u.findIndex((u) => u.type !== Comment);
			if (E === -1) return u;
			let D = u[E];
			delete D.props?.ref;
			let O = D.props ? mergeProps(_, D.props) : _, A = cloneVNode({
				...D,
				props: {}
			}, O);
			return u.length === 1 ? A : (u[E] = A, u);
		};
	}
}), SELF_CLOSING_TAGS = [
	"area",
	"img",
	"input"
], Primitive = /* @__PURE__ */ defineComponent({
	name: "Primitive",
	inheritAttrs: !1,
	props: {
		asChild: {
			type: Boolean,
			default: !1
		},
		as: {
			type: [String, Object],
			default: "div"
		}
	},
	setup(u, { attrs: _, slots: T }) {
		let E = u.asChild ? "template" : u.as;
		return typeof E == "string" && SELF_CLOSING_TAGS.includes(E) ? () => h$5(E, _) : E === "template" ? () => h$5(Slot, _, { default: T.default }) : () => h$5(u.as, _, { default: T.default });
	}
});
function usePrimitiveElement() {
	let u = ref();
	return {
		primitiveElement: u,
		currentElement: computed(() => ["#text", "#comment"].includes(u.value?.$el.nodeName) ? u.value?.$el.nextElementSibling : unrefElement(u))
	};
}
var ITEM_DATA_ATTR = "data-reka-collection-item";
function useCollection(u = {}) {
	let { key: _ = "", isProvider: T = !1 } = u, E = `${_}CollectionProvider`, D;
	if (T) {
		let u = ref(/* @__PURE__ */ new Map());
		D = {
			collectionRef: ref(),
			itemMap: u
		}, provide(E, D);
	} else D = inject(E);
	let O = (u = !1) => {
		let _ = D.collectionRef.value;
		if (!_) return [];
		let T = Array.from(_.querySelectorAll(`[${ITEM_DATA_ATTR}]`)), E = Array.from(D.itemMap.value.values()).sort((u, _) => T.indexOf(u.ref) - T.indexOf(_.ref));
		return u ? E : E.filter((u) => u.ref.dataset.disabled !== "");
	}, A = /* @__PURE__ */ defineComponent({
		name: "CollectionSlot",
		setup(u, { slots: _ }) {
			let { primitiveElement: T, currentElement: E } = usePrimitiveElement();
			return watch(E, () => {
				D.collectionRef.value = E.value;
			}), () => h$5(Slot, { ref: T }, _);
		}
	}), j = /* @__PURE__ */ defineComponent({
		name: "CollectionItem",
		inheritAttrs: !1,
		props: { value: { validator: () => !0 } },
		setup(u, { slots: _, attrs: T }) {
			let { primitiveElement: E, currentElement: O } = usePrimitiveElement();
			return watchEffect((_) => {
				if (O.value) {
					let T = markRaw(O.value);
					D.itemMap.value.set(T, {
						ref: O.value,
						value: u.value
					}), _(() => D.itemMap.value.delete(T));
				}
			}), () => h$5(Slot, {
				...T,
				[ITEM_DATA_ATTR]: "",
				ref: E
			}, _);
		}
	});
	return {
		getItems: O,
		reactiveItems: computed(() => Array.from(D.itemMap.value.values())),
		itemMapSize: computed(() => D.itemMap.value.size),
		CollectionSlot: A,
		CollectionItem: j
	};
}
var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus", EVENT_OPTIONS = {
	bubbles: !1,
	cancelable: !0
}, MAP_KEY_TO_FOCUS_INTENT = {
	ArrowLeft: "prev",
	ArrowUp: "prev",
	ArrowRight: "next",
	ArrowDown: "next",
	PageUp: "first",
	Home: "first",
	PageDown: "last",
	End: "last"
};
function getDirectionAwareKey(u, _) {
	return _ === "rtl" ? u === "ArrowLeft" ? "ArrowRight" : u === "ArrowRight" ? "ArrowLeft" : u : u;
}
function getFocusIntent(u, _, T) {
	let E = getDirectionAwareKey(u.key, T);
	if (!(_ === "vertical" && ["ArrowLeft", "ArrowRight"].includes(E)) && !(_ === "horizontal" && ["ArrowUp", "ArrowDown"].includes(E))) return MAP_KEY_TO_FOCUS_INTENT[E];
}
function focusFirst(u, _ = !1) {
	let T = getActiveElement();
	for (let E of u) if (E === T || (E.focus({ preventScroll: _ }), getActiveElement() !== T)) return;
}
function wrapArray(u, _) {
	return u.map((T, E) => u[(_ + E) % u.length]);
}
var [injectRovingFocusGroupContext, provideRovingFocusGroupContext] = createContext("RovingFocusGroup"), RovingFocusGroup_default = /* @__PURE__ */ defineComponent({
	__name: "RovingFocusGroup",
	props: {
		orientation: {
			type: String,
			required: !1,
			default: void 0
		},
		dir: {
			type: String,
			required: !1
		},
		loop: {
			type: Boolean,
			required: !1,
			default: !1
		},
		currentTabStopId: {
			type: [String, null],
			required: !1
		},
		defaultCurrentTabStopId: {
			type: String,
			required: !1
		},
		preventScrollOnEntryFocus: {
			type: Boolean,
			required: !1,
			default: !1
		},
		asChild: {
			type: Boolean,
			required: !1
		},
		as: {
			type: null,
			required: !1
		}
	},
	emits: ["entryFocus", "update:currentTabStopId"],
	setup(u, { expose: _, emit: T }) {
		let E = u, D = T, { loop: O, orientation: A, dir: j } = toRefs(E), M = useDirection(j), P = useVModel(E, "currentTabStopId", D, {
			defaultValue: E.defaultCurrentTabStopId,
			passive: E.currentTabStopId === void 0
		}), F = ref(!1), I = ref(!1), L = ref(0), { getItems: R, CollectionSlot: z } = useCollection({ isProvider: !0 });
		function B(u) {
			let _ = !I.value;
			if (u.currentTarget && u.target === u.currentTarget && _ && !F.value) {
				let _ = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);
				if (u.currentTarget.dispatchEvent(_), D("entryFocus", _), !_.defaultPrevented) {
					let u = R().map((u) => u.ref).filter((u) => u.dataset.disabled !== "");
					focusFirst([
						u.find((u) => u.getAttribute("data-active") === ""),
						u.find((u) => u.getAttribute("data-highlighted") === ""),
						u.find((u) => u.id === P.value),
						...u
					].filter(Boolean), E.preventScrollOnEntryFocus);
				}
			}
			I.value = !1;
		}
		function V() {
			setTimeout(() => {
				I.value = !1;
			}, 1);
		}
		return _({ getItems: R }), provideRovingFocusGroupContext({
			loop: O,
			dir: M,
			orientation: A,
			currentTabStopId: P,
			onItemFocus: (u) => {
				P.value = u;
			},
			onItemShiftTab: () => {
				F.value = !0;
			},
			onFocusableItemAdd: () => {
				L.value++;
			},
			onFocusableItemRemove: () => {
				L.value--;
			}
		}), (u, _) => (openBlock(), createBlock(unref(z), null, {
			default: withCtx(() => [createVNode(unref(Primitive), {
				tabindex: F.value || L.value === 0 ? -1 : 0,
				"data-orientation": unref(A),
				as: u.as,
				"as-child": u.asChild,
				dir: unref(M),
				style: { outline: "none" },
				onMousedown: _[0] ||= (u) => I.value = !0,
				onMouseup: V,
				onFocus: B,
				onBlur: _[1] ||= (u) => F.value = !1
			}, {
				default: withCtx(() => [renderSlot(u.$slots, "default")]),
				_: 3
			}, 8, [
				"tabindex",
				"data-orientation",
				"as",
				"as-child",
				"dir"
			])]),
			_: 3
		}));
	}
}), RovingFocusItem_default = /* @__PURE__ */ defineComponent({
	__name: "RovingFocusItem",
	props: {
		tabStopId: {
			type: String,
			required: !1
		},
		focusable: {
			type: Boolean,
			required: !1,
			default: !0
		},
		active: {
			type: Boolean,
			required: !1
		},
		allowShiftKey: {
			type: Boolean,
			required: !1
		},
		asChild: {
			type: Boolean,
			required: !1
		},
		as: {
			type: null,
			required: !1,
			default: "span"
		}
	},
	setup(u) {
		let _ = u, T = injectRovingFocusGroupContext(), E = useId(), D = computed(() => _.tabStopId || E), O = computed(() => T.currentTabStopId.value === D.value), { getItems: A, CollectionItem: j } = useCollection();
		onMounted(() => {
			_.focusable && T.onFocusableItemAdd();
		}), onUnmounted(() => {
			_.focusable && T.onFocusableItemRemove();
		});
		function M(u) {
			if (u.key === "Tab" && u.shiftKey) {
				T.onItemShiftTab();
				return;
			}
			if (u.target !== u.currentTarget) return;
			let E = getFocusIntent(u, T.orientation.value, T.dir.value);
			if (E !== void 0) {
				if (u.metaKey || u.ctrlKey || u.altKey || !_.allowShiftKey && u.shiftKey) return;
				u.preventDefault();
				let D = [...A().map((u) => u.ref).filter((u) => u.dataset.disabled !== "")];
				if (E === "last") D.reverse();
				else if (E === "prev" || E === "next") {
					E === "prev" && D.reverse();
					let _ = D.indexOf(u.currentTarget);
					D = T.loop.value ? wrapArray(D, _ + 1) : D.slice(_ + 1);
				}
				nextTick(() => focusFirst(D));
			}
		}
		return (u, _) => (openBlock(), createBlock(unref(j), null, {
			default: withCtx(() => [createVNode(unref(Primitive), {
				tabindex: O.value ? 0 : -1,
				"data-orientation": unref(T).orientation.value,
				"data-active": u.active ? "" : void 0,
				"data-disabled": u.focusable ? void 0 : "",
				as: u.as,
				"as-child": u.asChild,
				onMousedown: _[0] ||= (_) => {
					u.focusable ? unref(T).onItemFocus(D.value) : _.preventDefault();
				},
				onFocus: _[1] ||= (u) => unref(T).onItemFocus(D.value),
				onKeydown: M
			}, {
				default: withCtx(() => [renderSlot(u.$slots, "default")]),
				_: 3
			}, 8, [
				"tabindex",
				"data-orientation",
				"data-active",
				"data-disabled",
				"as",
				"as-child"
			])]),
			_: 3
		}));
	}
});
function flatten(u) {
	return u.reduce((u, _) => (u.push(_), _.children && u.push(...flatten(_.children)), u), []);
}
var [injectTreeRootContext, provideTreeRootContext] = createContext("TreeRoot"), TreeRoot_default = /* @__PURE__ */ defineComponent({
	__name: "TreeRoot",
	props: {
		modelValue: {
			type: null,
			required: !1
		},
		defaultValue: {
			type: null,
			required: !1
		},
		items: {
			type: Array,
			required: !1
		},
		expanded: {
			type: Array,
			required: !1
		},
		defaultExpanded: {
			type: Array,
			required: !1
		},
		getKey: {
			type: Function,
			required: !0
		},
		getChildren: {
			type: Function,
			required: !1,
			default: (u) => u.children
		},
		selectionBehavior: {
			type: String,
			required: !1,
			default: "toggle"
		},
		multiple: {
			type: Boolean,
			required: !1,
			skipCheck: !0
		},
		dir: {
			type: String,
			required: !1
		},
		disabled: {
			type: Boolean,
			required: !1
		},
		propagateSelect: {
			type: Boolean,
			required: !1
		},
		bubbleSelect: {
			type: Boolean,
			required: !1
		},
		asChild: {
			type: Boolean,
			required: !1
		},
		as: {
			type: null,
			required: !1,
			default: "ul"
		}
	},
	emits: ["update:modelValue", "update:expanded"],
	setup(u, { emit: _ }) {
		let T = u, E = _, { items: D, multiple: O, disabled: A, propagateSelect: j, dir: M, bubbleSelect: P } = toRefs(T), { handleTypeaheadSearch: F } = useTypeahead(), I = useDirection(M), L = ref(), R = ref(!1), z = createEventHook(), B = useVModel(T, "modelValue", E, {
			defaultValue: T.defaultValue ?? (O.value ? [] : void 0),
			passive: !0,
			deep: !0
		}), V = useVModel(T, "expanded", E, {
			defaultValue: T.defaultExpanded ?? [],
			passive: T.expanded === void 0,
			deep: !0
		}), { onSelectItem: H, handleMultipleReplace: Zd } = useSelectionBehavior(B, T), U = computed(() => O.value && Array.isArray(B.value) ? B.value.map((u) => T.getKey(u)) : [T.getKey(B.value ?? {})]);
		function G(u, _ = 1, E) {
			return u.reduce((D, O, A) => {
				let j = T.getKey(O), M = T.getChildren(O), P = V.value.includes(j), F = {
					_id: j,
					value: O,
					index: A,
					level: _,
					parentItem: E,
					hasChildren: !!M,
					bind: {
						value: O,
						level: _,
						"aria-setsize": u.length,
						"aria-posinset": A + 1
					}
				};
				return D.push(F), M && P && D.push(...G(M, _ + 1, O)), D;
			}, []);
		}
		let K = computed(() => {
			let u = T.items;
			return V.value.map((u) => u), G(u ?? []);
		});
		function Qd(u) {
			if (R.value) z.trigger(u);
			else {
				let _ = L.value?.getItems() ?? [];
				F(u.key, _);
			}
		}
		function $d(u) {
			if (R.value) return;
			let _ = MAP_KEY_TO_FOCUS_INTENT[u.key];
			nextTick(() => {
				Zd(_, getActiveElement(), L.value?.getItems, K.value.map((u) => u.value));
			});
		}
		function ef(u) {
			if (u.parentItem != null && Array.isArray(B.value) && T.multiple) {
				let _ = K.value.find((_) => u.parentItem != null && T.getKey(_.value) === T.getKey(u.parentItem));
				_ != null && (T.getChildren(_.value)?.every((u) => B.value.find((_) => T.getKey(_) === T.getKey(u))) ? B.value = [...B.value, _.value] : B.value = B.value.filter((u) => T.getKey(u) !== T.getKey(_.value)), ef(_));
			}
		}
		return provideTreeRootContext({
			modelValue: B,
			selectedKeys: U,
			onSelect: (u) => {
				let _ = (_) => T.getKey(_ ?? {}) === T.getKey(u), E = T.multiple && Array.isArray(B.value) ? B.value?.findIndex(_) !== -1 : void 0;
				if (H(u, _), T.bubbleSelect && T.multiple && Array.isArray(B.value)) {
					let _ = K.value.find((_) => T.getKey(_.value) === T.getKey(u));
					_ != null && ef(_);
				}
				if (T.propagateSelect && T.multiple && Array.isArray(B.value)) {
					let _ = flatten(T.getChildren(u) ?? []);
					E ? B.value = [...B.value].filter((u) => !_.some((_) => T.getKey(u ?? {}) === T.getKey(_))) : B.value = [...B.value, ..._];
				}
			},
			expanded: V,
			onToggle(u) {
				if (!(u && T.getChildren(u))) return;
				let _ = T.getKey(u) ?? u;
				V.value.includes(_) ? V.value = V.value.filter((u) => u !== _) : V.value.push(_);
			},
			getKey: T.getKey,
			getChildren: T.getChildren,
			items: D,
			expandedItems: K,
			disabled: A,
			multiple: O,
			dir: I,
			propagateSelect: j,
			bubbleSelect: P,
			isVirtual: R,
			virtualKeydownHook: z,
			handleMultipleReplace: Zd
		}), (u, _) => (openBlock(), createBlock(unref(RovingFocusGroup_default), {
			ref_key: "rovingFocusGroupRef",
			ref: L,
			"as-child": "",
			orientation: "vertical",
			dir: unref(I)
		}, {
			default: withCtx(() => [createVNode(unref(Primitive), {
				role: "tree",
				as: u.as,
				"as-child": u.asChild,
				"aria-multiselectable": unref(O) ? !0 : void 0,
				onKeydown: [Qd, withKeys(withModifiers($d, ["shift"]), ["up", "down"])]
			}, {
				default: withCtx(() => [renderSlot(u.$slots, "default", {
					flattenItems: K.value,
					modelValue: unref(B),
					expanded: unref(V)
				})]),
				_: 3
			}, 8, [
				"as",
				"as-child",
				"aria-multiselectable",
				"onKeydown"
			])]),
			_: 3
		}, 8, ["dir"]));
	}
}), TREE_SELECT = "tree.select", TREE_TOGGLE = "tree.toggle", TreeItem_default = /* @__PURE__ */ defineComponent({
	inheritAttrs: !1,
	__name: "TreeItem",
	props: {
		value: {
			type: null,
			required: !0
		},
		level: {
			type: Number,
			required: !0
		},
		asChild: {
			type: Boolean,
			required: !1
		},
		as: {
			type: null,
			required: !1,
			default: "li"
		}
	},
	emits: ["select", "toggle"],
	setup(u, { expose: _, emit: T }) {
		let E = u, D = T, O = injectTreeRootContext(), { getItems: A } = useCollection(), j = computed(() => !!O.getChildren(E.value)), M = computed(() => {
			let u = O.getKey(E.value);
			return O.expanded.value.includes(u);
		}), P = computed(() => {
			let u = O.getKey(E.value);
			return O.selectedKeys.value.includes(u);
		}), F = computed(() => {
			if (O.bubbleSelect.value && j.value && Array.isArray(O.modelValue.value)) {
				let u = flatten(O.getChildren(E.value) || []);
				return u.some((u) => O.modelValue.value.find((_) => O.getKey(_) === O.getKey(u))) && !u.every((u) => O.modelValue.value.find((_) => O.getKey(_) === O.getKey(u)));
			} else if (O.propagateSelect.value && P.value && j.value && Array.isArray(O.modelValue.value)) return !flatten(O.getChildren(E.value) || []).every((u) => O.modelValue.value.find((_) => O.getKey(_) === O.getKey(u)));
			else return;
		});
		function I(u) {
			if (j.value) if (M.value) {
				let u = A().map((u) => u.ref), _ = getActiveElement(), T = u.indexOf(_), D = [...u].slice(T).find((u) => Number(u.getAttribute("data-indent")) === E.level + 1);
				D && D.focus();
			} else V(u);
		}
		function L(u) {
			if (M.value) V(u);
			else {
				let u = A().map((u) => u.ref), _ = getActiveElement(), T = u.indexOf(_), D = [...u].slice(0, T).reverse().find((u) => Number(u.getAttribute("data-indent")) === E.level - 1);
				D && D.focus();
			}
		}
		async function R(u) {
			D("select", u), !u?.defaultPrevented && O.onSelect(E.value);
		}
		async function z(u) {
			D("toggle", u), !u?.defaultPrevented && O.onToggle(E.value);
		}
		async function B(u) {
			u && handleAndDispatchCustomEvent(TREE_SELECT, R, {
				originalEvent: u,
				value: E.value,
				isExpanded: M.value,
				isSelected: P.value
			});
		}
		async function V(u) {
			u && handleAndDispatchCustomEvent(TREE_TOGGLE, z, {
				originalEvent: u,
				value: E.value,
				isExpanded: M.value,
				isSelected: P.value
			});
		}
		return _({
			isExpanded: M,
			isSelected: P,
			isIndeterminate: F,
			handleToggle: () => O.onToggle(E.value),
			handleSelect: () => O.onSelect(E.value)
		}), (u, _) => (openBlock(), createBlock(unref(RovingFocusItem_default), {
			"as-child": "",
			value: u.value,
			"allow-shift-key": ""
		}, {
			default: withCtx(() => [createVNode(unref(Primitive), mergeProps(u.$attrs, {
				role: "treeitem",
				as: u.as,
				"as-child": u.asChild,
				"aria-selected": P.value,
				"aria-expanded": j.value ? M.value : void 0,
				"aria-level": u.level,
				"data-indent": u.level,
				"data-selected": P.value ? "" : void 0,
				"data-expanded": M.value ? "" : void 0,
				onKeydown: [
					withKeys(withModifiers(B, ["self", "prevent"]), ["enter", "space"]),
					_[0] ||= withKeys(withModifiers((u) => unref(O).dir.value === "ltr" ? I(u) : L(u), ["prevent"]), ["right"]),
					_[1] ||= withKeys(withModifiers((u) => unref(O).dir.value === "ltr" ? L(u) : I(u), ["prevent"]), ["left"])
				],
				onClick: _[2] ||= withModifiers((u) => {
					B(u), V(u);
				}, ["stop"])
			}), {
				default: withCtx(() => [renderSlot(u.$slots, "default", {
					isExpanded: M.value,
					isSelected: P.value,
					isIndeterminate: F.value,
					handleSelect: () => unref(O).onSelect(u.value),
					handleToggle: () => unref(O).onToggle(u.value)
				})]),
				_: 3
			}, 16, [
				"as",
				"as-child",
				"aria-selected",
				"aria-expanded",
				"aria-level",
				"data-indent",
				"data-selected",
				"data-expanded",
				"onKeydown"
			])]),
			_: 3
		}, 8, ["value"]));
	}
});
function g(u) {
	return getCurrentScope() ? (onScopeDispose(u), !0) : !1;
}
var a$14 = typeof window < "u" && typeof document < "u";
typeof WorkerGlobalScope < "u" && globalThis instanceof WorkerGlobalScope;
var f = Object.prototype.toString, y$2 = (u) => f.call(u) === "[object Object]", l$1 = () => {}, m = /* @__PURE__ */ w();
function w() {
	return a$14 && window?.navigator?.userAgent && (/iP(?:ad|hone|od)/.test(window.navigator.userAgent) || window?.navigator?.maxTouchPoints > 2 && /iPad|Macintosh/.test(window?.navigator.userAgent));
}
function S(...u) {
	if (u.length !== 1) return toRef(...u);
	let _ = u[0];
	return typeof _ == "function" ? readonly(customRef(() => ({
		get: _,
		set: l$1
	}))) : ref(_);
}
function b(u) {
	return Array.isArray(u) ? u : [u];
}
function v(u, _, T) {
	return watch(u, _, {
		...T,
		immediate: !0
	});
}
var N = a$14 ? window : void 0;
function y$3(u) {
	let _ = toValue(u);
	return _?.$el ?? _;
}
function k$1(...u) {
	let _ = [], T = () => {
		_.forEach((u) => u()), _.length = 0;
	}, E = (u, _, T, E) => (u.addEventListener(_, T, E), () => u.removeEventListener(_, T, E)), D = computed(() => {
		let _ = b(toValue(u[0])).filter((u) => u != null);
		return _.every((u) => typeof u != "string") ? _ : void 0;
	}), O = v(() => [
		D.value?.map((u) => y$3(u)) ?? [N].filter((u) => u != null),
		b(toValue(D.value ? u[1] : u[0])),
		b(unref(D.value ? u[2] : u[1])),
		toValue(D.value ? u[3] : u[2])
	], ([u, D, O, A]) => {
		if (T(), !u?.length || !D?.length || !O?.length) return;
		let j = y$2(A) ? { ...A } : A;
		_.push(...u.flatMap((u) => D.flatMap((_) => O.map((T) => E(u, _, T, j)))));
	}, { flush: "post" });
	return g(T), () => {
		O(), T();
	};
}
function W(u) {
	return typeof Window < "u" && u instanceof Window ? u.document.documentElement : typeof Document < "u" && u instanceof Document ? u.documentElement : u;
}
function Y(u) {
	let _ = window.getComputedStyle(u);
	if (_.overflowX === "scroll" || _.overflowY === "scroll" || _.overflowX === "auto" && u.clientWidth < u.scrollWidth || _.overflowY === "auto" && u.clientHeight < u.scrollHeight) return !0;
	{
		let _ = u.parentNode;
		return !_ || _.tagName === "BODY" ? !1 : Y(_);
	}
}
function X(u) {
	let _ = u || window.event, T = _.target;
	return Y(T) ? !1 : _.touches.length > 1 ? !0 : (_.preventDefault && _.preventDefault(), !1);
}
var C$1 = /* @__PURE__ */ new WeakMap();
function q(u, _ = !1) {
	let T = shallowRef(_), E = null, D = "";
	watch(S(u), (u) => {
		let _ = W(toValue(u));
		if (_) {
			let u = _;
			if (C$1.get(u) || C$1.set(u, u.style.overflow), u.style.overflow !== "hidden" && (D = u.style.overflow), u.style.overflow === "hidden") return T.value = !0;
			if (T.value) return u.style.overflow = "hidden";
		}
	}, { immediate: !0 });
	let O = () => {
		let _ = W(toValue(u));
		!_ || T.value || (m && (E = k$1(_, "touchmove", (u) => {
			X(u);
		}, { passive: !1 })), _.style.overflow = "hidden", T.value = !0);
	}, A = () => {
		let _ = W(toValue(u));
		!_ || !T.value || (m && E?.(), _.style.overflow = D, C$1.delete(_), T.value = !1);
	};
	return g(A), computed({
		get() {
			return T.value;
		},
		set(u) {
			u ? O() : A();
		}
	});
}
function x$2() {
	let u = !1, _ = shallowRef(!1);
	return (T, E) => {
		if (_.value = E.value, u) return;
		u = !0;
		let D = q(T, E.value);
		watch(_, (u) => D.value = u);
	};
}
x$2();
/**
* @license lucide-vue-next v0.545.0 - ISC
*
* This source code is licensed under the ISC license.
* See the LICENSE file in the root directory of this source tree.
*/
var a$13 = (u) => u.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase(), s = (u) => u.replace(/^([A-Z])|[\s-_]+(\w)/g, (u, _, T) => T ? T.toUpperCase() : _.toLowerCase()), n = (u) => {
	let _ = s(u);
	return _.charAt(0).toUpperCase() + _.slice(1);
}, c$7 = (...u) => u.filter((u, _, T) => !!u && u.trim() !== "" && T.indexOf(u) === _).join(" ").trim(), C = (u) => u === "", t$20 = {
	xmlns: "http://www.w3.org/2000/svg",
	width: 24,
	height: 24,
	viewBox: "0 0 24 24",
	fill: "none",
	stroke: "currentColor",
	"stroke-width": 2,
	"stroke-linecap": "round",
	"stroke-linejoin": "round"
}, $ = ({ name: u, iconNode: _, absoluteStrokeWidth: T, "absolute-stroke-width": E, strokeWidth: D, "stroke-width": O, size: A = t$20.width, color: j = t$20.stroke,...M }, { slots: P }) => h$5("svg", {
	...t$20,
	...M,
	width: A,
	height: A,
	stroke: j,
	"stroke-width": C(T) || C(E) || T === !0 || E === !0 ? Number(D || O || t$20["stroke-width"]) * 24 / Number(A) : D || O || t$20["stroke-width"],
	class: c$7("lucide", M.class, ...u ? [`lucide-${a$13(n(u))}-icon`, `lucide-${a$13(u)}`] : ["lucide-icon"])
}, [..._.map((u) => h$5(...u)), ...P.default ? [P.default()] : []]), i$1 = (u, _) => (T, { slots: E, attrs: D }) => h$5($, {
	...D,
	...T,
	iconNode: _,
	name: u
}, E), e = i$1("activity", [["path", {
	d: "M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2",
	key: "169zse"
}]]), t = i$1("zap", [["path", {
	d: "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z",
	key: "1xq2db"
}]]), a = i$1("arrow-right", [["path", {
	d: "M5 12h14",
	key: "1ays0h"
}], ["path", {
	d: "m12 5 7 7-7 7",
	key: "xquz4c"
}]]), y = i$1("variable", [
	["path", {
		d: "M8 21s-4-3-4-9 4-9 4-9",
		key: "uto9ud"
	}],
	["path", {
		d: "M16 3s4 3 4 9-4 9-4 9",
		key: "4w2vsq"
	}],
	["line", {
		x1: "15",
		x2: "9",
		y1: "9",
		y2: "15",
		key: "f7djnv"
	}],
	["line", {
		x1: "9",
		x2: "15",
		y1: "9",
		y2: "15",
		key: "1shsy8"
	}]
]), r = i$1("square-pen", [["path", {
	d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7",
	key: "1m0v6g"
}], ["path", {
	d: "M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z",
	key: "ohrbg2"
}]]), x = i$1("hash", [
	["line", {
		x1: "4",
		x2: "20",
		y1: "9",
		y2: "9",
		key: "4lhtct"
	}],
	["line", {
		x1: "4",
		x2: "20",
		y1: "15",
		y2: "15",
		key: "vyu0kd"
	}],
	["line", {
		x1: "10",
		x2: "8",
		y1: "3",
		y2: "21",
		key: "1ggp8o"
	}],
	["line", {
		x1: "16",
		x2: "14",
		y1: "3",
		y2: "21",
		key: "weycgp"
	}]
]), a$1 = i$1("rotate-cw", [["path", {
	d: "M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8",
	key: "1p45f6"
}], ["path", {
	d: "M21 3v5h-5",
	key: "1q7to0"
}]]), i = i$1("timer", [
	["line", {
		x1: "10",
		x2: "14",
		y1: "2",
		y2: "2",
		key: "14vaq8"
	}],
	["line", {
		x1: "12",
		x2: "15",
		y1: "14",
		y2: "11",
		key: "17fdiu"
	}],
	["circle", {
		cx: "12",
		cy: "14",
		r: "8",
		key: "1e1u0o"
	}]
]), o = i$1("clock", [["path", {
	d: "M12 6v6l4 2",
	key: "mmk7yg"
}], ["circle", {
	cx: "12",
	cy: "12",
	r: "10",
	key: "1mglay"
}]]), t$1 = i$1("type", [
	["path", {
		d: "M12 4v16",
		key: "1654pz"
	}],
	["path", {
		d: "M4 7V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2",
		key: "e0r10z"
	}],
	["path", {
		d: "M9 20h6",
		key: "s66wpe"
	}]
]), a$2 = i$1("terminal", [["path", {
	d: "M12 19h8",
	key: "baeox8"
}], ["path", {
	d: "m4 17 6-6-6-6",
	key: "1yngyt"
}]]), r$1 = i$1("toggle-right", [["circle", {
	cx: "15",
	cy: "12",
	r: "3",
	key: "1afu0r"
}], ["rect", {
	width: "20",
	height: "14",
	x: "2",
	y: "5",
	rx: "7",
	key: "g7kal2"
}]]), r$2 = i$1("users", [
	["path", {
		d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
		key: "1yyitq"
	}],
	["path", {
		d: "M16 3.128a4 4 0 0 1 0 7.744",
		key: "16gr8j"
	}],
	["path", {
		d: "M22 21v-2a4 4 0 0 0-3-3.87",
		key: "kshegd"
	}],
	["circle", {
		cx: "9",
		cy: "7",
		r: "4",
		key: "nufk8"
	}]
]), e$1 = i$1("building", [
	["path", {
		d: "M12 10h.01",
		key: "1nrarc"
	}],
	["path", {
		d: "M12 14h.01",
		key: "1etili"
	}],
	["path", {
		d: "M12 6h.01",
		key: "1vi96p"
	}],
	["path", {
		d: "M16 10h.01",
		key: "1m94wz"
	}],
	["path", {
		d: "M16 14h.01",
		key: "1gbofw"
	}],
	["path", {
		d: "M16 6h.01",
		key: "1x0f13"
	}],
	["path", {
		d: "M8 10h.01",
		key: "19clt8"
	}],
	["path", {
		d: "M8 14h.01",
		key: "6423bh"
	}],
	["path", {
		d: "M8 6h.01",
		key: "1dz90k"
	}],
	["path", {
		d: "M9 22v-3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3",
		key: "cabbwy"
	}],
	["rect", {
		x: "4",
		y: "2",
		width: "16",
		height: "20",
		rx: "2",
		key: "1uxh74"
	}]
]), r$3 = i$1("user-check", [
	["path", {
		d: "m16 11 2 2 4-4",
		key: "9rsbq5"
	}],
	["path", {
		d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2",
		key: "1yyitq"
	}],
	["circle", {
		cx: "9",
		cy: "7",
		r: "4",
		key: "nufk8"
	}]
]), r$4 = i$1("user", [["path", {
	d: "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2",
	key: "975kel"
}], ["circle", {
	cx: "12",
	cy: "7",
	r: "4",
	key: "17ys0d"
}]]), h = i$1("network", [
	["rect", {
		x: "16",
		y: "16",
		width: "6",
		height: "6",
		rx: "1",
		key: "4q2zg0"
	}],
	["rect", {
		x: "2",
		y: "16",
		width: "6",
		height: "6",
		rx: "1",
		key: "8cvhb9"
	}],
	["rect", {
		x: "9",
		y: "2",
		width: "6",
		height: "6",
		rx: "1",
		key: "1egb70"
	}],
	["path", {
		d: "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3",
		key: "1jsf9p"
	}],
	["path", {
		d: "M12 12V8",
		key: "2874zd"
	}]
]), a$3 = i$1("file-text", [
	["path", {
		d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",
		key: "1rqfz7"
	}],
	["path", {
		d: "M14 2v4a2 2 0 0 0 2 2h4",
		key: "tnqrlb"
	}],
	["path", {
		d: "M10 9H8",
		key: "b1mrlr"
	}],
	["path", {
		d: "M16 13H8",
		key: "t4e002"
	}],
	["path", {
		d: "M16 17H8",
		key: "z1uh3a"
	}]
]), r$5 = i$1("square", [["rect", {
	width: "18",
	height: "18",
	x: "3",
	y: "3",
	rx: "2",
	key: "afitv7"
}]]), e$2 = i$1("cpu", [
	["path", {
		d: "M12 20v2",
		key: "1lh1kg"
	}],
	["path", {
		d: "M12 2v2",
		key: "tus03m"
	}],
	["path", {
		d: "M17 20v2",
		key: "1rnc9c"
	}],
	["path", {
		d: "M17 2v2",
		key: "11trls"
	}],
	["path", {
		d: "M2 12h2",
		key: "1t8f8n"
	}],
	["path", {
		d: "M2 17h2",
		key: "7oei6x"
	}],
	["path", {
		d: "M2 7h2",
		key: "asdhe0"
	}],
	["path", {
		d: "M20 12h2",
		key: "1q8mjw"
	}],
	["path", {
		d: "M20 17h2",
		key: "1fpfkl"
	}],
	["path", {
		d: "M20 7h2",
		key: "1o8tra"
	}],
	["path", {
		d: "M7 20v2",
		key: "4gnj0m"
	}],
	["path", {
		d: "M7 2v2",
		key: "1i4yhu"
	}],
	["rect", {
		x: "4",
		y: "4",
		width: "16",
		height: "16",
		rx: "2",
		key: "1vbyd7"
	}],
	["rect", {
		x: "8",
		y: "8",
		width: "8",
		height: "8",
		rx: "1",
		key: "z9xiuo"
	}]
]), t$2 = i$1("circle-check-big", [["path", {
	d: "M21.801 10A10 10 0 1 1 17 3.335",
	key: "yps3ct"
}], ["path", {
	d: "m9 11 3 3L22 4",
	key: "1pflzl"
}]]), e$3 = i$1("tag", [["path", {
	d: "M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z",
	key: "vktsd0"
}], ["circle", {
	cx: "7.5",
	cy: "7.5",
	r: ".5",
	fill: "currentColor",
	key: "kqv944"
}]]), d = i$1("files", [
	["path", {
		d: "M15 2a2 2 0 0 1 1.414.586l4 4A2 2 0 0 1 21 8v7a2 2 0 0 1-2 2h-8a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z",
		key: "1vo8kb"
	}],
	["path", {
		d: "M15 2v4a2 2 0 0 0 2 2h4",
		key: "sud9ri"
	}],
	["path", {
		d: "M5 7a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h8a2 2 0 0 0 1.732-1",
		key: "l4dndm"
	}]
]), c = i$1("square-check-big", [["path", {
	d: "M21 10.656V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.344",
	key: "2acyp4"
}], ["path", {
	d: "m9 11 3 3L22 4",
	key: "1pflzl"
}]]), t$3 = i$1("gauge", [["path", {
	d: "m12 14 4-4",
	key: "9kzdfg"
}], ["path", {
	d: "M3.34 19a10 10 0 1 1 17.32 0",
	key: "19p75a"
}]]), c$1 = i$1("radio", [
	["path", {
		d: "M16.247 7.761a6 6 0 0 1 0 8.478",
		key: "1fwjs5"
	}],
	["path", {
		d: "M19.075 4.933a10 10 0 0 1 0 14.134",
		key: "ehdyv1"
	}],
	["path", {
		d: "M4.925 19.067a10 10 0 0 1 0-14.134",
		key: "1q22gi"
	}],
	["path", {
		d: "M7.753 16.239a6 6 0 0 1 0-8.478",
		key: "r2q7qm"
	}],
	["circle", {
		cx: "12",
		cy: "12",
		r: "2",
		key: "1c9p78"
	}]
]), h$1 = i$1("group", [
	["path", {
		d: "M3 7V5c0-1.1.9-2 2-2h2",
		key: "adw53z"
	}],
	["path", {
		d: "M17 3h2c1.1 0 2 .9 2 2v2",
		key: "an4l38"
	}],
	["path", {
		d: "M21 17v2c0 1.1-.9 2-2 2h-2",
		key: "144t0e"
	}],
	["path", {
		d: "M7 21H5c-1.1 0-2-.9-2-2v-2",
		key: "rtnfgi"
	}],
	["rect", {
		width: "7",
		height: "5",
		x: "7",
		y: "7",
		rx: "1",
		key: "1eyiv7"
	}],
	["rect", {
		width: "7",
		height: "5",
		x: "10",
		y: "12",
		rx: "1",
		key: "1qlmkx"
	}]
]), a$4 = i$1("gamepad-2", [
	["line", {
		x1: "6",
		x2: "10",
		y1: "11",
		y2: "11",
		key: "1gktln"
	}],
	["line", {
		x1: "8",
		x2: "8",
		y1: "9",
		y2: "13",
		key: "qnk9ow"
	}],
	["line", {
		x1: "15",
		x2: "15.01",
		y1: "12",
		y2: "12",
		key: "krot7o"
	}],
	["line", {
		x1: "18",
		x2: "18.01",
		y1: "10",
		y2: "10",
		key: "1lcuu1"
	}],
	["path", {
		d: "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z",
		key: "mfqc10"
	}]
]), t$4 = i$1("upload", [
	["path", {
		d: "M12 3v12",
		key: "1x0j5s"
	}],
	["path", {
		d: "m17 8-5-5-5 5",
		key: "7q97r8"
	}],
	["path", {
		d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4",
		key: "ih7n3h"
	}]
]), t$5 = i$1("hand-platter", [
	["path", {
		d: "M12 3V2",
		key: "ar7q03"
	}],
	["path", {
		d: "m15.4 17.4 3.2-2.8a2 2 0 1 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2l-1.302-1.464A1 1 0 0 0 6.151 19H5",
		key: "n2g93r"
	}],
	["path", {
		d: "M2 14h12a2 2 0 0 1 0 4h-2",
		key: "1o2jem"
	}],
	["path", {
		d: "M4 10h16",
		key: "img6z1"
	}],
	["path", {
		d: "M5 10a7 7 0 0 1 14 0",
		key: "1ega1o"
	}],
	["path", {
		d: "M5 14v6a1 1 0 0 1-1 1H2",
		key: "1hescx"
	}]
]), a$5 = i$1("list", [
	["path", {
		d: "M3 5h.01",
		key: "18ugdj"
	}],
	["path", {
		d: "M3 12h.01",
		key: "nlz23k"
	}],
	["path", {
		d: "M3 19h.01",
		key: "noohij"
	}],
	["path", {
		d: "M8 5h13",
		key: "1pao27"
	}],
	["path", {
		d: "M8 12h13",
		key: "1za7za"
	}],
	["path", {
		d: "M8 19h13",
		key: "m83p4d"
	}]
]), y$1 = i$1("server", [
	["rect", {
		width: "20",
		height: "8",
		x: "2",
		y: "2",
		rx: "2",
		ry: "2",
		key: "ngkwjq"
	}],
	["rect", {
		width: "20",
		height: "8",
		x: "2",
		y: "14",
		rx: "2",
		ry: "2",
		key: "iecqi9"
	}],
	["line", {
		x1: "6",
		x2: "6.01",
		y1: "6",
		y2: "6",
		key: "16zg32"
	}],
	["line", {
		x1: "6",
		x2: "6.01",
		y1: "18",
		y2: "18",
		key: "nzw8ys"
	}]
]), c$2 = i$1("shield", [["path", {
	d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
	key: "oel41y"
}]]), t$6 = i$1("external-link", [
	["path", {
		d: "M15 3h6v6",
		key: "1q9fwt"
	}],
	["path", {
		d: "M10 14 21 3",
		key: "gplh6r"
	}],
	["path", {
		d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6",
		key: "a6xqqp"
	}]
]), c$3 = i$1("shield-check", [["path", {
	d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
	key: "oel41y"
}], ["path", {
	d: "m9 12 2 2 4-4",
	key: "dzmm74"
}]]), t$7 = i$1("send", [["path", {
	d: "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z",
	key: "1ffxy3"
}], ["path", {
	d: "m21.854 2.147-10.94 10.939",
	key: "12cjpa"
}]]), c$4 = i$1("settings", [["path", {
	d: "M9.671 4.136a2.34 2.34 0 0 1 4.659 0 2.34 2.34 0 0 0 3.319 1.915 2.34 2.34 0 0 1 2.33 4.033 2.34 2.34 0 0 0 0 3.831 2.34 2.34 0 0 1-2.33 4.033 2.34 2.34 0 0 0-3.319 1.915 2.34 2.34 0 0 1-4.659 0 2.34 2.34 0 0 0-3.32-1.915 2.34 2.34 0 0 1-2.33-4.033 2.34 2.34 0 0 0 0-3.831A2.34 2.34 0 0 1 6.35 6.051a2.34 2.34 0 0 0 3.319-1.915",
	key: "1i5ecw"
}], ["circle", {
	cx: "12",
	cy: "12",
	r: "3",
	key: "1v7zrd"
}]]), t$8 = i$1("sliders-vertical", [
	["path", {
		d: "M10 8h4",
		key: "1sr2af"
	}],
	["path", {
		d: "M12 21v-9",
		key: "17s77i"
	}],
	["path", {
		d: "M12 8V3",
		key: "13r4qs"
	}],
	["path", {
		d: "M17 16h4",
		key: "h1uq16"
	}],
	["path", {
		d: "M19 12V3",
		key: "o1uvq1"
	}],
	["path", {
		d: "M19 21v-5",
		key: "qua636"
	}],
	["path", {
		d: "M3 14h4",
		key: "bcjad9"
	}],
	["path", {
		d: "M5 10V3",
		key: "cb8scm"
	}],
	["path", {
		d: "M5 21v-7",
		key: "1w1uti"
	}]
]), t$9 = i$1("database", [
	["ellipse", {
		cx: "12",
		cy: "5",
		rx: "9",
		ry: "3",
		key: "msslwz"
	}],
	["path", {
		d: "M3 5V19A9 3 0 0 0 21 19V5",
		key: "1wlel7"
	}],
	["path", {
		d: "M3 12A9 3 0 0 0 21 12",
		key: "mv7ke4"
	}]
]), e$4 = i$1("box", [
	["path", {
		d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z",
		key: "hh9hay"
	}],
	["path", {
		d: "m3.3 7 8.7 5 8.7-5",
		key: "g66t2b"
	}],
	["path", {
		d: "M12 22V12",
		key: "d0xqtd"
	}]
]), t$10 = i$1("file-code", [
	["path", {
		d: "M10 12.5 8 15l2 2.5",
		key: "1tg20x"
	}],
	["path", {
		d: "m14 12.5 2 2.5-2 2.5",
		key: "yinavb"
	}],
	["path", {
		d: "M14 2v4a2 2 0 0 0 2 2h4",
		key: "tnqrlb"
	}],
	["path", {
		d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z",
		key: "1mlx9k"
	}]
]), t$11 = i$1("package", [
	["path", {
		d: "M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z",
		key: "1a0edw"
	}],
	["path", {
		d: "M12 22V12",
		key: "d0xqtd"
	}],
	["polyline", {
		points: "3.29 7 12 12 20.71 7",
		key: "ousv84"
	}],
	["path", {
		d: "m7.5 4.27 9 5.15",
		key: "1c824w"
	}]
]), t$12 = i$1("shield-alert", [
	["path", {
		d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
		key: "oel41y"
	}],
	["path", {
		d: "M12 8v4",
		key: "1got3b"
	}],
	["path", {
		d: "M12 16h.01",
		key: "1drbdi"
	}]
]), o$1 = i$1("folder-open", [["path", {
	d: "m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2",
	key: "usdka0"
}]]), l = i$1("layers", [
	["path", {
		d: "M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z",
		key: "zw3jo"
	}],
	["path", {
		d: "M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12",
		key: "1wduqc"
	}],
	["path", {
		d: "M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17",
		key: "kqbvx6"
	}]
]), a$6 = i$1("repeat", [
	["path", {
		d: "m17 2 4 4-4 4",
		key: "nntrym"
	}],
	["path", {
		d: "M3 11v-1a4 4 0 0 1 4-4h14",
		key: "84bu3i"
	}],
	["path", {
		d: "m7 22-4-4 4-4",
		key: "1wqhfi"
	}],
	["path", {
		d: "M21 13v1a4 4 0 0 1-4 4H3",
		key: "1rx37r"
	}]
]), t$13 = i$1("play", [["path", {
	d: "M5 5a2 2 0 0 1 3.008-1.728l11.997 6.998a2 2 0 0 1 .003 3.458l-12 7A2 2 0 0 1 5 19z",
	key: "10ikf1"
}]]), c$5 = i$1("lock", [["rect", {
	width: "18",
	height: "11",
	x: "3",
	y: "11",
	rx: "2",
	ry: "2",
	key: "1w4ew1"
}], ["path", {
	d: "M7 11V7a5 5 0 0 1 10 0v4",
	key: "fwvmzm"
}]]), e$5 = i$1("battery-charging", [
	["path", {
		d: "m11 7-3 5h4l-3 5",
		key: "b4a64w"
	}],
	["path", {
		d: "M14.856 6H16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.935",
		key: "lre1cr"
	}],
	["path", {
		d: "M22 14v-4",
		key: "14q9d5"
	}],
	["path", {
		d: "M5.14 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2.936",
		key: "13q5k0"
	}]
]), a$7 = i$1("link-2", [
	["path", {
		d: "M9 17H7A5 5 0 0 1 7 7h2",
		key: "8i5ue5"
	}],
	["path", {
		d: "M15 7h2a5 5 0 1 1 0 10h-2",
		key: "1b9ql8"
	}],
	["line", {
		x1: "8",
		x2: "16",
		y1: "12",
		y2: "12",
		key: "1jonct"
	}]
]), t$14 = i$1("link", [["path", {
	d: "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71",
	key: "1cjeqo"
}], ["path", {
	d: "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71",
	key: "19qd67"
}]]), e$6 = i$1("cable", [
	["path", {
		d: "M17 19a1 1 0 0 1-1-1v-2a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2a1 1 0 0 1-1 1z",
		key: "trhst0"
	}],
	["path", {
		d: "M17 21v-2",
		key: "ds4u3f"
	}],
	["path", {
		d: "M19 14V6.5a1 1 0 0 0-7 0v11a1 1 0 0 1-7 0V10",
		key: "1mo9zo"
	}],
	["path", {
		d: "M21 21v-2",
		key: "eo0ou"
	}],
	["path", {
		d: "M3 5V3",
		key: "1k5hjh"
	}],
	["path", {
		d: "M4 10a2 2 0 0 1-2-2V6a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2z",
		key: "1dd30t"
	}],
	["path", {
		d: "M7 5V3",
		key: "1t1388"
	}]
]), e$7 = i$1("arrow-up", [["path", {
	d: "m5 12 7-7 7 7",
	key: "hav0vg"
}], ["path", {
	d: "M12 19V5",
	key: "x0mq9r"
}]]), a$8 = i$1("arrow-up-right", [["path", {
	d: "M7 7h10v10",
	key: "1tivn9"
}], ["path", {
	d: "M7 17 17 7",
	key: "1vkiza"
}]]), t$15 = i$1("file", [["path", {
	d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z",
	key: "1rqfz7"
}], ["path", {
	d: "M14 2v4a2 2 0 0 0 2 2h4",
	key: "tnqrlb"
}]]), a$9 = i$1("minus", [["path", {
	d: "M5 12h14",
	key: "1ays0h"
}]]), e$8 = i$1("tags", [
	["path", {
		d: "M13.172 2a2 2 0 0 1 1.414.586l6.71 6.71a2.4 2.4 0 0 1 0 3.408l-4.592 4.592a2.4 2.4 0 0 1-3.408 0l-6.71-6.71A2 2 0 0 1 6 9.172V3a1 1 0 0 1 1-1z",
		key: "16rjxf"
	}],
	["path", {
		d: "M2 7v6.172a2 2 0 0 0 .586 1.414l6.71 6.71a2.4 2.4 0 0 0 3.191.193",
		key: "178nd4"
	}],
	["circle", {
		cx: "10.5",
		cy: "6.5",
		r: ".5",
		fill: "currentColor",
		key: "12ikhr"
	}]
]), r$6 = i$1("arrow-down", [["path", {
	d: "M12 5v14",
	key: "s699le"
}], ["path", {
	d: "m19 12-7 7-7-7",
	key: "1idqje"
}]]), r$7 = i$1("git-branch", [
	["line", {
		x1: "6",
		x2: "6",
		y1: "3",
		y2: "15",
		key: "17qcm7"
	}],
	["circle", {
		cx: "18",
		cy: "6",
		r: "3",
		key: "1h7g24"
	}],
	["circle", {
		cx: "6",
		cy: "18",
		r: "3",
		key: "fqmcym"
	}],
	["path", {
		d: "M18 9a9 9 0 0 1-9 9",
		key: "n2h4wq"
	}]
]), a$10 = i$1("hard-drive", [
	["line", {
		x1: "22",
		x2: "2",
		y1: "12",
		y2: "12",
		key: "1y58io"
	}],
	["path", {
		d: "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z",
		key: "oot6mr"
	}],
	["line", {
		x1: "6",
		x2: "6.01",
		y1: "16",
		y2: "16",
		key: "sgf278"
	}],
	["line", {
		x1: "10",
		x2: "10.01",
		y1: "16",
		y2: "16",
		key: "1l4acy"
	}]
]), o$2 = i$1("globe", [
	["circle", {
		cx: "12",
		cy: "12",
		r: "10",
		key: "1mglay"
	}],
	["path", {
		d: "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20",
		key: "13o1zl"
	}],
	["path", {
		d: "M2 12h20",
		key: "9i4pu4"
	}]
]), a$11 = i$1("key", [
	["path", {
		d: "m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4",
		key: "g0fldk"
	}],
	["path", {
		d: "m21 2-9.6 9.6",
		key: "1j0ho8"
	}],
	["circle", {
		cx: "7.5",
		cy: "15.5",
		r: "5.5",
		key: "yqb3hr"
	}]
]), a$12 = i$1("history", [
	["path", {
		d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8",
		key: "1357e3"
	}],
	["path", {
		d: "M3 3v5h5",
		key: "1xhq8a"
	}],
	["path", {
		d: "M12 7v5l4 2",
		key: "1fdv2h"
	}]
]), t$16 = i$1("heading", [
	["path", {
		d: "M6 12h12",
		key: "8npq4p"
	}],
	["path", {
		d: "M6 20V4",
		key: "1w1bmo"
	}],
	["path", {
		d: "M18 20V4",
		key: "o2hl4u"
	}]
]), o$3 = i$1("folder", [["path", {
	d: "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z",
	key: "1kt360"
}]]), r$8 = i$1("git-fork", [
	["circle", {
		cx: "12",
		cy: "18",
		r: "3",
		key: "1mpf1b"
	}],
	["circle", {
		cx: "6",
		cy: "6",
		r: "3",
		key: "1lh9wr"
	}],
	["circle", {
		cx: "18",
		cy: "6",
		r: "3",
		key: "1h7g24"
	}],
	["path", {
		d: "M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9",
		key: "1uq4wg"
	}],
	["path", {
		d: "M12 12v3",
		key: "158kv8"
	}]
]), k = i$1("user-cog", [
	["path", {
		d: "M10 15H6a4 4 0 0 0-4 4v2",
		key: "1nfge6"
	}],
	["path", {
		d: "m14.305 16.53.923-.382",
		key: "1itpsq"
	}],
	["path", {
		d: "m15.228 13.852-.923-.383",
		key: "eplpkm"
	}],
	["path", {
		d: "m16.852 12.228-.383-.923",
		key: "13v3q0"
	}],
	["path", {
		d: "m16.852 17.772-.383.924",
		key: "1i8mnm"
	}],
	["path", {
		d: "m19.148 12.228.383-.923",
		key: "1q8j1v"
	}],
	["path", {
		d: "m19.53 18.696-.382-.924",
		key: "vk1qj3"
	}],
	["path", {
		d: "m20.772 13.852.924-.383",
		key: "n880s0"
	}],
	["path", {
		d: "m20.772 16.148.924.383",
		key: "1g6xey"
	}],
	["circle", {
		cx: "18",
		cy: "15",
		r: "3",
		key: "gjjjvw"
	}],
	["circle", {
		cx: "9",
		cy: "7",
		r: "4",
		key: "nufk8"
	}]
]), c$6 = i$1("square-function", [
	["rect", {
		width: "18",
		height: "18",
		x: "3",
		y: "3",
		rx: "2",
		ry: "2",
		key: "1m3agn"
	}],
	["path", {
		d: "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3",
		key: "m1af9g"
	}],
	["path", {
		d: "M9 11.2h5.7",
		key: "3zgcl2"
	}]
]), d$1 = i$1("list-ordered", [
	["path", {
		d: "M11 5h10",
		key: "1cz7ny"
	}],
	["path", {
		d: "M11 12h10",
		key: "1438ji"
	}],
	["path", {
		d: "M11 19h10",
		key: "11t30w"
	}],
	["path", {
		d: "M4 4h1v5",
		key: "10yrso"
	}],
	["path", {
		d: "M4 9h2",
		key: "r1h2o0"
	}],
	["path", {
		d: "M6.5 20H3.4c0-1 2.6-1.925 2.6-3.5a1.5 1.5 0 0 0-2.6-1.02",
		key: "xtkcd5"
	}]
]), t$17 = i$1("table-2", [["path", {
	d: "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18",
	key: "gugj83"
}]]), h$2 = i$1("layout-template", [
	["rect", {
		width: "18",
		height: "7",
		x: "3",
		y: "3",
		rx: "1",
		key: "f1a2em"
	}],
	["rect", {
		width: "9",
		height: "7",
		x: "3",
		y: "14",
		rx: "1",
		key: "jqznyg"
	}],
	["rect", {
		width: "5",
		height: "7",
		x: "16",
		y: "14",
		rx: "1",
		key: "q5h2i8"
	}]
]), h$3 = i$1("table", [
	["path", {
		d: "M12 3v18",
		key: "108xh3"
	}],
	["rect", {
		width: "18",
		height: "18",
		x: "3",
		y: "3",
		rx: "2",
		key: "afitv7"
	}],
	["path", {
		d: "M3 9h18",
		key: "1pudct"
	}],
	["path", {
		d: "M3 15h18",
		key: "5xshup"
	}]
]), x$1 = i$1("gamepad", [
	["line", {
		x1: "6",
		x2: "10",
		y1: "12",
		y2: "12",
		key: "161bw2"
	}],
	["line", {
		x1: "8",
		x2: "8",
		y1: "10",
		y2: "14",
		key: "1i6ji0"
	}],
	["line", {
		x1: "15",
		x2: "15.01",
		y1: "13",
		y2: "13",
		key: "dqpgro"
	}],
	["line", {
		x1: "18",
		x2: "18.01",
		y1: "11",
		y2: "11",
		key: "meh2c"
	}],
	["rect", {
		width: "20",
		height: "12",
		x: "2",
		y: "6",
		rx: "2",
		key: "9lu3g6"
	}]
]), p = i$1("plug-zap", [
	["path", {
		d: "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z",
		key: "goz73y"
	}],
	["path", {
		d: "m2 22 3-3",
		key: "19mgm9"
	}],
	["path", {
		d: "M7.5 13.5 10 11",
		key: "7xgeeb"
	}],
	["path", {
		d: "M10.5 16.5 13 14",
		key: "10btkg"
	}],
	["path", {
		d: "m18 3-4 4h6l-4 4",
		key: "16psg9"
	}]
]), t$18 = i$1("wifi", [
	["path", {
		d: "M12 20h.01",
		key: "zekei9"
	}],
	["path", {
		d: "M2 8.82a15 15 0 0 1 20 0",
		key: "dnpr2z"
	}],
	["path", {
		d: "M5 12.859a10 10 0 0 1 14 0",
		key: "1x1e6c"
	}],
	["path", {
		d: "M8.5 16.429a5 5 0 0 1 7 0",
		key: "1bycff"
	}]
]), h$4 = i$1("binary", [
	["rect", {
		x: "14",
		y: "14",
		width: "4",
		height: "6",
		rx: "2",
		key: "p02svl"
	}],
	["rect", {
		x: "6",
		y: "4",
		width: "4",
		height: "6",
		rx: "2",
		key: "xm4xkj"
	}],
	["path", {
		d: "M6 20h4",
		key: "1i6q5t"
	}],
	["path", {
		d: "M14 10h4",
		key: "ru81e7"
	}],
	["path", {
		d: "M6 14h2v6",
		key: "16z9wg"
	}],
	["path", {
		d: "M14 4h2v6",
		key: "1idq9u"
	}]
]), r$9 = i$1("layout-grid", [
	["rect", {
		width: "7",
		height: "7",
		x: "3",
		y: "3",
		rx: "1",
		key: "1g98yp"
	}],
	["rect", {
		width: "7",
		height: "7",
		x: "14",
		y: "3",
		rx: "1",
		key: "6d4xhi"
	}],
	["rect", {
		width: "7",
		height: "7",
		x: "14",
		y: "14",
		rx: "1",
		key: "nxv5o0"
	}],
	["rect", {
		width: "7",
		height: "7",
		x: "3",
		y: "14",
		rx: "1",
		key: "1bb6yr"
	}]
]), o$4 = i$1("columns-2", [["rect", {
	width: "18",
	height: "18",
	x: "3",
	y: "3",
	rx: "2",
	key: "afitv7"
}], ["path", {
	d: "M12 3v18",
	key: "108xh3"
}]]), p$1 = i$1("app-window", [
	["rect", {
		x: "2",
		y: "4",
		width: "20",
		height: "16",
		rx: "2",
		key: "izxlao"
	}],
	["path", {
		d: "M10 4v4",
		key: "pp8u80"
	}],
	["path", {
		d: "M2 8h20",
		key: "d11cs7"
	}],
	["path", {
		d: "M6 4v4",
		key: "1svtjw"
	}]
]), e$9 = i$1("map-pin", [["path", {
	d: "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0",
	key: "1r0f0z"
}], ["circle", {
	cx: "12",
	cy: "10",
	r: "3",
	key: "ilqhr7"
}]]), re = {
	AccessControl: c$3,
	AccessPoint: i$1("plug", [
		["path", {
			d: "M12 22v-5",
			key: "1ega77"
		}],
		["path", {
			d: "M9 8V2",
			key: "14iosj"
		}],
		["path", {
			d: "M15 8V2",
			key: "18g5xt"
		}],
		["path", {
			d: "M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z",
			key: "osxo6l"
		}]
	]),
	Address: e$9,
	AllocationRole: k,
	AllocationRoleRef: r$3,
	AnalogueWiringParameters: e,
	AnalogueWiringParametersRef: e,
	Application: p$1,
	ApplicationSclRef: t$6,
	Association: t$14,
	Authentication: a$11,
	BDA: t$9,
	Bay: o$4,
	BayType: r$9,
	BehaviorDescription: a$3,
	BehaviorDescriptionRef: a$3,
	BehaviorReference: a,
	BinaryWiringParameters: h$4,
	BinaryWiringParametersRef: h$4,
	BitRate: t$3,
	CheckoutID: t$2,
	ClientLN: r$2,
	ClientServices: y$1,
	CommProt: c$2,
	Communication: t$18,
	CommunicationServiceSpecifications: h,
	ConductingEquipment: t,
	ConfDataSet: c$4,
	ConfLNs: c$4,
	ConfLdName: c$4,
	ConfLogControl: c$4,
	ConfReportControl: c$4,
	ConfSG: c$4,
	ConfSigRef: c$4,
	ConnectedAP: p,
	ConnectivityNode: r$7,
	ControlRef: a$4,
	ControllingLNode: x$1,
	DA: t$9,
	DAI: t$9,
	DAS: t$9,
	DAType: l,
	DO: e$4,
	DOI: e$4,
	DOS: e$4,
	DOType: l,
	DataObjectDirectory: o$3,
	DataSet: h$3,
	DataSetDirectory: o$1,
	DataTypeTemplates: h$2,
	DynAssociation: a$7,
	DynDataSet: t$17,
	EnumType: a$5,
	EnumVal: d$1,
	EqFunction: c$6,
	EqSubFunction: r$5,
	ExtCtrl: t$6,
	ExtRef: a$8,
	FCDA: t$9,
	FileHandling: t$15,
	Function: c$6,
	FunctionCatRef: e$3,
	FunctionCategory: e$3,
	FunctionCategoryRef: e$3,
	FunctionRef: a,
	FunctionRole: k,
	FunctionRoleContent: r$4,
	FunctionSclRef: t$6,
	FunctionTemplate: a$3,
	FunctionalSubVariant: r$7,
	FunctionalVariant: r$8,
	FunctionalVariantGroup: h$1,
	FunctionalVariantRef: a,
	GOOSE: t$7,
	GOOSEMcSecurity: c$3,
	GOOSESecurity: c$2,
	GSE: t$7,
	GSEControl: a$4,
	GSEDir: o$3,
	GSESettings: c$4,
	GSSE: t$7,
	GeneralEquipment: e$2,
	GetCBValues: t$4,
	GetDataObjectDefinition: t$4,
	GetDataSetValue: t$4,
	GetDirectory: o$1,
	GooseParameters: t$8,
	GooseParametersRef: t$8,
	Header: t$16,
	History: a$12,
	Hitem: o,
	IED: e$2,
	IEDName: e$3,
	IEDSourceFiles: d,
	InputVar: r$6,
	InputVarRef: a$8,
	Inputs: r$6,
	IssuerName: r$4,
	KDC: a$11,
	L2CommParameters: h,
	L3IPv4CommParameters: o$2,
	L3IPv6CommParameters: o$2,
	LDevice: a$10,
	LN: e$4,
	LN0: r$5,
	LNode: r$7,
	LNodeDataRef: a,
	LNodeInputRef: a$8,
	LNodeInputs: r$6,
	LNodeOutputRef: a$8,
	LNodeOutputs: e$7,
	LNodeSpecNaming: e$3,
	LNodeType: l,
	Label: e$3,
	Labels: e$8,
	Line: a$9,
	Log: a$3,
	LogControl: a$4,
	LogParameters: t$8,
	LogParametersRef: t$8,
	LogSettings: c$4,
	MaxTime: o,
	McSecurity: c$2,
	MinRequestedSCDFile: t$15,
	MinRequestedSCDFiles: d,
	MinTime: o,
	MultiAPPerSubNet: h,
	NeutralPoint: r$5,
	OptFields: c,
	OutputVar: e$7,
	OutputVarRef: a$8,
	Outputs: e$7,
	P: t$1,
	PhysConn: e$6,
	PowerSystemRelation: t$14,
	PowerSystemRelationRef: a,
	PowerSystemRelations: a$7,
	PowerTransformer: e$5,
	Private: c$5,
	Process: t$13,
	ProcessEcho: a$6,
	ProcessResource: e$2,
	ProcessResourceRef: a,
	ProcessResources: l,
	Project: o$1,
	ProjectProcessReference: a,
	ProtNs: c$2,
	Protocol: h,
	ReadWrite: r,
	RedProt: t$12,
	ReportControl: a$4,
	ReportParameters: t$8,
	ReportParametersRef: t$8,
	ReportSettings: c$4,
	Resource: t$11,
	RptEnabled: r$1,
	SCL: t$10,
	SCSM: c$2,
	SDI: t$9,
	SDO: e$4,
	SDS: t$9,
	SGEdit: r,
	SMV: t$7,
	SMVParameters: t$8,
	SMVParametersRef: t$8,
	SMVSecurity: c$2,
	SMVSettings: c$4,
	SMVsc: t$7,
	SVMcSecurity: c$3,
	SampledValueControl: a$4,
	SamplesPerSec: t$3,
	SclFileReference: t$6,
	SecPerSamples: o,
	Security: c$2,
	Server: y$1,
	ServerAt: y$1,
	ServiceSpecifications: a$5,
	Services: t$5,
	SetDataSetValue: t$4,
	SettingControl: a$4,
	SettingGroups: h$1,
	SignalRole: c$1,
	SmpRate: t$3,
	SmvOpts: c,
	SourceFiles: d,
	SourceRef: a,
	SubCategory: e$3,
	SubCheckoutID: t$2,
	SubEquipment: e$2,
	SubFunction: r$5,
	SubFunctionTemplate: a$3,
	SubNetwork: h,
	Subject: r$4,
	SubscriberLNode: r$3,
	Substation: e$1,
	SupSubscription: r$2,
	TapChanger: r$1,
	Terminal: a$2,
	Text: t$1,
	TimeSyncProt: o,
	TimerActivatedControl: i,
	TransformerWinding: a$1,
	TrgOps: t,
	Val: x,
	ValueHandling: r,
	Variable: y,
	VariableApplyTo: a,
	VariableRef: a,
	Voltage: t,
	VoltageLevel: e
}, _hoisted_1$1 = { class: "pl-2" }, element_tree_default = /* @__PURE__ */ defineComponent({
	__name: "element-tree",
	setup(u) {
		let { sdkInstance: _ } = storeToRefs(useGlobalStore()), T = computedAsync(async () => {
			let u = await _.value?.api.fromRoot().getChildren();
			if (!u) return [];
			function T(u) {
				return {
					tag: u.tagName,
					id: u.id,
					...u.treeChildren.length && { children: u.treeChildren.map((u) => T(u)) }
				};
			}
			return [T(u)];
		}), E = computed(() => T.value?.find((u) => u.tag === "SCL")?.id);
		return (u, _) => E.value ? (openBlock(), createBlock(unref(TreeRoot_default), {
			key: 0,
			class: "list-none select-none w-full text-stone-700 p-2 text-sm font-medium",
			items: unref(T),
			"get-key": (u) => u.id,
			"default-expanded": [E.value]
		}, {
			default: withCtx(({ flattenItems: u }) => [(openBlock(!0), createElementBlock(Fragment, null, renderList(u, (u) => (openBlock(), createBlock(unref(TreeItem_default), mergeProps({
				key: u.value.id,
				style: { "padding-left": `${u.level - .5}rem` }
			}, { ref_for: !0 }, u.bind, { class: "flex items-center py-1 px-2 my-0.5 rounded outline-none focus:ring-grass8 focus:ring-2 data-[selected]:bg-grass4" }), {
				default: withCtx(() => [unref(re)[u.value.tag] ? (openBlock(), createBlock(resolveDynamicComponent(unref(re)[u.value.tag]), {
					key: 0,
					class: "h-4 w-4"
				})) : createCommentVNode("", !0), createBaseVNode("div", _hoisted_1$1, toDisplayString(u.value.tag), 1)]),
				_: 2
			}, 1040, ["style"]))), 128))]),
			_: 1
		}, 8, [
			"items",
			"get-key",
			"default-expanded"
		])) : createCommentVNode("", !0);
	}
}), _hoisted_1 = { class: "overflow-auto h-full" }, _hoisted_2 = { class: "pb-5" }, app_default = /* @__PURE__ */ defineComponent({
	__name: "app",
	props: { api: {} },
	setup(u) {
		let _ = u, T = useGlobalStore(), E = ref();
		return onMounted(() => {
			E.value = _.api.activeFileName.subscribe((u) => {
				u && T.initApp(u);
			}), _.api.activeFileName.value && T.initApp(_.api.activeFileName.value);
		}), onUnmounted(() => {
			E.value?.();
		}), (u, _) => (openBlock(), createElementBlock("article", _hoisted_1, [createBaseVNode("div", _hoisted_2, [createVNode(element_tree_default)])]));
	}
});
function start(u, _) {
	if (!document.getElementById(u)) {
		console.error({
			msg: "could not found root element",
			rootId: u
		});
		return;
	}
	let T = createApp(app_default, { api: _ });
	return T.use(createPinia()), T.mount(`#${u}`), T.unmount;
}
export { start as default };
